<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生Computer Science编程作业代写</title>
  <subtitle>专业 高效 原创</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-19T09:59:54.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>csyoyo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>留学生Computer Science编程作业代写</title>
    <link href="http://yoursite.com/2111/01/11/mainpage/"/>
    <id>http://yoursite.com/2111/01/11/mainpage/</id>
    <published>2111-01-11T07:55:30.000Z</published>
    <updated>2016-09-19T09:59:54.153Z</updated>
    
    <content type="html">&lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队成员有的擅长java，有的擅长python，有的擅长数据结构，有的擅长机器学习，&lt;br&gt;  有的擅长C/C++，有的擅长ios/android。通过自己设计的任务分发系统，我们可以在15分钟内迅速准确评估时间和难度，完成之后还有互相之间的code review。&lt;br&gt;  相比与代写机构的黑心，个人代写的不规范(我们也是个人代写发展而来)，我们团队经过不断的调整进步，具备了代写机构规范的流程优势，&lt;br&gt;  并且价格合理，具备了个人代写的一对一，并且熟练了解代写流程规范。&lt;/p&gt;
&lt;h2 id=&quot;服务内容&quot;&gt;&lt;a href=&quot;#服务内容&quot; class=&quot;headerlink&quot; title=&quot;服务内容&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;服务内容&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  代写美国、加拿大、英国、澳洲或者其他国家的Computer Science编程作业，范围包括&lt;font color=&quot;red&quot;&gt;Assignment、Homework、Lab、Project、Final甚至App&lt;/font&gt;。&lt;br&gt;    我不会给你看不懂的高逼格code，我的编程风格都是模仿你的slides和notes，为你量身打造，&lt;font color=&quot;red&quot;&gt;绝无超纲代码&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;特别擅长各种疑难作业&lt;/font&gt;，做过大量Game Design、Operating System、Database System, Web Design，得分几乎全A(90%)。&lt;/p&gt;
&lt;h2 id=&quot;擅长范围&quot;&gt;&lt;a href=&quot;#擅长范围&quot; class=&quot;headerlink&quot; title=&quot;擅长范围&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;擅长范围&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  我们擅长范围包括但不限于：&lt;br&gt;    C C++ Java Python Php Android Ios&lt;br&gt;    Js Jsp Qt MFC J2ee Sql Matlab Ssh&lt;br&gt;    Assignment/Project/Lab/作业/编程/辅导&lt;br&gt;    Data structure/数据结构/机器学习/定制/制作&lt;br&gt;    Linux/Windows/Mac socket Algorithom/算法&lt;br&gt;    网站设计 Web开发 Operating system/操作系统&lt;br&gt;    Computer Science Everything/程序设计/app/&lt;/p&gt;
&lt;h2 id=&quot;质量保证&quot;&gt;&lt;a href=&quot;#质量保证&quot; class=&quot;headerlink&quot; title=&quot;质量保证&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;质量保证&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  开发之前会详细问你的开发语言、系统环境、软件版本、测试方式(本地测试、服务器自动测试)、是否需要documention、deadline(精确到小时)&lt;br&gt;    沟通好时间后，我们不会临着deadline给你code。一般都是提前足够的时间给客户反馈一个版本的code，如果有问题需要反馈修改也有充足的时间。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;除了code会免费提供给客户一个运行说明word，即使客户不知道如何运行，根据说明word也可以运行验证code&lt;/font&gt;。&lt;br&gt;    带checker/tester的必全过，带得分点的必全做，能顺手做掉的bonus也帮你做。&lt;br&gt;    小作业24小时内完成，大作业24-72小时，绝不浪费你的slip day。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;代码肯定是手写原创，不违反honor code，我给你的代码属于reference&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;免费提供售后服务，包括代码运行，讲解答疑&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&quot;价格优势&quot;&gt;&lt;a href=&quot;#价格优势&quot; class=&quot;headerlink&quot; title=&quot;价格优势&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;价格优势&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  价格通常在$100 USD以上，只有部分Lab可能低于这个价格。&lt;br&gt;    真正的&lt;font color=&quot;red&quot;&gt;无中介费用&lt;/font&gt;，绝不漫天要价，欢迎你货比三家，支持PayPal/支付宝/微信支付。&lt;br&gt;    通常先收取一半定金，写好之后验收code之后付尾款。&lt;br&gt;    我给你的不止是一个答案，还有我作为工程师的经验，编程方法和技巧。&lt;/p&gt;
&lt;h2 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;联系方式&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  邮箱 : cscoderman@gmail.com (请附带作业要求)&lt;br&gt;    微信 : cscoderman&lt;br&gt;    联系时，请简单或详细地说明你的要求+微信昵称(如大二，Algorithm and Data Structure)，便于我们快速报价与沟通。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python代写 FIT1045 Algorithmic Problem Solving</title>
    <link href="http://yoursite.com/2017/01/15/page96/"/>
    <id>http://yoursite.com/2017/01/15/page96/</id>
    <published>2017-01-15T13:15:12.000Z</published>
    <updated>2017-01-15T14:18:37.553Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python中实现三道题，&lt;br&gt;主要考验对数据结构，算法的理解。&lt;br&gt;&lt;br&gt;完成本次程序设计需要理解简单算法，以及文件处理等等。&lt;br&gt;&lt;br&gt;&lt;br&gt;步骤：&lt;br&gt;1、读取对应的数据，利用简单的算法获得对应的值&lt;br&gt;2、需要实现回文字符串的计算&lt;br&gt;3、需要实现good string求解&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;FIT1045 Algorithmic Problem Solving – Assignment (15%).&lt;br&gt;Due: Midnight, Friday 23rd September, 2016.&lt;br&gt;Objectives&lt;br&gt;The objectives of this assignment are:&lt;br&gt;• To demonstrate the ability to implement algorithms using basic data structures and operations on them.&lt;br&gt;• To gain experience in designing an algorithm for a given problem description and implementing that&lt;br&gt;algorithm in Python.&lt;br&gt;Submission Procedure&lt;br&gt;1. Put you name and student ID as a comment on each file.&lt;br&gt;2. Save your files into a single folder and create a zip file of this folder called yourFirstName yourLastName.zip&lt;br&gt;3. Submit your zip file containing your solution to Moodle. Make sure that your assignment is not in “Draft”&lt;br&gt;mode. You need to click “Submit” to successfully submit the assignment.&lt;br&gt;4. Your assignment will not be accepted unless it is a readable zip file.&lt;br&gt;Important Notes:&lt;br&gt;1. Please ensure that you have read and understood the university’s policies on plagiarism and collusion&lt;br&gt;available at &lt;a href=&quot;http://www.monash.edu.au/students/policies/academic-integrity.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.monash.edu.au/students/policies/academic-integrity.html&lt;/a&gt;. You will be&lt;br&gt;required to agree to these policies when you submit your assignment. The assignments will be checked for&lt;br&gt;plagiarism using an advanced plagiarism detector.&lt;br&gt;2. You must not use the built-in functions to sort (e.g., sort() or sorted()), search (e.g., x in list) or&lt;br&gt;to find the maximum/minimum element in the list (e.g., max() or min()): please write your own Python&lt;br&gt;code for these if required. You are not allowed to import any Python library or module.&lt;br&gt;3. Your program will be checked against a number of test cases. Do not forget to include comments in your&lt;br&gt;code explaining your algorithm. If your implementations have bugs, you may still get some marks based&lt;br&gt;on how close your algorithm is to the correct algorithm.&lt;br&gt;4. For each task, you need to write a program that properly decomposes the problem. You will learn functions&lt;br&gt;and decomposition in Week 6.&lt;br&gt;Marks: This assignment has a total of 30 marks and contributes to 15% of your final mark. Late submission&lt;br&gt;will have 10% off the total assignment marks per day (including weekends) deducted from your assignment&lt;br&gt;mark, i.e., 3 marks per day. So, if you are 1 day late, you will lose 3 marks. Assignments submitted 7 days&lt;br&gt;after the due date will normally not be accepted.&lt;br&gt;Marking Guide:&lt;br&gt;Task 1: 8 marks&lt;br&gt;(a) Code readability (Non-trivial comments where necessary and meaningful variable names) – 1 mark&lt;br&gt;(b) Code decomposition – 1 mark&lt;br&gt;(c) Correctly determining the minimum and maximum score given by a judge to a participant – 2 marks&lt;br&gt;(d) Final scores correctly computed for each contestant – 2 marks&lt;br&gt;(e) Creating the “Scoreboard” table and displaying the final score for each participant – 2 marks&lt;br&gt;1&lt;br&gt;Task 2: 10 marks&lt;br&gt;(a) Code readability (Non-trivial comments where necessary and meaningful variable names) – 1 marks&lt;br&gt;(b) Code decomposition – 1 mark&lt;br&gt;(c) Correctly determining if a palindrome can be formed using all letters or not – 2 marks&lt;br&gt;(d) Correctly determining the lexicographically smallest palindrome – 6 marks&lt;br&gt;Task 3: 12 marks&lt;br&gt;(a) Code readability (Non-trivial comments where necessary and meaningful variable names) – 1 mark&lt;br&gt;(b) Proper decomposition of the problem – 1 mark&lt;br&gt;(c) Correctly writing isGood(s1,s2) function – 2 marks&lt;br&gt;(d) Correctly writing isAlmostGood(s1,s2) function – 6 marks&lt;br&gt;(e) Correctly determining if the string is a bad string using – 2 marks&lt;br&gt;Task 1: Australian Idol 8 Marks&lt;br&gt;You are hired by Australian Idol to write a program to create a scoreboard for them. Each participant is&lt;br&gt;judged by 5 different judges where each judge gives a score between 0 to 10. You are given an input file named&lt;br&gt;raw scores.txt which contains 10 lines (one for each participant). Each line contains 6 strings separated by&lt;br&gt;spaces. The first string in each line is the name of the participant. The remaining 5 strings record the scores&lt;br&gt;given by the 5 judges to the participant. Below is an example showing scores for three participants Mark, Alice&lt;br&gt;and Alan.&lt;br&gt;Mark 1 10 0 2 9&lt;br&gt;Alice 8 10 8 0 10&lt;br&gt;Alan 10 10 10 10 10&lt;br&gt;The final score of each participant is computed as follows. To handle potentially biased judges, the highest&lt;br&gt;score and lowest score received for the participant are ignored and the average of remaining three scores is&lt;br&gt;the final score. E.g., for Mark, the highest score 10 and the lowest score 0 are ignored and his final score is&lt;br&gt;1+2+9&lt;br&gt;3&lt;br&gt;= 4. Alice’s final score is&lt;br&gt;8+8+10&lt;br&gt;3&lt;br&gt;= 8.67 (ignoring lowest score 0 and one of the two 10 scores) and&lt;br&gt;Alan’s final score is&lt;br&gt;10+10+10&lt;br&gt;3&lt;br&gt;= 10 (ignoring the lowest score 10 and the highest score 10). Note that the final&lt;br&gt;score is rounded to two decimal points (e.g., Alice’s score is rounded to 8.67). You can use round() function&lt;br&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#round&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.python.org/3/library/functions.html#round&lt;/a&gt;.&lt;br&gt;Your program should read the raw scores.txt file and compute the final score for each participant. The&lt;br&gt;results must be stored in a table called “Scoreboard” that consists of two columns recording the names of the&lt;br&gt;participants and their final scores. Your program must also print the final score for each participant. Below is&lt;br&gt;a sample output for the above input.&lt;br&gt;Mark: 4&lt;br&gt;Alice: 8.67&lt;br&gt;Alan: 10&lt;br&gt;Important: Your program will be checked on an input file that will contain data different than the data&lt;br&gt;provided in raw scores.txt file. Therefore, do not tweak your program to work only for the provided file (e.g.,&lt;br&gt;by manually computing scores). However, you can assume that the input file will contain exactly 10 participants&lt;br&gt;and each participant will be judged by exactly 5 judges. You can also assume that the name of the input file&lt;br&gt;will be the same, i.e., raw scores.txt.&lt;br&gt;Task 2: Palindromes 10 Marks&lt;br&gt;You are given a sequence of letters (all lowercase). Your goal is to rearrange the letters to form a palindrome.&lt;br&gt;The palindrome must contain all the given letters. The palindrome does not need to be an English word, i.e.,&lt;br&gt;it is any sequence of letters that is the same when reversed. If there is more than one palindromes that can&lt;br&gt;be formed using all of the given letters, your program must output the lexicographically smallest palindrome&lt;br&gt;string (i.e., the palindrome that appears first in the alphabetical order &lt;a href=&quot;https://en.wikipedia.org/wiki/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/&lt;/a&gt;&lt;br&gt;2&lt;br&gt;Alphabetical_order). For example, if the input sequence of letters is x y x z y, then xyzyx and yxzxy both&lt;br&gt;are palindrome strings formed using all the letters in the sequence. However, xyzyx is the lexicographically&lt;br&gt;smallest. Thus, the output must be xyzyx. If no palindrome can be formed by the letters in the input sequence&lt;br&gt;then you must output impossible. For example, if the input sequence is a l g o r i t h m, your program&lt;br&gt;must output impossible.&lt;br&gt;Your program must read from the input file named letters.txt that contains a single line containing a&lt;br&gt;sequence of letters separated by spaces. Below is a sample input file.&lt;br&gt;x y x z y&lt;br&gt;There may be up to 1000 letters in the input line. Your program must create a list containing all these&lt;br&gt;letters. Then, the program must print the lexicographically smallest palindrome that can be formed by the&lt;br&gt;letters in the list. If no palindrome can be formed using all these letters, your program must output impossible&lt;br&gt;Task 3: (Almost) Good Strings 12 Marks&lt;br&gt;Suppose you are given two strings named s1 and s2 (containing only lowercase letters). The string s1 is called&lt;br&gt;a “good” string if it contains s2, i.e., s2 is a substring of s1. For example, if s1 is smart and s2 is art, then&lt;br&gt;s1 is a good string because smart contains art. The string s1 is called “almost good” if it is not a “good”&lt;br&gt;string but inserting one character into it would make it a “good” string. For example, if s1 is smart and s2&lt;br&gt;is mark, then s1 is not a good string because mark is not a substring of smart. But s1 is an “almost good”&lt;br&gt;string because inserting the letter k in s1 (between r and t) makes it smarkt which is a “good” string because&lt;br&gt;it contains mark. The string s1 is called a “bad” string if it is neither a “good” nor an ”almost good” string.&lt;br&gt;You need to write two functions called isGood(s1, s2) and isAlmostGood(s1, s2) that return true if&lt;br&gt;and only if s1 is “good” and “almost good”, respectively.&lt;br&gt;Your program must ask the user to enter two input strings: first input string will be s1 and the second input&lt;br&gt;string will be s2. Both strings must be converted to lowercase letters. Then, the program must call the two&lt;br&gt;functions to determine whether s1 is a “good”, “almost good” or “bad” string. The result must be printed.&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python中实现三道题，&lt;br&gt;主要考验对数据结构，算法的理解。&lt;br&gt;&lt;br&gt;完成本次程序设计需要理解简单算法，以及文
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Prof Jeff Johnson   CS 110</title>
    <link href="http://yoursite.com/2017/01/14/page95/"/>
    <id>http://yoursite.com/2017/01/14/page95/</id>
    <published>2017-01-14T14:25:14.000Z</published>
    <updated>2017-01-15T14:16:53.007Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python中的class，list，dict等等数据结构，&lt;br&gt;来实现二分法求解排序各种对象。&lt;br&gt;&lt;br&gt;完成本次程序设计需要理解二分法的实现，class的初始化等等。&lt;br&gt;&lt;br&gt;&lt;br&gt;步骤：&lt;br&gt;1、首先需要实现各种动物的class，比如fish，dog等等。&lt;br&gt;实现构造函数，重载&lt;strong&gt;str&lt;/strong&gt;等等。&lt;br&gt;2、需要实现二分法搜索函数&lt;br&gt;3、需要实现主函数来运行整个程序&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Prof Jeff Johnson   CS 110&lt;br&gt;Project 4: Pet Finder (100 points)&lt;br&gt;Objectives&lt;br&gt;• Learn to use classes in Python&lt;br&gt;• Familiarize yourself with Binary Search&lt;br&gt;• Learn about sorting algorithms&lt;br&gt;Introduction&lt;br&gt;In this project, you will write a python program that reads a file containing data about&lt;br&gt;several pets. The data will be read into separate objects depending on the type of pet. For&lt;br&gt;example, data about a dog will be stored in a dog object. All of the objects will be added to&lt;br&gt;one list and searching and sorting operations will be performed on that list. The steps:&lt;br&gt;• Define a Dog class with the attributes: name, birthdate (store as string), breed, color.&lt;br&gt;• Define a Cat class with the attributes: name, birthdate (store as string), breed, color.&lt;br&gt;• Define a Fish class with the attributes: name, birthdate (store as string), type, color.&lt;br&gt;• Define a Bird class with the attributes: name, birthdate (store as string), type, color.&lt;br&gt;• Each class must have &lt;strong&gt;init&lt;/strong&gt;(), accessors/mutators, and &lt;strong&gt;str&lt;/strong&gt;() methods.&lt;br&gt;• Write a python program petfinder.py that imports the four classes defined above.&lt;br&gt;• Read the pets.csv file into your program. Each line contains information about a single&lt;br&gt;pet with its individual attributes separated by commas. Here is a sample data file, in&lt;br&gt;CSV (comma separated values) format. You can create your own pets.csv file.&lt;br&gt;Fish, Nemo, April 2nd, GoldFish, Orange,&lt;br&gt;Cat, Shadow, July 3rd, American Bobtail, White,&lt;br&gt;Dog, Dug, August 1st, Golden Retriever, Brown,&lt;br&gt;Bird, Nigel, January 15th, Pelican, Brown,&lt;br&gt;• For every line in the data file, read in all fields for a single pet and create a new object&lt;br&gt;for that pet depending on its type (the first string in each line).&lt;br&gt;• Create a list containing the objects and add every new object to the list as it is created.&lt;br&gt;• When the list of pet objects has been created, its size should equal the number of pets in&lt;br&gt;the data file. Hint: Use this to check if your code is working so far, before continuing.&lt;br&gt;• Display the following menu to users:&lt;br&gt;1. Show pet names: displays only the names of all the pets&lt;br&gt;2. Show pets of a certain type: Asks users what kind of pet (dog/cat/fish/bird). Show&lt;br&gt;only pets that match the user input.&lt;br&gt;3. Search for pet. Call your own binary search function to search for the first pet&lt;br&gt;name that matches the user-entered string. If a pet is found in the list, then print all&lt;br&gt;the details for that pet and the index in the list where it was found. If the pet is not in&lt;br&gt;the list, then print a message informing the user that the pet is not in the list.&lt;br&gt;Prof Jeff Johnson   CS 110&lt;br&gt;4. Sort list based on pet name: After sorting the list, display the sorted list. (For this&lt;br&gt;and the next sort option you can use either selection sort or insertion sort.)&lt;br&gt;5. Sort list based on pet color: After sorting the list, display the sorted list.&lt;br&gt;6. Exit the program.&lt;br&gt;Make sure to include input validation wherever you get input from the user and include&lt;br&gt;lots of comments in your code so others can understand it.&lt;br&gt;Submitting the project&lt;br&gt;Using CyberDuck or your favorite file transfer program, create a directory for project4 in&lt;br&gt;your submit directory. Please submit the following:&lt;br&gt;• README: text file explaining the parts of your program and how it works&lt;br&gt;• petfinder.py: the main program&lt;br&gt;• dog.py, cat.py, fish.py, bird.py: the class definitions&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python中的class，list，dict等等数据结构，&lt;br&gt;来实现二分法求解排序各种对象。&lt;br&gt;&lt;br&gt;完成本次
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Extra Credit Homework Implementing Sudoku</title>
    <link href="http://yoursite.com/2017/01/13/page94/"/>
    <id>http://yoursite.com/2017/01/13/page94/</id>
    <published>2017-01-13T06:52:11.000Z</published>
    <updated>2017-01-15T14:13:49.434Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python实现数独的答案求解。&lt;br&gt;完成本次程序设计，需要灵活使用file，字典，list，Z3库等等知识。&lt;br&gt;&lt;br&gt;&lt;br&gt;步骤：&lt;br&gt;1、导入Z3库，Z3库的详细资料需要自己上网获得&lt;br&gt;2、稍微简单点的是，文档中给了一些api的示例，但是更深入的需要自己去读源码&lt;br&gt;3、根据交集，并集，bool型，等等来填写方框数据，并求解。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Extra Credit Homework: Implementing Sudoku&lt;br&gt;and KenKen Solvers Using Z3&lt;br&gt;October 11, 2016&lt;br&gt;1 Problem&lt;br&gt;You will be implementing a Sudoku solver which can solve a 2x2, 3x3 and 4x4&lt;br&gt;puzzle (really an NxN puzzle for N≥2). Using techniques similar to solving&lt;br&gt;Sudoku you will also implement a solver for the KenKen puzzle. Both imple-&lt;br&gt;mentations will use the Z3 solver to actually solve the problem and Python will&lt;br&gt;be used to interact with Z3.&lt;br&gt;2 Introduction to Z3&lt;br&gt;Z3 is an SMT solver which means it is able to determine whether a logical&lt;br&gt;statement is true or false (within certain limitations).&lt;br&gt;Here are some examples of using Z3 from within Python:&lt;br&gt;Proving DeMorgan’s Law:&lt;br&gt;1 from z3 import ∗&lt;br&gt;2 s = Solver () # Z3 solver instance&lt;br&gt;3 a = Bool ( ’a ’ ) # Z3 boolean variable a&lt;br&gt;4 b = Bool ( ’b ’ ) # Z3 boolean variable b&lt;br&gt;5 a or b = Or(a ,b) # a or b means a or b is true&lt;br&gt;6 nna and nb = Not(And(Not(a) , Not(b) ) )&lt;br&gt;7 # nna and nb means not ( not (a) and not (b) )&lt;br&gt;8 # is true&lt;br&gt;9 s . add( a or b != nna and nb ) # Here we are asserting to Z3&lt;br&gt;10 # (a or b) is not equivalent to&lt;br&gt;11 # ˜(˜a and ˜b)&lt;br&gt;12 s . check () # Here we ask Z3 i f our statement is&lt;br&gt;13 # s a t i s f i a b l e or unsatisfiable&lt;br&gt;When running this in python interactive mode, Z3 reports unsat which means&lt;br&gt;that our assertion that&lt;br&gt;(a ∨ b) 6= ¬(¬a ∧ ¬b)&lt;br&gt;is false. This means that it’s negation (DeMorgan’s Law) is true.&lt;br&gt;1&lt;br&gt;Finding Pythagorean triples, e.g., integers x,y,z such that x 2 + y 2 = z 2 :&lt;br&gt;1 from z3 import ∗&lt;br&gt;2 s = Solver () # Z3 solver instance&lt;br&gt;3 x = Int ( ’x ’ ) # Z3 Integer variable x&lt;br&gt;4 y = Int ( ’y ’ ) # Z3 Integer variable y&lt;br&gt;5 z = Int ( ’z ’ ) # Z3 Integer variable z&lt;br&gt;6 s . add(And(x &amp;gt; 0 , y &amp;gt; 0 , z &amp;gt; 0) ) # Assert x , y and z are all&lt;br&gt;7 # positive&lt;br&gt;8 s . add(x∗x + y∗y == z∗z) # Assert xˆ2 + yˆ2 = zˆ2&lt;br&gt;9 s . check () # Query Z3 to see i f it can find an answer&lt;br&gt;10 s . model () # Get the satisfying assignment for x , y and z&lt;br&gt;11 s . add(x != 12) # Disallow the solution where x = 12&lt;br&gt;12 s . check () # Check i f Z3 can s t i l l find an answer&lt;br&gt;13 s . model () # Get the satisfying assignment&lt;br&gt;In this example, Int() creates an integer variable in Z3. 1 On line 6 a constraint&lt;br&gt;was added to the solver, e.g., we constrained the values of x,y and z to be&lt;br&gt;positive. On line 8 an additional constraint is added which states that we are&lt;br&gt;interested only in integers that solve the equation x 2 + y 2 = z 2 . On line 9 we&lt;br&gt;ask Z3 if the added constraints can be solved, which in this case is true. On&lt;br&gt;line 10 we ask Z3 for the assignment and get: x = 12, y = 9 and z = 15 (your&lt;br&gt;answer may vary). On line 11 we assert that x cannot be equal to 12 (this makes&lt;br&gt;Z3’s previous answer illegal). On lines 12 and 13 we check for satisfiability and&lt;br&gt;retrieve the solution which in this case is: x = 8, y = 6 and z = 10.&lt;br&gt;3 Introducing Python&lt;br&gt;A good tutorial to learn Python (this is the free version, you can’t watch videos&lt;br&gt;and might get pop ups):&lt;br&gt;&lt;a href=&quot;http://learnpythonthehardway.org/book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://learnpythonthehardway.org/book/&lt;/a&gt;&lt;br&gt;Read this to learn how to do list comprehensions in Python:&lt;br&gt;&lt;a href=&quot;http://www.secnetix.de/olli/Python/list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.secnetix.de/olli/Python/list&lt;/a&gt; comprehensions.hawk&lt;br&gt;More examples of using Python with Z3:&lt;br&gt;&lt;a href=&quot;http://cpl0.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cpl0.net/&lt;/a&gt; argp/papers/z3py-guide.pdf&lt;br&gt;Documentation of the Z3 Python API:&lt;br&gt;&lt;a href=&quot;http://research.microsoft.com/en-us/um/redmond/projects/z3/namespacez3py.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://research.microsoft.com/en-us/um/redmond/projects/z3/namespacez3py.html&lt;/a&gt;&lt;br&gt;1 There is an important distinction between Int variables in Z3 and int variables in other&lt;br&gt;programming languages: In Z3, this declaration is akin to saying that, x for instance, x is&lt;br&gt;an element of the integers in a mathematical sense. In other programming languages, an int&lt;br&gt;simply allocates some amount of space which represents a value in a finite range of integers.&lt;br&gt;2&lt;br&gt;4 Useful Python and Z3 Commands&lt;br&gt;Solver() - Creates a solver for Z3.&lt;br&gt;s.add(constraint) - Adds a constraint to a Solver s.&lt;br&gt;s.check() - Returns sat if the current constraints are satisfiable, and unsat if&lt;br&gt;the constraints are unsatisfiable.&lt;br&gt;s.model() - Gets the satisfying instance from the solver. Note: this function&lt;br&gt;should only be called if s.check() returned sat.&lt;br&gt;Int(“name”) - Declares an integer variable in Z3.&lt;br&gt;The following functions can take either multiple arguments, e.g., Or(a, b, c)&lt;br&gt;or a list Or(my list).&lt;br&gt;And() - Asserts that all arguments given are true.&lt;br&gt;Or() - Asserts at least one argument given is true.&lt;br&gt;Distinct() - Asserts that all given variables are distinct.&lt;br&gt;Sum() - Creates a variable which is equal to the sum of the arguments.&lt;br&gt;Product() - Creates a variable equal to the product of the arguments.&lt;br&gt;Z3 also interacts with Python’s comparison and arithmetic operators:&lt;br&gt;1 from z3 import ∗&lt;br&gt;2 s = Solver ()&lt;br&gt;3 x = Int ( ’x ’ )&lt;br&gt;4 y = Int ( ’y ’ )&lt;br&gt;5 z = Int ( ’z ’ )&lt;br&gt;6 a = Int ( ’a ’ )&lt;br&gt;7 s . add(x != y) # Z3 variables x and y are asserted to be different&lt;br&gt;8 s . add(x == 3) # Z3 variable x is now equal to 3. This is different&lt;br&gt;9 # from assignment&lt;br&gt;10 s . add(z &amp;gt;= y) # Z3 variable z is asserted to be greater than or&lt;br&gt;11 # equal to y&lt;br&gt;12 s . add(y &amp;gt; 7) # y is asserted to be greater than 7&lt;br&gt;13 s . add(a == x + y) # a is now equal to x + y&lt;br&gt;14 s . add(x∗y &amp;gt; 7)# The product of x and y is greater than 7&lt;br&gt;3&lt;br&gt;5 Sudoku Solver&lt;br&gt;The rules for Sudoku may be found here:&lt;br&gt;Sudoku - Wikipedia&lt;br&gt;For dimension 2, there will be 4 2x2 sub-grids, all squares will contain numbers&lt;br&gt;from 1 to 4 and the row/column/grid uniqueness rule remains.&lt;br&gt;For dimension 4, there will be 16 4x4 subgrids, all squares will contain numbers&lt;br&gt;from 1 to 16 and the row/column/grid uniqueness rule remains.&lt;br&gt;Part A: Modify sudoku base.py to accept puzzles which have dimensions other&lt;br&gt;than 3. You should not modify the input processing code and you should define&lt;br&gt;the limits in loops and constraints in terms of of the variable n. The variable n&lt;br&gt;is the length of the sub-grids in the puzzle. This is an easy exercise meant to&lt;br&gt;encourage you to study the implementation.&lt;br&gt;Part B: In the final if statement, after printing the solution add constraints&lt;br&gt;which assert that the solution is not valid. What this means is that there is a&lt;br&gt;solution where at least one of the blank squares in the puzzle can have a value&lt;br&gt;different from the same square in the solution. After adding this constraint,&lt;br&gt;you should check if there is a solution and print ”Solution is unique” if s.check()&lt;br&gt;does not return sat and print ”Solution is not unique” otherwise.&lt;br&gt;6 KenKen Solver&lt;br&gt;Please read KenKen - Wikipedia for an description of the KenKen puzzle.&lt;br&gt;It is recommended to start with your sudoku solution as a base because it will&lt;br&gt;able to accept different dimensions. Remove the section that adds the sub-grid&lt;br&gt;constraints. Also remove the code which detects non-unique solutions – this is&lt;br&gt;not required for this exercise.&lt;br&gt;The puzzle list contains lists representing the cages in the puzzle. puzzle[i][0]&lt;br&gt;holds the goal for the operation, puzzle[i][1] contains the operation to be used&lt;br&gt;for the cage. The operations will be ’+’, ’-’, ’&lt;em&gt;’, ’/’ and ’g’ which denote addi-&lt;br&gt;tion, subtraction, multiplication, division and given respectively. Here ”given”&lt;br&gt;means that the goal is the value of the indicated square. For cages using divi-&lt;br&gt;sion or subtraction, you may assume that the cage has two squares in it. Since&lt;br&gt;these operations are not commutative you will have to assert for squares a and&lt;br&gt;b a/b == goal or b/a == goal is true.&lt;br&gt;Finally, for a cage list cage cage[2&lt;/em&gt;i] holds the row of the grid and cage[2*i+1]&lt;br&gt;holds the column of the grid where i is in the interval [1, len(cage)). These two&lt;br&gt;values indicate the coordinate of a square in the grid.&lt;br&gt;An example of a cage:&lt;br&gt;cage = [11, ’+’, 0, 0, 1, 0, 1, 1]&lt;br&gt;This means that the goal is 11, the operation is addition and the cage is on the&lt;br&gt;squares (0,0), (1,0) and (1,1).&lt;br&gt;4&lt;br&gt;Your solution should replace the code to enter the Sudoku puzzle in order&lt;br&gt;to encode these constraints into Z3.&lt;br&gt;7 Grading&lt;br&gt;For both parts you will not be graded on detecting invalid input (you should&lt;br&gt;not change the input or output code), nor the performance of your solution&lt;br&gt;(solutions which take more than 2 minutes on large tests will not be accepted).&lt;br&gt;It is recommended you test your solutions using the provided test files, e.g.,&lt;br&gt;sudoku testn.txt and kenken testn.txt. The reference results are in README.txt.&lt;br&gt;If you pass the provided tests, it is highly likely that you will receive full credit&lt;br&gt;on the assignment.&lt;br&gt;8 Set Up and Technical Issues&lt;br&gt;If you are using Windows:&lt;br&gt;Choose one of the MSI packages for Windows from&lt;br&gt;&lt;a href=&quot;https://www.python.org/downloads/release/python-278/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.python.org/downloads/release/python-278/&lt;/a&gt;&lt;br&gt;Use 64-bit if you are able.&lt;br&gt;Follow the instructions to install Z3py (precompiled) at:&lt;br&gt;&lt;a href=&quot;http://z3.codeplex.com/wikipage?title=Z3Py%20on%20Windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://z3.codeplex.com/wikipage?title=Z3Py%20on%20Windows&lt;/a&gt;&lt;br&gt;Make sure you set your path. Search for how to do this.&lt;br&gt;On Linux:&lt;br&gt;Download the Z3 source from&lt;br&gt;&lt;a href=&quot;http://download-codeplex.sec.s-msft.com/Download/SourceControlFileDownload.ashx?&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://download-codeplex.sec.s-msft.com/Download/SourceControlFileDownload.ashx?&lt;/a&gt;&lt;br&gt;ProjectName=z3&amp;amp;changeSetId=89c1785b73225a1b363c0e485f854613121b70a7&lt;br&gt;Follow the instructions at:&lt;br&gt;&lt;a href=&quot;http://z3.codeplex.com/SourceControl/latest#README&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://z3.codeplex.com/SourceControl/latest#README&lt;/a&gt;&lt;br&gt;Everything should work after this. You may need to install additional software.&lt;br&gt;Your terminal will likely give you commands to install the software.&lt;br&gt;On Mac OS X the easiest way is to install brew:&lt;br&gt;&lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://brew.sh/&lt;/a&gt;&lt;br&gt;And issuing&lt;br&gt;brew tap homebrew/science&lt;br&gt;brew install z3&lt;br&gt;This should install everything you need including Z3. You will need to set your&lt;br&gt;PYTHONPATH variable: in a terminal type&lt;br&gt;export PYTHONPATH=”/usr/local/Cellar/z3/4.3.1/lib/python2.7/site-packages:${PYTHONPATH}”&lt;br&gt;You can also append this to your .bash profile or .bashrc file to have this setting&lt;br&gt;applied when you log in.&lt;br&gt;Note: Z3 currently works only with the Python 2.x series.&lt;br&gt;5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python实现数独的答案求解。&lt;br&gt;完成本次程序设计，需要灵活使用file，字典，list，Z3库等等知识。&lt;br&gt;&lt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 CS1210 Computer Science I Foundations</title>
    <link href="http://yoursite.com/2017/01/12/page93/"/>
    <id>http://yoursite.com/2017/01/12/page93/</id>
    <published>2017-01-12T10:12:11.000Z</published>
    <updated>2017-01-15T14:08:50.287Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python实现数据读取，数据分析，以及数据分析后的展示。&lt;br&gt;完成本次程序设计，需要灵活使用file，字典，list，csv读取，matplotlib等等知识。&lt;br&gt;&lt;br&gt;&lt;br&gt;步骤：&lt;br&gt;1、导入csv&lt;br&gt;2、解析数据，寻找合适的数据结构来存储CountryCODE等信息&lt;br&gt;3、利用matplt库来画直方图&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS1210 Computer Science I: Foundations&lt;br&gt;Project 1: Educational Data&lt;br&gt;Part 1 due Friday, November 18 at 11:59PM&lt;br&gt;Important&lt;br&gt;CSI projects represent individual work; there are no partnerships. Everyone is responsible for their own&lt;br&gt;work. Under no circumstances should you turn in the work of someone else (including any code or&lt;br&gt;material you may find on the Internet) as your own, nor should you share your own work with others.&lt;br&gt;You may discuss general concepts with your classmates as long as these discussions do not lead to the&lt;br&gt;actual exchange of code fragments or written solutions.&lt;br&gt;You hav e several sources for help. Your first recourse should always be to post your question on the ICON&lt;br&gt;discussion board. This is the fastest place to go for clarifications or disambiguation, or for help with&lt;br&gt;Python in general (remember, don’t post your solution or any part of your solution). Second, if you must&lt;br&gt;share a portion of your code, you can always attend a TA help session (see the announcement on ICON&lt;br&gt;entitled General TA Office Hours start Thursday, September 1 for times and locations). You may also&lt;br&gt;attend my office hours Tuesdays from 1:30 to 3:30 in my office (14 MLH). Finally, you may email your&lt;br&gt;code with a specific question to me or to your TA, but please be sure that you include CS1210 on the&lt;br&gt;subject line (also, this is the slowest way of getting help, due to the volume of mail we are likely to&lt;br&gt;receive).&lt;br&gt;Introduction&lt;br&gt;For this two-part project you will be working with a medium-size dataset (about 800K records) of&lt;br&gt;education statistical indicators obtained from the World Bank. The dataset consists of two file:&lt;br&gt;f308b71c-00be-4519-9b0c-0d3100b75092_Data.csv&lt;br&gt;f308b71c-00be-4519-9b0c-0d3100b75092_Definition and Source.csv&lt;br&gt;both in csv or comma-separated value format. The first file contains the data, with each record having five&lt;br&gt;fields, described in the first line of this file as:&lt;br&gt;Co u n t ry,Co u n t ry Cod e , Se r i es Cod e , 2015 [YR 2015 ]&lt;br&gt;The next 762,000 lines contain records of this form, while the last five lines look like:&lt;br&gt;, , , ,&lt;br&gt;, , , ,&lt;br&gt;, , , ,&lt;br&gt;Da t a f rom da t aba s e : Edu ca t i on St a t i s t i cs - Al l Ind i ca t or s , , , ,&lt;br&gt;La s t Upd a t ed : 10 / 04 / 2016 , , , ,&lt;br&gt;and can safely be ignored (these lines are either blank — hence the rows of commas — or contain data&lt;br&gt;provenance information).&lt;br&gt;The second file contains information about the data contained in the first file. Each line is a record&lt;br&gt;consisting of four fields, described in the first line of this file as:&lt;br&gt;Co de , Ind i ca t or Name ,Lo n g defin i t i on , So ur ce&lt;br&gt;Each of these lines can be quite long, especially (and not surprisingly) the field called ‘‘Long definition.’’&lt;br&gt;Using the elipsis (‘‘…’’) to shorten the line, a sample field (the 10th line of the file to be precise) looks&lt;br&gt;like:&lt;br&gt;UI S .NERA. 3 , “Ad j us t ed . . . “ , “To t a l . . . “ ,UN ESCO Ins t i t u t e for St a t i s t i cs&lt;br&gt;1 Revised November 14, 2016&lt;br&gt;Aside from the textual descriptions, the most interesting field here is the first, which by design contains&lt;br&gt;interesting information about the type of data represented, and which is also appears as the third field in&lt;br&gt;the data file. The key idea is that records in the data file that share the same ‘‘Series Code’’ (or simply&lt;br&gt;‘‘Code’’ as its called in the definitions file file) are by definition directly comparable. So, for example, if I&lt;br&gt;am interested in the adjusted net enrollment rate for females in primary school (SE.PRM.TENR.FE)&lt;br&gt;across different countries or populations, I could compare all the records from the data file with this&lt;br&gt;‘‘Series Code’’ (there are 254 of these).&lt;br&gt;Reading Data&lt;br&gt;Your first task is to read these data into Python and construct an appropriate representation of these&lt;br&gt;records. You will write two functions to achieve this end.&lt;br&gt;First, write a function&lt;br&gt;de f r eadDe fin i t i ons (fil ename ) :&lt;br&gt;which opens file filename of the second type described above, that is:&lt;br&gt;Co de , Ind i ca t or Name ,Lo n g defin i t i on , So ur ce&lt;br&gt;and returns a dictionary D with entries of the form:&lt;br&gt;Co de : [ Ind i ca t or Name , Long defin i t i on , Sou r ce ]&lt;br&gt;Reading csv files can be tricky, because it is quite possible that some fields may contain explicit commas&lt;br&gt;embedded in a single field (see, e.g., the ‘‘Long definition’’ field). In such cases, these extraneous commas&lt;br&gt;are protected by enclosing the field in quotes. For example, consider the following line taken from a&lt;br&gt;hypothetical csv file representing Olympic gold medalists:&lt;br&gt;Fe n c i ng , “Ga roz zo , Dan i e l e” , ITA , 2016&lt;br&gt;Here, the correct interpretation is a single record (or line) containing four fields (and not five) because the&lt;br&gt;comma in the gold medalist’s name is not semantically equivalent to the other three commas in the line.&lt;br&gt;Fortunately, because this is such a common issue, Python provides a library for reading csv files while&lt;br&gt;honoring the semantics of commas embedded in quoted fields. To use the library, you must first:&lt;br&gt;impo r t csv&lt;br&gt;You will need to read up on how to use the csv library: more information can be found here:&lt;br&gt;h t t ps : / / do cs . py t hon . org / 3 . 5 / l i br a ry / csv . h tml&lt;br&gt;Important: do not attempt to split() the line, as I can guarantee this will fail. To be successful, you will&lt;br&gt;need to use the csv library. Also, be wary of the first line in the csv file, which is a ‘‘header’’ and should&lt;br&gt;not be included in the dictionary as data.&lt;br&gt;The second function you should write:&lt;br&gt;de f r eadDa t a (fi l ename ) :&lt;br&gt;should open a file filename of the first type above, that is:&lt;br&gt;Co u n t ry,Co u n t ry Cod e , Se r i es Cod e , 2015 [YR 2015 ]&lt;br&gt;and return a tuple of two dictionaries, C and V. The first dictionary, C, should have entries of the form:&lt;br&gt;Co u n t ry Cod e : Coun t ry&lt;br&gt;and therefore should look like, e.g.,&lt;br&gt;2 Revised November 14, 2016&lt;br&gt;{ ’US A’ : ’Un i t ed St a t es ’ , ’ ITA ’ : ’ I t a l y’ , ’PRT ’ : ’Po r t uga l ’ , . . . }&lt;br&gt;while the second dictionary, V, in the tuple should have entries of the form:&lt;br&gt;Se r i es Cod e : { Co u n t ry Cod e : 2015 [YR 2015 ] , . . . }&lt;br&gt;and thus look like, e.g.,&lt;br&gt;{ ’UI S .LR.AG15T9 9 .GPI ’ : { ’ARE ’ : ’1 . 02945005893707 ’ , . . . } , . . . }&lt;br&gt;Again, be wary of the fact that the first line in this csv file is also a ‘‘header’’ and should not be include in&lt;br&gt;the dictionary as data, but nor should the last five lines of this file, which represent summary information&lt;br&gt;and not real data.&lt;br&gt;In constructing the readData() function, it is important not to include entries where the corresponding&lt;br&gt;value is missing (missing values in this data file are indicated by a string, ’..’); there will be many fewer&lt;br&gt;values than the 762000 rows in the data file might imply. To get to the heart of the matter, you will write&lt;br&gt;a third function:&lt;br&gt;de f ma keP rofi l es (C, V) :&lt;br&gt;which will return a dictionary, P, indexed by country code with values consisting of the number of&lt;br&gt;datapoints present in V for that particular country. Thus part of P produced by your first implementation&lt;br&gt;of makeProfiles() might look like:&lt;br&gt;{ ’MA R’ : 307 , ’ IBT ’ : 0 , ’WS M’ : 293 , ’URY ’ : 269 , . . . }&lt;br&gt;Indicating that there is no data about ’IBT’ present in this dataset. You will note that ’IBT’ is defined in&lt;br&gt;C as ’IDA &amp;amp; IBRD total’ rather than some country name; IDA and IBRD stand for International&lt;br&gt;Development Association and International Bank for Reconstruction and Development, respectively, two&lt;br&gt;branches of the World Bank from which these data were obtained. Given that no data is provided, your&lt;br&gt;complete version of makeProfiles() should alter C to remove the entry for IBT and any other similar code&lt;br&gt;that has no data associated with it. Thus the value of P produced by your final version of makeProfiles()&lt;br&gt;might look like:&lt;br&gt;{ ’SMR’ : 14 , ’UMC ’ : 28 , ’ARG ’ : 263 , . . . }&lt;br&gt;should not contain any entries with 0 values, and should also modify C to remove those entries. If your&lt;br&gt;code is like mine, final versions of both P and C should contain 241 entries.&lt;br&gt;Finally, you will implement a plotting function:&lt;br&gt;de f p l o tPr ofil e (P) :&lt;br&gt;that will reproduce the figure shown here below.&lt;br&gt;Note how all of the country codes are arranged alphabetically along the x axis, with the y values&lt;br&gt;corresponding to the number of datapoints for that particular country code. You will need to study the&lt;br&gt;matplotlib pyplot documentation:&lt;br&gt;3 Revised November 14, 2016&lt;br&gt;h t t p : / /ma t p l o t l i b. org / ap i / pyp l o t _ap i . h tml&lt;br&gt;to learn how to make your code work.&lt;br&gt;Once this code is complete, we’ll turn our attention to a more interesting analysis of the data.&lt;br&gt;4 Revised November 14, 2016&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python实现数据读取，数据分析，以及数据分析后的展示。&lt;br&gt;完成本次程序设计，需要灵活使用file，字典，list，
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Assignment 2 Files, Dictionaries and Objects</title>
    <link href="http://yoursite.com/2017/01/11/page92/"/>
    <id>http://yoursite.com/2017/01/11/page92/</id>
    <published>2017-01-11T05:34:12.000Z</published>
    <updated>2017-01-15T14:06:28.234Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;高级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python实现数据库，以及数据库操作。&lt;br&gt;完成本次程序设计，需要灵活使用class，file，字典，对象，等等知识。&lt;br&gt;不仅如此，还需要对数据库有一定的了解。&lt;br&gt;&lt;br&gt;&lt;br&gt;步骤：&lt;br&gt;1、实现Table和database对象。用来存储数据。&lt;br&gt;2、实现文件操作，读取数据，存入对应的对象中。&lt;br&gt;3、实现查询，合并，输入接口。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;1/9&lt;br&gt;Assignment 2: Files, Dictionaries and Objects&lt;br&gt;Due: Electronically, by 11:55 PM on December 1, 2016&lt;br&gt;Introduction&lt;br&gt;We’ve covered many important Python concepts by this point, including lists, files, dictionaries and (basic)&lt;br&gt;OOP. In this assignment, we apply most of these concepts to write a program that can combine and transform&lt;br&gt;tables of data in order to answer questions about that data. The program you will write is called SQuEaL. It&lt;br&gt;stands for Simplified Query Engine and Language, but more importantly it’s the noise that Dan Zingaro (at&lt;br&gt;UTM) made when he came up with what he thinks is a super-cool idea for this assignment. We’ll see!&lt;br&gt;Querying Data&lt;br&gt;The quantity and variety of data generated today requires that we have ways to organize that data and extract&lt;br&gt;pieces of data that are currently of interest. For example, you might have thousands of emails in your inbox&lt;br&gt;right now, but you have ways of searching and filtering that data to find messages from certain people, with&lt;br&gt;specific keywords, or sent on specific dates.&lt;br&gt;Nowhere is the importance of data more evident in our daily lives than when we interact with online retailers.&lt;br&gt;Consider the typical interaction with a website like Amazon. Perhaps you’re looking for a new CS book to&lt;br&gt;read over the holidays. You might search for Computer Science in the search box. Among the millions of&lt;br&gt;products available, Amazon returns only those products of relevance in the search results.&lt;br&gt;When you purchase a book, you are required to create a customer account. Amazon stores your account&lt;br&gt;information along with this order and all orders you make in the future. Later, you can check on your order&lt;br&gt;history to see exactly what you’ve purchased. Of course, millions of other customers have purchased stuff&lt;br&gt;too, so Amazon has to maintain all of this data and make sure that you see only your data and another person&lt;br&gt;sees only theirs. Amazon will also want to use this data for internal purposes to see how much they’ve sold,&lt;br&gt;what products are most popular, what kinds of ads to serve to you, etc. Data is used to answer a wide variety&lt;br&gt;of questions such as these:&lt;br&gt;What are the Computer Science books available right now?&lt;br&gt;Does the current user have a customer account?&lt;br&gt;What is the order history for the current customer?&lt;br&gt;How many products did Amazon sell this year?&lt;br&gt;What are the top ten most popular books this year?&lt;br&gt;Websites like Amazon use databases to store these vast amounts of data. They then make queries on that data&lt;br&gt;in order to retrieve data for a variety of purposes. One sample query might be: “give me all of the Computer&lt;br&gt;Science books”; another might be: “give me this customer’s order history, from oldest order to most recent&lt;br&gt;order”. There are languages used to make such queries on databases. The most popular of these languages is&lt;br&gt;SQL (Structured Query Language), and if you take CSCC43 you’ll learn a lot more SQL.&lt;br&gt;In this assignment, you’ll write a program that understands a SQL-like language for making queries of data.&lt;br&gt;Don’t worry: we won’t mention SQL again in this handout, and we expect no outside knowledge of databases&lt;br&gt;or SQL (OOPS!) or Amazon or anything like that. Everything is in this handout. Warning: if you know&lt;br&gt;some SQL, you should be extra careful to do what we are asking and not make assumptions based on&lt;br&gt;what you might have learned elsewhere.&lt;br&gt;Tables and Databases&lt;br&gt;11/21/2016&lt;br&gt;2/9&lt;br&gt;The first two important terms for us are table and database. From now on, when we use these terms, they&lt;br&gt;mean what is described in this section.&lt;br&gt;Below is a sample table that we will call  movies . It contains information on movies; try to understand what&lt;br&gt;the table is showing before continuing to the text below.&lt;br&gt;movies&lt;br&gt;m.year m.title m.studio m.gross&lt;br&gt;1997 Titanic Par. 2186.8&lt;br&gt;2003 The Lord of the Rings: The Return of the King NL 1119.9&lt;br&gt;2010 Toy Story 3 BV 1063.2&lt;br&gt;The table starts with a header giving the names of each column. The column names are  m.year ,  m.title&lt;br&gt;m.studio , and  m.gross . (Ignore the  m. prefix for now; you’ll see why it’s there soon.) Note that the header&lt;br&gt;isn’t one of the data rows. The data rows are the rows below the header. The table has four columns, and each&lt;br&gt;row gives a value in each column. For example, we see that the first movie is Titanic, the year it was made&lt;br&gt;was 1997, the studio that produced it was Par. (short for Paramount), and the gross revenue (amount the&lt;br&gt;movies made) for the movie was 2186.8. (Yes, that’s given in millions of dollars… anyone who hasn’t&lt;br&gt;dropped CS to enroll in film school, please continue reading.)&lt;br&gt;So that’s a table: a grid where each column has a column name and each row gives a value for each column.&lt;br&gt;Each row corresponds to a single thing/object/entity; in this example, each row corresponds to a movie.&lt;br&gt;A database is a collection of one or more tables. A database might consist of only one table, such as  movies .&lt;br&gt;But we can expand our database to include more tables. For example, we can add a second table,  oscars , so&lt;br&gt;that we have two tables in our database:&lt;br&gt;oscars&lt;br&gt;o.year o.category o.title&lt;br&gt;2010 Animated Feature Film Toy Story 3&lt;br&gt;2003 Directing The Lord of the Rings: The Return of the King&lt;br&gt;1997 Directing Titanic&lt;br&gt;1997 Best Picture Titanic&lt;br&gt;This table gives names of movies that won Academy Awards (also knows as “The Oscars”, the year they&lt;br&gt;won, and the category in which they won. Notice that the names are the same ones as in the  movies table&lt;br&gt;above. This is no coincidence. Stay tuned.&lt;br&gt;The two tables  movies and  oscars is another example of a database; this database has two tables.&lt;br&gt;SQuEaL: Operations on Tables&lt;br&gt;In this section, you’ll learn the operations that can be performed on tables and how these operations are&lt;br&gt;written in SQuEaL. Throughout, keep one thing in mind: each operation on a table creates a new table.&lt;br&gt;Selecting Columns&lt;br&gt;One thing we can do on a table is select some or all of its columns. For example, consider the  movies table&lt;br&gt;(the first table given in this handout). We might be interested in only the names of the movies, so we might&lt;br&gt;want a table with only the  m.title column. We could express this in SQuEaL as:&lt;br&gt;select m.title from movies&lt;br&gt;and this would give us a table with just one column:&lt;br&gt;one column from movies&lt;br&gt;11/21/2016&lt;br&gt;3/9&lt;br&gt;m.title&lt;br&gt;Titanic&lt;br&gt;The Lord of the Rings: The Return of the King&lt;br&gt;Toy Story 3&lt;br&gt;Or maybe you want only the movie names and year (and not the studio or gross revenue). You’d express this&lt;br&gt;as:&lt;br&gt;select m.title,m.year from movies&lt;br&gt;and you’d get a table with two columns,  m.title and  m.year :&lt;br&gt;two columns from movies&lt;br&gt;m.year m.title&lt;br&gt;1997 Titanic&lt;br&gt;2003 The Lord of the Rings: The Return of the King&lt;br&gt;2010 Toy Story 3&lt;br&gt;You may have noticed that the columns in this table are in the “wrong” order. However, that doesn’t matter.&lt;br&gt;The order of the columns does not change the data in the table. You will see in the next section that we will&lt;br&gt;use dictionaries to store columns, so the order of columns is not preserved. This is expected behaviour.&lt;br&gt;Moving on: there are two ways to get all of the columns. You could list them all separated by commas:&lt;br&gt;select m.title,m.studio,m.gross,m.year from movies&lt;br&gt;or you can use a shorthand; the  &lt;em&gt; means “all columns”:&lt;br&gt;select &lt;/em&gt; from movies&lt;br&gt;In both cases, you get a new table that contains exactly the same information as  movies .&lt;br&gt;Multiple Tables&lt;br&gt;Selecting columns from a table is nice, but it doesn’t let us use the full capacity of our data stored in the&lt;br&gt;database. Recall that a database can have multiple tables, and that these tables might be meaningfully related.&lt;br&gt;For example, our  movies table contains the name of the movie, but the  oscars table contains additional&lt;br&gt;information on awards that movie won (we’ll give you the data to make more related tables, such as ratings&lt;br&gt;and actors who starred in the various movies).&lt;br&gt;Look back at those two tables. It would be nice to be able to create a single table that joins those two tables&lt;br&gt;into one, like this:&lt;br&gt;movies join oscars&lt;br&gt;m.title m.studio m.gross o.category&lt;br&gt;Titanic Par. 2186.8 Directing&lt;br&gt;Titanic Par. 2186.8 Best Picture&lt;br&gt;The Lord of the Rings: The Return of the King NL 1119.9 Directing&lt;br&gt;Toy Story 3 BV 1063.2 Animated Feature Film&lt;br&gt;Notice that, for each row, we have some of the data from the  movies and some of the data from oscars&lt;br&gt;( o.category ).&lt;br&gt;You should be able to perform these joins by hand. The column on which we are joining the two tables is the&lt;br&gt;column that contains the common information. In this case, both tables have a  title column, so we join on&lt;br&gt;that. Consider the first row of  movies . The title of the film is Titanic, so we’re going to join with all rows of&lt;br&gt;the  oscars table where the  o.title is Titanic. In this case, there are two rows where  o.title is Titanic, the&lt;br&gt;11/21/2016&lt;br&gt;4/9&lt;br&gt;3rd and 4th (best picture and directing for 1997). Joining the first row from  movies and that third row from&lt;br&gt;oscars gives us the first row for our new table:&lt;br&gt;movies join oscars&lt;br&gt;m.title m.studio m.gross o.category&lt;br&gt;Titanic Par. 2186.8 Directing&lt;br&gt;The first row of  movies would also join with the 4th row of  oscars , to produce the 2nd row of our new table.&lt;br&gt;Likewise, the 2nd and 3rd rows of  movies would join with the 2nd and 1st rows of  oscars respectively, to&lt;br&gt;produce our final table.&lt;br&gt;Here is the SQuEaL syntax for performing the join described here:&lt;br&gt;select m.title,m.studio,m.gross,o.category from movies,oscars where m.title=o.title&lt;br&gt;You should notice two things. First, after  from , we now have the names of two tables. In addition, we have&lt;br&gt;added the keyword  where followed by a condition that must be true in order for a row to appear in the table.&lt;br&gt;m.title=o.title means that a row from the movie table can be joined to a row of the oscar table exactly&lt;br&gt;when the title columns are equal. (This is why we have the  m. and  o. prefixes. We can’t have two columns&lt;br&gt;with the same name or we wouldn’t have a way to refer uniquely to them!)&lt;br&gt;STOP! Make sure you understand this join stuff before continuing. Be sure you can work through questions&lt;br&gt;like the following, or you’ll have conceptual trouble later:&lt;br&gt;What if there were an oscar winner from the  oscar table that didn’t have a row in the  movies table?&lt;br&gt;Would that winner show up in the new table?&lt;br&gt;What if there were a movie in the  movies table that didn’t win any awards in the  oscars table? Would&lt;br&gt;that movie show up in the new table?&lt;br&gt;s&lt;br&gt;p&lt;br&gt;o&lt;br&gt;i&lt;br&gt;l&lt;br&gt;e&lt;br&gt;r&lt;br&gt;The answer to both questions is no. For example, in the second case, we’d be looking at a movie in the&lt;br&gt;movies table and trying to connect that row with a row in the  oscars table. But since that movie’s title isn’t in&lt;br&gt;oscars , we find no match, and hence can’t add a row to the join table. (believe it or not, making money&lt;br&gt;doesn’t mean that a movie is any good -insert your own Twilight/Michael Bay joke here-).&lt;br&gt;Your Tasks&lt;br&gt;Your task for this assignment is in three parts. In the first part, you will create objects and methods to allow&lt;br&gt;you to work with tables and dictionaries, then you will write functions to read a database (one or more&lt;br&gt;tables), finally you will write a program that accepts SQuEaL queries from the keyboard, runs them on a&lt;br&gt;database, and outputs the results.&lt;br&gt;Starter Code&lt;br&gt;Please download the Assignment 2 Starter Files and extract the zip archive. The archive contains starter&lt;br&gt;Python code files and some sample tables that constitute databases (see below).&lt;br&gt;Part 1: Building Table and Database Objects&lt;br&gt;First, you will write the code to complete the  Table and  Database classes in  database.py . You will have to&lt;br&gt;decide how to implement these classes, including what instance variables and methods they should have. The&lt;br&gt;two methods that we will insist upon both classes having is  get_dict , and  set_dict , whose DocStrings have&lt;br&gt;11/21/2016&lt;br&gt;5/9&lt;br&gt;already been provided, and deal with dictionary representation of tables. These methods will allow us to more&lt;br&gt;easily test your code. You should NOT be using these in your own code.&lt;br&gt;A table, is represented as a dictionary where each key is the name of a column and each value is the list of&lt;br&gt;items in that column from the top row to the bottom. For example, the movies dictionary would contain four&lt;br&gt;key/value pairs. Here is one of them: the key is  ‘m.year’ and the value is  [‘1997’,’2003’,’2010’] ,&lt;br&gt;another would have the key  ‘m.title’ mapped to the value  [‘Titanic’,’The Lord of the Rings: The&lt;br&gt;Return of the King’,’Toy Story 3’] .&lt;br&gt;A database can be represented as a dictionary where the keys are table names and the values are table objects.&lt;br&gt;Before you spend time building the methods for  Table and  Database , we suggest that you read the rest of the&lt;br&gt;handout so you better understand what you’ll have to do with these classes. Building sensible and well&lt;br&gt;thought-out methods will make your life much easier when completing the next part of the assignment.&lt;br&gt;Part 2: Reading Tables and Databases&lt;br&gt;Next, you will write some reading-related functions in  reading.py .&lt;br&gt;Write the following functions in  reading.py :&lt;br&gt;read_table: (str) -&amp;gt; Table&lt;br&gt;The parameter is the name of a table file (note: this time, it’s the name of the file, and not the file&lt;br&gt;handle). A table file is a comma-separated file such as  movies.csv . (Do not open  csv files in Excel or&lt;br&gt;some other spreadsheet program. They are text files. Open them in a text editor -OTHER THAN&lt;br&gt;NOTEPAD- to see them.) It is your task to understand the structure of this type of file in order to read&lt;br&gt;it properly. The function returns a Table object.&lt;br&gt;read_database: () -&amp;gt; Database&lt;br&gt;The database on which this function operates consists of all of the table files in the current directory.&lt;br&gt;These files all have an extension of  .csv . This function reads each file and returns a Database object&lt;br&gt;representing the data from all csv files in the current directory. For a file named  x.csv , the name of the&lt;br&gt;table is  x ; that is, the  .csv is not part of the table name. Note that each column name in the database is&lt;br&gt;guaranteed to be unique. That is, if there is a column called  x in one table, then there is guaranteed not&lt;br&gt;to be column  x in another table. (This is why we use the  m. -style prefixes on column names: so that our&lt;br&gt;column names are not shared by multiple tables in the database.)&lt;br&gt;How are you to obtain a list of all of the  .csv files in the directory? Use  glob.glob(‘&lt;em&gt;.csv’) to&lt;br&gt;obtain a list of these filenames. We have included this bit of code to demonstrate this for you, so you&lt;br&gt;are just provided with a list of the names of the files thats you need to process.&lt;br&gt;Note that there should be no  input and no  print in  reading.py . Two functions and that’s all. If you&lt;br&gt;run  reading.py and it prints something or requests user input, something is wrong.&lt;br&gt;Part 3: Running Queries&lt;br&gt;In  squeal.py , you will write a program that:&lt;br&gt;1. Reads the database in the current directory.&lt;br&gt;2. Reads SQuEaL queries from the keyboard until a blank line is entered. Each query is guaranteed to be&lt;br&gt;of the proper syntax. You do not need to try to verify that the query has the correct syntax; it is&lt;br&gt;guaranteed to be a well-formed query, and it is fine if your program crashes on malformed queries.&lt;br&gt;After running the query, continue with the next input prompt.&lt;br&gt;SQuEaL Syntax&lt;br&gt;11/21/2016&lt;br&gt;6/9&lt;br&gt;Here is the syntax of valid SQuEaL queries. When we speak of a token, we mean a piece of the query that&lt;br&gt;you get by calling  split on the query. In order, the query contains:&lt;br&gt;The token  select . This token is required.&lt;br&gt;A comma-separated list of one or more column names. There are no spaces in this list, there are no&lt;br&gt;duplicate column names in this list, and all columns are guaranteed to exist in the table. The special&lt;br&gt;token  &lt;/em&gt; (instead of a comma-separated list of column names) means “all columns”.&lt;br&gt;The token  from . This token is required.&lt;br&gt;A comma-separated list of one or more table names. There are no spaces in this list, there are no&lt;br&gt;duplicate table names in this list, and all tables are guaranteed to exist in the database.&lt;br&gt;The token  where . This token is optional. If not present, then the query is finished here and no more&lt;br&gt;tokens will be present. If the token  where is present, then it is followed by a  where clause that looks&lt;br&gt;like this:&lt;br&gt;A comma-separated list of one or more constraints. There are no spaces in this list, and each&lt;br&gt;column mentioned in the constraints is guaranteed to exist. Each constraint is of one of the&lt;br&gt;following four forms:  column_name1=column_name2 ,  column_name1&amp;gt;column_name2 ,&lt;br&gt;column_name1=’value’ , or  column_name1&amp;gt;’value’ (you can also implement &amp;lt; if you wish, but&lt;br&gt;we won’t be testing it). Single quotes are used to indicate that the second operand is a hard-coded&lt;br&gt;value rather than the value of another column in the row. Notice that there are no spaces around&lt;br&gt;the operators. Only these two operators are allowed. Also, note that only&lt;br&gt;column_name1=’value’ and  column_name1&amp;gt;’value’ are valid,  ‘value’=column_name and&lt;br&gt;‘value’&amp;gt;column_name are not valid constraints (i.e., the value can only come after the operator)&lt;br&gt;A Required Function:  run_query&lt;br&gt;We’re not specifying much in terms of required functions in  squeal.py . It is your responsibility to break the&lt;br&gt;work into meaningful, self-contained functions that perform well-defined and small tasks, and we will be&lt;br&gt;marking your design. That said, we are requiring that you write two particular functions. The first of which&lt;br&gt;is:&lt;br&gt;run_query: (Database, str) -&amp;gt; Table&lt;br&gt;This function takes a Database object, and a query (in the form of a string) as its parameters. Runs the given&lt;br&gt;query on the given database, and returns a table representing the resulting table.&lt;br&gt;Another Required Function:  cartesian_product&lt;br&gt;The second function you must write is this:&lt;br&gt;cartesian_product: (Table, Table) -&amp;gt; Table&lt;br&gt;The Cartesian product of two tables is a new table where each row in the first table is paired with every row&lt;br&gt;in the second table. For example, the Cartesian product of the  movies and  oscars tables is the following.&lt;br&gt;cartesian product&lt;br&gt;m.year m.title m.studio m.gross o.year o.category o.title&lt;br&gt;1997 Titanic Par. 2186.8 2010&lt;br&gt;Animated&lt;br&gt;Feature&lt;br&gt;Film&lt;br&gt;Toy Story 3&lt;br&gt;1997 Titanic Par. 2186.8 2003 Directing&lt;br&gt;The Lord of the&lt;br&gt;Rings: The Return&lt;br&gt;of the King&lt;br&gt;1997 Titanic Par. 2186.8 1997 Directing Titanic&lt;br&gt;1997 Titanic Par. 2186.8 1997&lt;br&gt;Best&lt;br&gt;Picture&lt;br&gt;Titanic&lt;br&gt;2003&lt;br&gt;The Lord of the Rings:&lt;br&gt;The Return of the King&lt;br&gt;NL 1119.9 2010&lt;br&gt;Animated&lt;br&gt;Feature&lt;br&gt;Film&lt;br&gt;Toy Story 3&lt;br&gt;11/21/2016&lt;br&gt;7/9&lt;br&gt;2003&lt;br&gt;The Lord of the Rings:&lt;br&gt;The Return of the King&lt;br&gt;NL 1119.9 2003 Directing&lt;br&gt;The Lord of the&lt;br&gt;Rings: The Return&lt;br&gt;of the King&lt;br&gt;2003&lt;br&gt;The Lord of the Rings:&lt;br&gt;The Return of the King&lt;br&gt;NL 1119.9 1997 Directing Titanic&lt;br&gt;2003&lt;br&gt;The Lord of the Rings:&lt;br&gt;The Return of the King&lt;br&gt;NL 1119.9 1997&lt;br&gt;Best&lt;br&gt;Picture&lt;br&gt;Titanic&lt;br&gt;2010 Toy Story 3 BV 1063.2 2010&lt;br&gt;Animated&lt;br&gt;Feature&lt;br&gt;Film&lt;br&gt;Toy Story 3&lt;br&gt;2010 Toy Story 3 BV 1063.2 2003 Directing&lt;br&gt;The Lord of the&lt;br&gt;Rings: The Return&lt;br&gt;of the King&lt;br&gt;2010 Toy Story 3 BV 1063.2 1997 Directing Titanic&lt;br&gt;2010 Toy Story 3 BV 1063.2 1997&lt;br&gt;Best&lt;br&gt;Picture&lt;br&gt;Titanic&lt;br&gt;Note that there are three rows in  movies and four rows in  oscars , so we get 3&lt;em&gt;4 = 12 rows in the cartesian&lt;br&gt;product table. Of course, most of these 12 rows are probably not what you want, as the titles don’t match. The&lt;br&gt;way that these nonsense rows get removed is through a suitable  where clause that constrains which rows are&lt;br&gt;kept. For example, with a  where clause of  m.title=o.title , you end up with only four rows, as expected.&lt;br&gt;Although it isn’t very efficient (and certainly isn’t the way things are implemented in a real database system),&lt;br&gt;you must process the SQuEaL query by first using your  cartesian_product function to join all the tables in&lt;br&gt;the query into a huge table and then keep the “good” rows and columns for the query based on the  where and&lt;br&gt;select clauses.&lt;br&gt;You may have noticed in reading the SQuEaL Syntax that one or more tables are allowed in the  from part of&lt;br&gt;the query. That is, you must support queries that contain one or two or three or more tables. Don’t&lt;br&gt;overcomplicate this. First produce the Cartesian product on the first two tables; that gives you a new table.&lt;br&gt;Then, do the Cartesian product on that new table and the third table in the list of tables; that gives you a new&lt;br&gt;table again, and so on. You can use  imdb.csv or  oscar-actors.csv in your starter files if you want to try a&lt;br&gt;query that involves three tables.&lt;br&gt;What to do with a Query&lt;br&gt;So, a user runs  squeal.py and types a query, like  select &lt;/em&gt; from movies or whatever. What does your&lt;br&gt;program have to do to process this query?&lt;br&gt;The first thing you want to do is break the query into tokens by calling  split . Remember: the query is&lt;br&gt;guaranteed to have proper syntax!&lt;br&gt;Now, start with the first table after the  from ; call that your base table. If there is a second table in the tables&lt;br&gt;list, compute the Cartesian product of the base table and that second table; that results in another table (call it&lt;br&gt;t2 ). If there is a third table in the tables list, compute the Cartesian product of  t2 and that third table. Keep&lt;br&gt;doing this until you’ve finished with all of the tables. When you’re done, you have a table containing all of the&lt;br&gt;columns from all of the tables that are involved in the query.&lt;br&gt;Now, apply any constraints in the  where clause. Each constraint from left to right results in a new table that&lt;br&gt;keeps only the rows that satisfy the constraint. Processing the first constraint removes 0 or more rows;&lt;br&gt;processing the second constraint takes the result of the first constraint and removes a further 0 or more rows,&lt;br&gt;and so on. We see many opportunities for helper functions here: processing one constraint, processing all&lt;br&gt;constraints, finding operators, handling values vs. column names, etc.&lt;br&gt;Finally, create a new table where you keep only those columns that were listed after the  select . (Another&lt;br&gt;opportunity for good design with a helper function!) The resulting table is the result of the query. Be careful:&lt;br&gt;11/21/2016&lt;br&gt;8/9&lt;br&gt;even though  select is listed first in the query (it is the first token), it is the last thing you do in processing the&lt;br&gt;query!&lt;br&gt;Once you’ve generated the table for the query, you want to output that table to the screen with commas&lt;br&gt;separating columns. We have provided a helper function in your starter code that outputs a table in the proper&lt;br&gt;format.&lt;br&gt;When are Tables Equivalent?&lt;br&gt;If two tables have the same rows and the same column names, but the column order is different, then the&lt;br&gt;tables are equivalent.&lt;br&gt;Similarly, if two tables have the same rows and the same column names, but the order of the rows is different,&lt;br&gt;then the tables are equivalent.&lt;br&gt;So, you can take a table, change the order of the columns, change the order of the rows, and it will still be the&lt;br&gt;same table. What does this mean? It means that the order in which you add rows during a Cartesian product&lt;br&gt;operation doesn’t matter. As long as you have the correct rows in your table, it is fine.&lt;br&gt;Testing your Code&lt;br&gt;It is recommended that you test each function as you write it by creating small files, tables, or queries,&lt;br&gt;depending on the function. This is preferable to doing lots of work, finding a bug, and then having no idea&lt;br&gt;where in the code that bug was introduced.&lt;br&gt;We are not asking you to submit your testing code as part of your submission.&lt;br&gt;To help you test, we are also providing a type-checker. It is in your starter code ( typechecker.py ). This&lt;br&gt;module simply tests that the required functions accept the proper number of parameters and return the proper&lt;br&gt;type. Passing the type-checker says nothing of the correctness of your functions, and does not test any helper&lt;br&gt;functions that you have written. (We haven’t prescribed how you should write those, so we can’t test their&lt;br&gt;type contracts!)&lt;br&gt;More Examples&lt;br&gt;Looking for more databases on which to run your code? We’ve provided a bunch of sample  .csv files. We’ve&lt;br&gt;added much more detailed movie info, an olympic database, as well as a database of every type of food that&lt;br&gt;was mentioned in the tv show Seinfeld (some databases are more practical than others). We may add new&lt;br&gt;files to play with as we go, so check back periodically. If you come across some fun .csv files, feel free to let&lt;br&gt;me know.&lt;br&gt;Marking&lt;br&gt;These are the aspects of your work that will be marked for Assignment 2:&lt;br&gt;Correctness: Your functions should perform as specified.&lt;br&gt;Formatting style: Make sure that you follow the PEP-8 Python style guidelines, and the general&lt;br&gt;programming rules that we have introduced throughout the term.&lt;br&gt;Programming style: Your variable names should be meaningful and your code as simple and clear as&lt;br&gt;possible.&lt;br&gt;No magic numbers:: remember this from Assignment 1? You should define constants and use them&lt;br&gt;instead of magic numbers.&lt;br&gt;Commenting: be sure to include accurate docstrings (that follow the design recipe we have been&lt;br&gt;using) and include internal comments.&lt;br&gt;Design: We expect a reasonable choice of functions/methods. Functions/methods should generally be&lt;br&gt;short – no longer than about 20-30 lines of code. Write helper functions/methods to meet this goal.&lt;br&gt;11/21/2016&lt;br&gt;9/9&lt;br&gt;What to Submit&lt;br&gt;The very last thing you should do before submitting is to run the type-check module one last time.&lt;br&gt;Otherwise, you could make a small error in your final changes before submitting that causes your code to&lt;br&gt;receive zero for correctness. Make sure that any  print or  input statements are hidden behind  if(&lt;strong&gt;name&lt;/strong&gt;&lt;br&gt;== “&lt;strong&gt;main&lt;/strong&gt;“) , or else the type-checker (and more importantly the auto-marker) will wait for input when it&lt;br&gt;imports your file, and pause indefinitely.&lt;br&gt;Submit  database.py ,  reading.py and  squeal.py . Your files must be named exactly as given here (i.e. no&lt;br&gt;capital letters, and please don’t change the filenames).&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;高级难度&lt;br&gt;&lt;br&gt;本次作业的目标是，利用python实现数据库，以及数据库操作。&lt;br&gt;完成本次程序设计，需要灵活使用class，file，字典，对象，等等知识。
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Turtle Graphics Lab</title>
    <link href="http://yoursite.com/2017/01/10/page91/"/>
    <id>http://yoursite.com/2017/01/10/page91/</id>
    <published>2017-01-10T04:33:14.000Z</published>
    <updated>2017-01-13T03:14:37.729Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Turtle乌龟画图的初级入门作业，总共5个exercise，包括运行python运行，用命令行操作，画图形等等入门功能&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSI 100 Turtle Graphics Lab&lt;br&gt;1 Introduction&lt;br&gt;Welcome to CSI100! This lab is a head-first introduction to programming. Here are the important things&lt;br&gt;to know:&lt;br&gt;• Don’t Panic! The most important thing that this lab is about is managing confusion. There will be&lt;br&gt;a lot of confusion in learning how to program. Try things and ask lots of questions!&lt;br&gt;• In this lab we are going to draw pictures with turtles. It’s a classic exercise for introducing new&lt;br&gt;programmers to code, and it can make really cool pictures!&lt;br&gt;• Work in pairs. We’ll do this a lot in this class. The two of you should share a laptop, and share your&lt;br&gt;ideas too. You will be able to upload deliverables to canvas as a group.&lt;br&gt;• There is just one deliverable for this lab, in section 4. Basically, you will draw a cool picture and&lt;br&gt;upload it to canvas.&lt;br&gt;2 Running your first Python program&lt;br&gt;In this section of the lab, we’ll download and run our first python program. Let’s start by getting the code.&lt;br&gt;Go to canvas and find the files for today’s lab. Save a copy of turtle lab.py to your Downloads folder.&lt;br&gt;Comment 1 Why save your file to the Downloads folder? For this lab, it is just somewhere easy to&lt;br&gt;find. In the future, feel free to use any location you prefer on your computer. Remember that the lab&lt;br&gt;laptops reset on every reboot, so they probably won’t be there anymore by next class.&lt;br&gt;Comment 2 The lab computers have both OS X and Windows installed. For our labs, we will work in&lt;br&gt;OS X. If your computer boots into Windows, switch operating systems by restarting the computer. Hold&lt;br&gt;down the ‘Option’ key when you see the grey loading screen. Let go when you see startup icons appear,&lt;br&gt;and choose ‘Macintosh HD’&lt;br&gt;The code that you downloaded, turtle lab.py, is just a text file. You can open it in any text editor,&lt;br&gt;like textEdit (mac) or Notepad (windows). Even better, the lab computers come with Sublime and Atom,&lt;br&gt;which are both programmer-oriented text editors. Most importantly, this means that they automatically&lt;br&gt;highlight code to make it easier to read.&lt;br&gt;Exercise 1 Go ahead and open turtle lab.py in a text editor. Some of the lines of code are special:&lt;br&gt;they are comments. Comments don’t contain any instructions for the computer; they just help other&lt;br&gt;programmers understand what is going on.&lt;br&gt;Figure out which lines are comments. How do you think you would add a new comment to the&lt;br&gt;program?&lt;br&gt;Now we want to run the program. This means telling python to read through turtle lab.py and execute&lt;br&gt;each instruction in order. To do this, we need to use the command line. You can open the command line by&lt;br&gt;clicking on the spotlight icon ( ) on the right side of the mac menu bar. Search for and open Terminal,&lt;br&gt;which is the mac command line.&lt;br&gt;Comment 3 We usually interact with computers through a mix of keyboard, mouse, and touchscreens.&lt;br&gt;When we want to give instructions precisely and formally, like in programming, the keyboard is often&lt;br&gt;most helpful. The command line is a text-based interface to the computer. We type commands, press&lt;br&gt;enter, and then the computer executes them.&lt;br&gt;1 of 4&lt;br&gt;CSI 100 Turtle Graphics Lab&lt;br&gt;The command line is like the Finder: it is always in a folder, and you can move it from one folder to&lt;br&gt;another. In order to run turtle lab.py, we need to navigate to the Downloads folder where we put the file.&lt;br&gt;The rest of this section will introduce a few command line commands to let you do this.&lt;br&gt;The command line always starts up in your home folder. If you type pwd (which stands for “print working&lt;br&gt;directory”), the command line will tell you what its courent directory is.&lt;br&gt;&amp;gt; pwd&lt;br&gt;/Users/wilsonkl&lt;br&gt;Comment 4 Your command line probably actually looks more like this:&lt;br&gt;WC-07792:~ student$ pwd&lt;br&gt;/Users/student&lt;br&gt;This is normal. The WC-07792:~ student$ part is called the command line prompt. Since it changes&lt;br&gt;so much from one computer to another, when programmers communicate to each other, they usually&lt;br&gt;just write &amp;gt; as a sort of standard prompt, even though no one’s prompt looks exactly like that.&lt;br&gt;You can also see a list of all of the files and folder that are in the current directory using ls (for “list”):&lt;br&gt;&amp;gt; ls&lt;br&gt;Applications Library anaconda&lt;br&gt;Desktop Movies Documents&lt;br&gt;Music Downloads Pictures&lt;br&gt;Dropbox Public Google Drive&lt;br&gt;Comment 5 Your output may look slightly different depending on what files and folders are in your&lt;br&gt;home directory. This is what mine shows.&lt;br&gt;Some of these folders should look familiar, like Desktop and Documents. We want to move to the&lt;br&gt;Downloads folder. To do that, we’ll use the cd command (for “change directory”).&lt;br&gt;&amp;gt; pwd&lt;br&gt;/Users/wilsonkl&lt;br&gt;&amp;gt; cd Downloads&lt;br&gt;&amp;gt; pwd&lt;br&gt;/Users/wilsonkl/Downloads&lt;br&gt;&amp;gt; ls&lt;br&gt;turtle_lab.py&lt;br&gt;Now that we are here in the Downloads folder where our code is, we can tell python to run it by typing&lt;br&gt;&amp;gt; python turtle_lab.py&lt;br&gt;Exercise 2 Follow the directions above to download a copy of turtle lab.py, open a command line,&lt;br&gt;navigate to the Downloads folder, and run the code.&lt;br&gt;Do you see an image pop up that looks like the following?&lt;br&gt;2 of 4&lt;br&gt;CSI 100 Turtle Graphics Lab&lt;br&gt;Comment 6 There are many other handy commands for moving around on the command line. In&lt;br&gt;particular, cd .. (two dots) moves up one directory, and cd (with nothing after it) takes you back to&lt;br&gt;your home directory.&lt;br&gt;3 Working with turtles&lt;br&gt;Imagine a small invisible turtle with a pen in its mouth. In turtle graphics, we draw pictures by giving&lt;br&gt;a turtle directions: “go forwards”, “turn left”, “turn right”. The instructions in turtle lab.py have the&lt;br&gt;turtle first go forwards 100 units, then turn left by 45 degrees, and then go forwards another 200 units.&lt;br&gt;t.forward(100)&lt;br&gt;t.left(45)&lt;br&gt;t.forward(200)&lt;br&gt;The three basic turtle commands are forward, left, and right. Using just combinations of these, you can&lt;br&gt;make the turtle draw some very complicated things.&lt;br&gt;Exercise 3 Which direction is the turtle initially facing, before it starts moving?&lt;br&gt;Exercise 4 Change the code in turtle lab.py to make the turtle draw a square. How would you do&lt;br&gt;an equilateral triangle, or a hexagon?&lt;br&gt;4 Your turn&lt;br&gt;Now it’s your turn to experiment! For some inspiration, here is a cool picture made with turtle graphics:&lt;br&gt;Figure 1: A turtle drawing made by repeatedly moving and turning.&lt;br&gt;Also, here are some other commands that you can give to your turtles:&lt;br&gt;3 of 4&lt;br&gt;CSI 100 Turtle Graphics Lab&lt;br&gt;penup() Tell the turtle to lift up it’s pen. It will still move as usual, but will not leave a mark.&lt;br&gt;pendown() Tell the turtle to put it’s pen down on the paper, so that it leaves a mark. The pen starts down&lt;br&gt;unless you lift it.&lt;br&gt;pencolor(’red’) Change the color of line that the turtle draws. Other colors work too, such as ’black’,&lt;br&gt;’blue’, ’magenta’, and many others.&lt;br&gt;pensize(10) Change the thickness of the line that the turtle draws. The default is 10, so pensize(12)&lt;br&gt;draws a slightly thicker line.&lt;br&gt;Repeating. There is a way to repeat the same commands many times without lots of copying and pasting.&lt;br&gt;Here is an example:&lt;br&gt;for i in range(10):&lt;br&gt;t.forward(20)&lt;br&gt;t.left(20)&lt;br&gt;This will cause turtle t to go forward 20 steps, and the turn left 20 degrees, and to repeat those actions a&lt;br&gt;total of 10 times. Repeating code like this is called looping.&lt;br&gt;Comment 7 This looping code has one line that is not indented, and then two lines that are. Inden-&lt;br&gt;tation is important in python, and we will talk about what it means in detail later in the course. For&lt;br&gt;now, know that indentation should be exactly four spaces, and that only indented lines get repeated by&lt;br&gt;this loop.&lt;br&gt;Exercise 5 (Turn in) Now it’s your turn! Draw a cool picture with your turtle. Take a screenshot&lt;br&gt;and upload it (as a group) to canvas.&lt;br&gt;4 of 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Turtle乌龟画图的初级入门作业，总共5个exercise，包括运行python运行，用命令行操作，画图形等等入门功能&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requ
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Project 4 Sliding Puzzle Game</title>
    <link href="http://yoursite.com/2017/01/09/page90/"/>
    <id>http://yoursite.com/2017/01/09/page90/</id>
    <published>2017-01-09T03:23:54.000Z</published>
    <updated>2017-01-13T03:11:21.178Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用python完成一个Sliding Puzzle Game游戏，功能点细化很很清楚，按照下面task要求一步一步来就好了。&lt;br&gt;PuzzleWindow.update()  10%&lt;br&gt;Task02: PuzzleWindow .get_click_position()  10%&lt;br&gt;Task03: PuzzleWindow .get_random_color()  10%&lt;br&gt;Task04: PuzzleWindow.paint_with_random_colors()  10%&lt;br&gt;Task05: PuzzleWindow.animation()  10%&lt;br&gt;Task06: Board. shuffle_one()  10%&lt;br&gt;Task07: Board.play_click()  10%&lt;br&gt;Task08: Board. play_key()  10%&lt;br&gt;Task09: Board.done()  10%&lt;br&gt;Task10: Cell. get_neighbor_cells()  10%&lt;br&gt;Task11: TopScores.add_score()  10%&lt;br&gt;Task12: TopScores.write_scores()  10%&lt;br&gt;Task13: TopScores. print_scores()&lt;br&gt;最后完成代码之后进行相关的单元测试，保证每个task1都pass&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Project 4: Sliding Puzzle Game&lt;br&gt;Release date: November 11&lt;br&gt;Due date: December 9&lt;br&gt;Introduction&lt;br&gt;In this project, we make a Sliding Puzzle game. The goal of the sliding puzzle game is that to move&lt;br&gt;tiles to end up with a desired state. We are only allowed to move tiles in certain ways.&lt;br&gt;First, before we start anything, let’s play the game we will build:&lt;br&gt;&lt;a href=&quot;http://mypuzzle.org/sliding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mypuzzle.org/sliding&lt;/a&gt;&lt;br&gt;We use the same graphics library in this game we used in Project 2.&lt;br&gt;The game will be dynamic in terms of size. We will be able to run our game with board sizes of 3x3,&lt;br&gt;4x4, 5x5 etc.&lt;br&gt;Let’s watch the video of the final version of our game:&lt;br&gt;&lt;a href=&quot;https://youtu.be/m0w2kXKg0LU&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://youtu.be/m0w2kXKg0LU&lt;/a&gt;&lt;br&gt;The details of the project is given in the project skeleton and in the recitation slides.&lt;br&gt;Turning in Your Work&lt;br&gt;●  Submit your completed file (project4_skel.py) on Vocareum.&lt;br&gt;Rubric&lt;br&gt;Project 4&lt;br&gt;Task01: PuzzleWindow.update()  10%&lt;br&gt;Task02: PuzzleWindow .get_click_position()  10%&lt;br&gt;Task03: PuzzleWindow .get_random_color()  10%&lt;br&gt;Task04: PuzzleWindow.paint_with_random_colors()  10%&lt;br&gt;Task05: PuzzleWindow.animation()  10%&lt;br&gt;Task06: Board. shuffle_one()  10%&lt;br&gt;Task07: Board.play_click()  10%&lt;br&gt;Task08: Board. play_key()  10%&lt;br&gt;Task09: Board.done()  10%&lt;br&gt;Task10: Cell. get_neighbor_cells()  10%&lt;br&gt;Task11: TopScores.add_score()  10%&lt;br&gt;Task12: TopScores.write_scores()  10%&lt;br&gt;Task13: TopScores. print_scores()  10%&lt;br&gt;TOTAL  130%&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用python完成一个Sliding Puzzle Game游戏，功能点细化很很清楚，按照下面task要求一步一步来就好了。&lt;br&gt;PuzzleWindow.updat
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 CSE105-CW3 Java programming project.</title>
    <link href="http://yoursite.com/2017/01/08/page89/"/>
    <id>http://yoursite.com/2017/01/08/page89/</id>
    <published>2017-01-08T01:53:24.000Z</published>
    <updated>2017-01-13T03:08:12.464Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;设计和完成一个小车管理系统，包括增加，售卖，显示，生成小车报告等功能，还有额外功能，将小车信息保存&lt;br&gt;在本地文件中，然后一半的工作量是写report，根据评分标准完成相关功能&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105-CW3: Java programming project 1&lt;br&gt;CSE105-CW3: Java programming project.&lt;br&gt;Due date: 11 th Dec 2016 at 6pm. Worth 30% of final mark.&lt;br&gt;Design and code a Used Car System in Java.&lt;br&gt;This will be a menu based Used Car System, using standard input/output.&lt;br&gt;Joe’s Garage buys and sells vehicles. They may buy a used car from a customer that has some&lt;br&gt;damage, and improve its condition before they sell it. Joe’s garage is a small family business and&lt;br&gt;can only store 20 cars at any time.&lt;br&gt;The details of operation are flexible and left to your imagination. The main functions are:&lt;br&gt; Add a new car to the system when it is purchased, noting the purchase price and date of&lt;br&gt;purchase. A new car can only be purchased if there are currently less than 20 cars for sale.&lt;br&gt; Sell a car to a customer, noting the sale price and date of sale. The car is marked as sold.&lt;br&gt;Its details are kept in the system for use in sales reports.&lt;br&gt; Display a list of all cars for sale sorted by date of purchase.&lt;br&gt; Display a sales report showing all car sales. Show the purchase price, sale price. Show the&lt;br&gt;total profit at the end of the report.&lt;br&gt;In addition, the program;&lt;br&gt; Reads a list of cars from a text file at start up. The cars are stored in a suitable data&lt;br&gt;structure in memory.&lt;br&gt; Saves all cars to a text file just before the program exits.&lt;br&gt;Note, the storage in the text file must be true object persistence. Objects will be read from the file&lt;br&gt;at the program commencement and stored prior to program termination. All operations on objects&lt;br&gt;(cars) must be done in memory.&lt;br&gt;CSE105-CW3: Java programming project 2&lt;br&gt;It is expected that you will have:&lt;br&gt; At least one Java class to control the operation of the system.&lt;br&gt; At least one Java class to store data as objects.&lt;br&gt;Use a package name of CSE105 for java classes.&lt;br&gt;The expected level of comments in the Java code:&lt;br&gt;Typically, one line of comment to describe each method. Comments are not needed for getters&lt;br&gt;and setters of data classes. Include your name and student number as a comment at the top of&lt;br&gt;each class.&lt;br&gt;You will submit:&lt;br&gt;1. A report in the form of one Word document containing:&lt;br&gt;a. System Design. The detailed design of each class showing attributes and methods.&lt;br&gt;b. Testing. Show the test cases needed to test the system. Show the actual test&lt;br&gt;results obtained by running the system.&lt;br&gt;2. Implementation (coding):&lt;br&gt;a. 1 file for each class (ie.  . java files)&lt;br&gt;b. 1 text file containing the data.&lt;br&gt;You must pack all of your files with WinRAR or WinZIP, using your student ID as the file name and&lt;br&gt;then upload one rar/zip file to ICE. Each student should also submit a hardcopy of the&lt;br&gt;assignment. The content must be identical to the electronic version.&lt;br&gt;Note, the project must contain English characters only – no Chinese.&lt;br&gt;This assignment is individual work. Plagiarism (e.g. copying materials from other sources&lt;br&gt;without proper acknowledgement) is a serious academic offence. Plagiarism will not be tolerated&lt;br&gt;and will be dealt with in accordance with the University Code of Practice on Assessment.&lt;br&gt;CSE105-CW3: Java programming project 3&lt;br&gt;Marking scheme for CW3 project.&lt;br&gt;Assessment criteria  Percentage&lt;br&gt;A design document is provided. Class names, main attributes, and&lt;br&gt;behaviour are shown. The overall design of the classes and methods&lt;br&gt;within are properly presented. OO principles are observed including&lt;br&gt;encapsulation and appropriate use of static and object methods.&lt;br&gt;Sufficient detail is shown to enable implementation. Do not use Java&lt;br&gt;code in the design. Pseudocode or equivalent should be used.&lt;br&gt;20&lt;br&gt;Test cases. Test cases are provided to test all functions of the&lt;br&gt;system.&lt;br&gt;10&lt;br&gt;Test results are properly presented showing expected and actual&lt;br&gt;results for all test cases.&lt;br&gt;10&lt;br&gt;Main functions work. 4 functions x 10 marks.  40&lt;br&gt;Data storage in text file. Data retrieval, data storage.  10&lt;br&gt;Menu navigation. It is possible to navigate all functions and also exit.  10&lt;br&gt;Total  100%&lt;br&gt;Deduct 5 marks for each of the following:&lt;br&gt; Compiler errors&lt;br&gt; The use of break or continue (except break within switch).&lt;br&gt; Identifier naming not conforming to commonly accepted Java programming conventions.&lt;br&gt; Insufficient comments in the Java code.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;设计和完成一个小车管理系统，包括增加，售卖，显示，生成小车报告等功能，还有额外功能，将小车信息保存&lt;br&gt;在本地文件中，然后一半的工作量是写re
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 CS1210 Programming Assignment 7</title>
    <link href="http://yoursite.com/2017/01/07/page88/"/>
    <id>http://yoursite.com/2017/01/07/page88/</id>
    <published>2017-01-06T21:23:34.000Z</published>
    <updated>2017-01-13T03:04:45.280Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;需要完成2个程序，第一个是不带gui界面的，判断字符串是否是回文，判断方法就是首尾循环是否相等，&lt;br&gt;第二个是完成一个旋转车轮的游戏，带gui界面，最后判断谁赢得胜利&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Programming Assignment 7 ( 100 Points )&lt;br&gt;Due: 11:59pm Thursday, November 10th&lt;br&gt;README ( 10 points )&lt;br&gt;You are required to provide a text file named README, NOT Readme.txt, README.pdf, or&lt;br&gt;README.doc, with your assignment in your pa7 directory. There should be no file extension after the file name&lt;br&gt;“README”. Your README should include the following sections:&lt;br&gt;Program Descriptions ( 5 points ) : Provide a high level description of what each of your programs do and&lt;br&gt;how you can interact with them. Make this explanation such that your grandpa or uncle or someone you know&lt;br&gt;who has no programming experience can understand what these programs do and how to use them. Do not&lt;br&gt;assume your reader is a computer science major.&lt;br&gt;Short Response ( 5 points ) : Answer the following questions:&lt;br&gt;Vim Questions:&lt;br&gt;1. In vim/gvim, what commands will indent N consecutive lines (starting from the cursor line) by one level&lt;br&gt;where the indent level is defined to be two spaces? This will take two vim commands: one to set the&lt;br&gt;number of spaces to indent with each indent level (default is 8), and one to actually indent N&lt;br&gt;consecutive lines. Likewise what command will shift N lines left (de-indent N lines)?&lt;br&gt;2. In vim/gvim, what command will indent an entire curly-bracket block one level, while the cursor is&lt;br&gt;currently on either the open or close curly bracket of the block? Likewise what command will shift an&lt;br&gt;entire curly-bracket block one level left (de-indent block)?&lt;br&gt;3. How do you open a new line below and insert (one keyboard key for both steps)?&lt;br&gt;Unix Question:&lt;br&gt;4. On the Unix command line, how can you capture (redirect) the program’s output into a file named&lt;br&gt;“output”?&lt;br&gt;Java Question:&lt;br&gt;5. How can you create an array of ints in Java and initialize it with the values of all single digit odd positive&lt;br&gt;numbers (inclusively between 0-9), all in one step/line?&lt;br&gt;STYLE ( 20 points )&lt;br&gt;Please see preview programming assignments; especially PA2’s writeup.  You will be specifically graded on&lt;br&gt;commenting, file headers, class and method headers, meaningful variable names, judicious use of blank lines,&lt;br&gt;not having more than 80 characters on a line, perfect indentation, no magic numbers/hard-coded numbers&lt;br&gt;other than -1, 0, +1, using setters and getters, etc (see the style section of PA2’s writeup).&lt;br&gt;You will lose significant points if you have static methods or static variables for the Spin100 program&lt;br&gt;(except, constants are okay). Instead you should create getters and setters to change the variables for an&lt;br&gt;object.&lt;br&gt;CORRECTNESS ( 70 points )&lt;br&gt;Start by creating your pa7 directory as usual. Then copy over the starter code from the public folder by doing&lt;br&gt;the following:&lt;br&gt;$ cp ~/../public/PA7indrome.java ~/pa7&lt;br&gt;$ cp ~/../public/PA7-images/&lt;em&gt; ~/pa7&lt;br&gt;Program 1: PA7indrome ( 20 Points )&lt;br&gt;You must use recursion and implement the methods listed below or you will lose all 20 points for this&lt;br&gt;program. Also,  do not edit the main() method in PA7indrome.java as it will negatively affect your grade.&lt;br&gt;Write a command line application that checks whether an array of strings is a palindrome. A palindrome is a&lt;br&gt;word, phrase, number, or other sequence of characters which reads the same forwards and backwards. The&lt;br&gt;program will take in a file as a command line argument. Each line of the file will be converted into a string,&lt;br&gt;where each string will be placed as an element in an arraylist then converted to an array (this part has already&lt;br&gt;been written for you in the main() method–do not edit anything in this method). Your task will be to then&lt;br&gt;determine if the array of strings is a palindrome or not (non-case sensitive). You will be using two recursive&lt;br&gt;methods to implement this functionality.&lt;br&gt;public static char[] reverse( char[] toRev ) {…}&lt;br&gt;● Overall goal: reverse the array of characters passed in using recursion.&lt;br&gt;● If the length of the character array passed in is 1, just return the array right away.&lt;br&gt;● Otherwise, swap the first and last characters in the array (#1-3 below)&lt;br&gt;● Copy the middle of the array into a new array and recursively call reverse on this new array (#4 below).&lt;br&gt;● Place the returned array back into the middle of the original array of characters, and return this&lt;br&gt;reversed array of characters (#5 below).&lt;br&gt;● Hint: you can use System.arraycopy() (look up the javadocs).&lt;br&gt;● This method must use ends-and-middle recursion.&lt;br&gt;public static boolean isPalindrome( String[] words, int lo, int hi ) {…}&lt;br&gt;● Overall goal: determine if the array of strings passed in is a palindrome using recursion.&lt;br&gt;● Determine if the string at the low index in the words array is the reverse of the string at the high index in&lt;br&gt;the words array. To do so, you must use your reverse() function, after converting the string to a char&lt;br&gt;array and passing it in. This comparison should be non-case sensitive.&lt;br&gt;● If the string at the low index is indeed the reverse of the string at the high index, recurse on the&lt;br&gt;remaining middle portion of the array by passing modified values of the low and high index in the&lt;br&gt;recursive call. Otherwise, return false.&lt;br&gt;● This method must use ends-and-middle recursion.&lt;br&gt;You must use these methods as they are defined above or you will lose points.&lt;br&gt;We will test for edge cases when grading this assignment, so it is up to you to test your program thoroughly.&lt;br&gt;Similar to previous assignments, your output MUST match exactly to our sample output!&lt;br&gt;Sample Output 1: Not a palindrome (user input in BOLD)&lt;br&gt;For this example, the input file is named notPalindrome. If you open the file in vim, it should look like this:&lt;br&gt;start&lt;br&gt;early&lt;br&gt;start&lt;br&gt;often&lt;br&gt;The output from running PA7indrome will give you the following:&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$ java PA7indrome notPalindrome&lt;br&gt;Input array of strings:&lt;br&gt;start, early, start, often&lt;br&gt;The file is not a palindrome.&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$&lt;br&gt;Sample Output 2: Odd-length palindrome (user input in BOLD)&lt;br&gt;Input file named oddPalindrome:&lt;br&gt;StArT&lt;br&gt;EaRlY&lt;br&gt;sTaRt&lt;br&gt;oFtEn&lt;br&gt;ufotofu&lt;br&gt;NeTfO&lt;br&gt;TrAtS&lt;br&gt;yLrAe&lt;br&gt;tRaTs&lt;br&gt;The output from running PA7indrome will give you the following:&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$ java PA7indrome oddPalindrome&lt;br&gt;Input array of strings:&lt;br&gt;StArT, EaRlY, sTaRt, oFtEn, ufotofu, NeTfO, TrAtS, yLrAe, tRaTs&lt;br&gt;The file is a palindrome.&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$&lt;br&gt;The sequence of characters in the array of Strings generated from the input file reads the same forwards and&lt;br&gt;backwards (non-case sensitive), so it is a palindrome. Note that because the length of the array is odd, the&lt;br&gt;middle string must also be a palindrome (in this case the middle string is “ufotofu”, which is a palindrome).&lt;br&gt;Sample Output 3: Even-length palindrome (user input in BOLD)&lt;br&gt;Input file named evenPalindrome:&lt;br&gt;StArT&lt;br&gt;EaRlY&lt;br&gt;sTaRt&lt;br&gt;oFtEn&lt;br&gt;NeTfO&lt;br&gt;TrAtS&lt;br&gt;yLrAe&lt;br&gt;tRaTs&lt;br&gt;The output from running PA7indrome will give you the following:&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$ java PA7indrome evenPalindrome&lt;br&gt;Input array of strings:&lt;br&gt;StArT, EaRlY, sTaRt, oFtEn, NeTfO, TrAtS, yLrAe, tRaTs&lt;br&gt;The file is a palindrome.&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$&lt;br&gt;Sample Output 4: Palindrome with new lines (user input in BOLD)&lt;br&gt;Input file named newLinesPalindrome. Note: New lines will be cut off (ignored) by the scanner.&lt;br&gt;StArT&lt;br&gt;EaRlY&lt;br&gt;sTaRt&lt;br&gt;oFtEn&lt;br&gt;NeTfO&lt;br&gt;TrAtS&lt;br&gt;yLrAe&lt;br&gt;tRaTs&lt;br&gt;The output from running PA7indrome will give you the following:&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$ java PA7indrome newLinesPalindrome&lt;br&gt;Input array of strings:&lt;br&gt;StArT, EaRlY, sTaRt, oFtEn, NeTfO, TrAtS, yLrAe, tRaTs&lt;br&gt;The file is a palindrome.&lt;br&gt;[cs11fxyz@ieng6-201]:pa7$&lt;br&gt;Program 2: Spin100 ( 50 Points )&lt;br&gt;You are to design a game that models itself after the mini game found in the Price is Right.&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mFJCfNib2ns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.youtube.com/watch?v=mFJCfNib2ns&lt;/a&gt;&lt;br&gt;Main idea of the game:&lt;br&gt;● There are two players: Player 1 and Player 2. Player 1 gets to spin the wheel first. Player 1 gets to&lt;br&gt;spin until they have reached over 100 points or have clicked the “Finish Player 1” button. At that point,&lt;br&gt;it becomes Player 2’s turn. Player 2 then gets to spin until they have reached over 100 points or have&lt;br&gt;clicked the “Finish Player 2” button.&lt;br&gt;● Once Player 2 goes over 100 points or clicks the “Finish Player 2” button, the game ends.&lt;br&gt;● Whichever player is closer to 100 points wins. Once a player goes over 100 points then they’ve lost. If&lt;br&gt;both players go over 100 points then it’s a tie. If both players have the same score, then it’s a tie.&lt;br&gt;Example scores and their outcomes:&lt;br&gt;Player 1  70  120  20  100  100  95&lt;br&gt;Player 2  90  110  120  100  105  100&lt;br&gt;Winner  Player 2  Tie  Player 1  Tie  Player 1  Player 2&lt;br&gt;Implementation Details:&lt;br&gt;This program will have two Java source files: Spin100Controller.java and Spin100Wheel.java.&lt;br&gt;Spin100Controller.java will be the main controller which extends WindowController and handles the GUI&lt;br&gt;layout. Spin100Wheel.java will be the actual wheel object that defines what a wheel can do, how it spins, etc.&lt;br&gt;1. Setting up the GUI:&lt;br&gt;Start by first getting the GUI set up in the begin() method of Spin100Controller.java.&lt;br&gt;The top panel will have 3 labels:&lt;br&gt;● “Spin100” - You can customize the font of this label–don’t worry about whether the font is the default or&lt;br&gt;not! Just make sure your program doesn’t throw errors or have an incorrect layout / text upon start.&lt;br&gt;● “Player 1’s score: “ - followed by player 1’s score (initially 0).&lt;br&gt;● “Player 2’s score: “ - followed by player 2’s score (initially 0).&lt;br&gt;○ Note the space following the ‘:’ for each player’s score&lt;br&gt;The bottom panel will have 5 buttons: (make sure the text matches exactly).&lt;br&gt;● “Click to Spin P1”&lt;br&gt;● “Finish Player 1”&lt;br&gt;● “Restart”&lt;br&gt;● “Click to Spin P2”&lt;br&gt;● “Finish Player 2”&lt;br&gt;The wheels on the center canvas:&lt;br&gt;● The center of the window will have the canvas, similar to PA6. The height and width of the canvas&lt;br&gt;should be 840 x 660. Note that the canvas will not be resized during testing. On the canvas we will&lt;br&gt;be displaying two wheels (one for each player). In order to create the wheels, we need to initialize an&lt;br&gt;array of Image(s), using the images you copied over from the public folder. Make sure your images&lt;br&gt;are directly inside your pa7 directory, and not in a subdirectory called PA7-images.&lt;br&gt;● You will want to load the 20 images into an array of Images. To ensure you arrange the images in the&lt;br&gt;correct order, we suggest creating the following array. This will ensure you load the images in the&lt;br&gt;correct order and will also be helpful for scoring later on. Load the images corresponding to these&lt;br&gt;score values in the order in which they appear in the array. The array of images and the array of score&lt;br&gt;values will be parallel arrays.&lt;br&gt;private static final int[] SCORES = { 50, 85, 30, 65, 10, 45, 70, 25, 90, 5,&lt;br&gt;100, 15, 80, 35, 60, 20, 40, 75, 55, 95 };&lt;br&gt;● The wheel should always start with 50 in the center and should spin in a downward direction. This&lt;br&gt;means that when the wheel spins for the first time, the red arrow will first point to 50, then 85, then 30,&lt;br&gt;and so on.&lt;br&gt;● You will want to create each wheel by calling the Spin100Wheel constructor. Some parameters you will&lt;br&gt;probably want to pass to the constructor are:&lt;br&gt;○ The array of Image(s) corresponding to the SCORES values.&lt;br&gt;○ Location of the wheel (location of the top number). The center of the left wheel should be&lt;br&gt;horizontally aligned with the center of the left half of the canvas. In other words, you need to find&lt;br&gt;the x-coordinate that will center the left wheel in the center of the left half of the canvas.&lt;br&gt;Similarly, you need to find the x-coordinate that will center the right wheel in the center of the&lt;br&gt;right half of the canvas. The y-coordinate of the top number for both wheels should be 10 (make&lt;br&gt;sure the layout of your wheels matches the screenshots exactly).&lt;br&gt;○ Reference to the Spin100Controller so that controller methods can be called from the wheel&lt;br&gt;(this will be useful for setting the score after the wheel stops spinning each time)&lt;br&gt;○ Reference to the drawing canvas so the wheel can be placed on the canvas&lt;br&gt;The red arrows on the center canvas:&lt;br&gt;● The arrows are red-filled arcs with start angle = -15, arc angle = 30, height = 150, and width = 150.&lt;br&gt;● Left arrow position: (234.5, 186.0)&lt;br&gt;● Right arrow position: (688.5, 186.0)&lt;br&gt;Messages declaring winner on the center canvas:&lt;br&gt;● Create a hidden text object saying “Tie” at position (444, 5). The text should be blue, bold, and size 16.&lt;br&gt;● Create a hidden text object saying “P1 Winner” at position (20, 5). The text should be green, bold, and&lt;br&gt;size 16.&lt;br&gt;● Create a hidden text object saying “P2 Winner” at position (808, 5). The text should be green, bold,&lt;br&gt;and size 16.&lt;br&gt;See the screenshot section below to see what all of this looks like.&lt;br&gt;2. Wheel Functionality&lt;br&gt;Because the wheels are animated, the Spin100Wheel class needs to extend ActiveObject (and therefore must&lt;br&gt;contain a run() method).&lt;br&gt;Creating a wheel:&lt;br&gt;● Each wheel needs an array of 5 VisibleImages (generated from the array of images passed in as a&lt;br&gt;parameter to the constructor) to store the 5 images that will be visible on the canvas at any given time.&lt;br&gt;● The location passed to the constructor is the location of the topmost VisibleImage. The next&lt;br&gt;VisibleImage will be 99 pixels below that, and the next 99 pixels below that, and so on.&lt;br&gt;● Each wheel needs a random double generator object to generate random numbers for the amount of&lt;br&gt;ticks to spin when the spin button is clicked (see more details below in the Spinning the wheel section).&lt;br&gt;● Don’t forget to save a reference to the Spin100Controller object to help with scoring.&lt;br&gt;● Set the number of ticks to 0, so the wheel begins stationary.&lt;br&gt;● As with all ActiveObjects, the last statement in the constructor should be start();.&lt;br&gt;Spinning the wheel:&lt;br&gt;● Initially, the wheel’s number of ticks should be set to zero. When a wheel’s spin button is clicked, the&lt;br&gt;controller should update the number of ticks so the wheel will start spinning. This means you will want&lt;br&gt;a method to generate a random number of ticks for the wheel to spin.&lt;br&gt;● One way to implement this is to have a method called getRandomTicks(). This method should:&lt;br&gt;○ First generate a random double between 0 and 1&lt;br&gt;○ Based on the random number, return the minimum number of ticks (50) + a number of&lt;br&gt;additional ticks, which indicates how many ticks a wheel should spin for. This is to allow the&lt;br&gt;wheel to stop on different numbers each time by randomizing where a wheel stops cycling&lt;br&gt;through the array of images.&lt;br&gt;○ If the random number is between 0 and 0.05, return MIN_TICKS + 1. If it’s between .05 and .1,&lt;br&gt;return MIN_TICKS + 2. You should keep adding one more tick until you return MIN_TICKS + 13&lt;br&gt;for when the value is between .6 and .65. From there you should subtract one less tick until you&lt;br&gt;return MIN_TICKS + 6 when the value is between .95 and 1.&lt;br&gt;■ Range of ticks to add (over the .05 increments) is&lt;br&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6)&lt;br&gt;● After getting the random number of ticks, the controller needs to set the wheel’s number of ticks using a&lt;br&gt;setter method.&lt;br&gt;● To make the wheel actually spin, the run method will need to constantly check its number of ticks. If&lt;br&gt;the number of ticks is greater than 0, increment the index of each visible image displayed to the next&lt;br&gt;index in the images array; in other words, for every tick, shift the images down one. Once you reach&lt;br&gt;the last index of the images array, wrap back around to the beginning (Hint: think mod operator).&lt;br&gt;Then decrement the number of ticks left for this wheel to spin and pause to slow down the animation.&lt;br&gt;● At the beginning of each spin, the initial delay should be set to 1. Then when the wheel delay is less&lt;br&gt;than 20, the wheel delay should increment by 1 on every iteration of the forever loop. When the wheel&lt;br&gt;delay is greater than or equal to 20 and less than 200, the wheel delay should increment by 5. When&lt;br&gt;the wheel delay is greater than or equal to 200 and less than 500, the wheel delay should increment by&lt;br&gt;20. This will give the illusion of a faster spin at the start which eventually slows down and stops once&lt;br&gt;the number of ticks is zero.&lt;br&gt;● Once the number of ticks is 0, the wheel needs to call a public method in controller to let the controller&lt;br&gt;know that the wheel’s score has changed and that the Text object for the score needs to be updated.&lt;br&gt;● Some additional methods to include in the class would be setters and getters for the ticks, delay, and&lt;br&gt;score. This is so that the controller can call these methods and change the wheel’s variables’ values&lt;br&gt;when something like the spin, finish, or reset button is pressed.&lt;br&gt;3. Controller Functionality&lt;br&gt;You will implement Spin100Controller.java to handle creating the buttons and listening to actions performed on&lt;br&gt;the buttons.&lt;br&gt;● Upon start, only the “Click to Spin P1” and “Restart” buttons should be enabled. So in your begin()&lt;br&gt;method, in addition to setting up the layouts of the buttons, you should also disable the “Finish Player 1”&lt;br&gt;button and all buttons associated with Player 2.&lt;br&gt;● Once you have clicked “Click to Spin P1”, all buttons are disabled until the wheel stops spinning. Once&lt;br&gt;the wheel stops spinning, update Player 1’s score. Now that you have spun Player 1’s wheel at least&lt;br&gt;once, the “Finish Player 1” button should be enabled.&lt;br&gt;● As long as Player 1’s score is less than or equal to 100, Player 1 can choose to continue spinning by&lt;br&gt;clicking “Click to Spin P1” again, or click “Finish Player 1” to finish their turn. Once Player 1’s score is&lt;br&gt;over 100, the controller will automatically finish the turn for Player 1.&lt;br&gt;● Once Player 1 has finished, all of Player 1’s buttons are disabled and the “Click to Spin P2” button is&lt;br&gt;enabled for Player 2 to start spinning. The spinning process follows the same condition as stated for&lt;br&gt;Player 1.&lt;br&gt;● Once Player 2 has also finished, all but the Restart button should be disabled. A game over message&lt;br&gt;should be displayed. The message could announce a Tie, or announce that either Player 1 or Player 2&lt;br&gt;won (see screenshots for detail).&lt;br&gt;Summary of the buttons&lt;br&gt;● The Spin buttons: The spin button disables itself when:&lt;br&gt;○ The wheels are spinning&lt;br&gt;○ The player’s score has passed 100&lt;br&gt;○ The player has clicked finish after at least one spin&lt;br&gt;● The Finish buttons: Each player’s finish button is disabled until they have spun at least once. It is also&lt;br&gt;disabled when the wheel is spinning, as well as after they have finished their turn.&lt;br&gt;● The Restart button: This button is always enabled except when a wheel is spinning. Once clicked:&lt;br&gt;○ It changes the scores back to 0&lt;br&gt;○ It resets the wheels so that 50 is at the center again&lt;br&gt;○ The “Click To Spin P1” button is enabled again and the buttons are reset to the original state.&lt;br&gt;Implementation Requirements for Button Event Handling&lt;br&gt;To manage the behaviors of the 5 buttons, you must define 5 private member inner classes inside the&lt;br&gt;Spin100Controller class. Use your notes from class as a reference.&lt;br&gt;● Each private class must implement the ActionListener interface.&lt;br&gt;● The ActionListener interface enforces that each class has the actionPerformed(ActionEvent e) method&lt;br&gt;declared and implemented.&lt;br&gt;Having separate inner classes for each button is much better than handling all button events in one&lt;br&gt;actionPerformed() method. This is because there is a one-to-one relationship between buttons and listeners,&lt;br&gt;resulting in cleaner code that is less prone to errors.&lt;br&gt;Note: Remember to use getters/setters vs. directly accessing variables by name.&lt;br&gt;4. Sample Screenshots:&lt;br&gt;The start of the program. Both&lt;br&gt;player’s scores are set to 0,&lt;br&gt;with the arrows pointing to 50.&lt;br&gt;Only the buttons: “Click to Spin&lt;br&gt;P1” and “Restart” are enabled.&lt;br&gt;After Player 1 clicks “Click to&lt;br&gt;Spin P1”, the score for Player&lt;br&gt;1 is updated. The “Finish&lt;br&gt;Player 1” button is now&lt;br&gt;enabled after 1 spin.&lt;br&gt;Player 1 clicks “Finish Player&lt;br&gt;1”, and now only “Restart” and&lt;br&gt;“Click to Spin P2” buttons are&lt;br&gt;enabled.&lt;br&gt;Player 2 now clicks “Click to&lt;br&gt;Spin P2”, the score for Player&lt;br&gt;2 is updated. “Finish Player 2”&lt;br&gt;button is now enabled after the&lt;br&gt;first spin.&lt;br&gt;After Player 2 clicks “Finish&lt;br&gt;Player 2” The winner text&lt;br&gt;appears. The only button&lt;br&gt;enabled is “Restart”.&lt;br&gt;This is the case when Player&lt;br&gt;1’s score is over 100, thus&lt;br&gt;Player 2 wins.&lt;br&gt;In the case that Player 1’s&lt;br&gt;score exceeds 100, the&lt;br&gt;buttons “Click to Spin P1” and&lt;br&gt;“Finish Player 1” are&lt;br&gt;automatically disabled,&lt;br&gt;allowing P2 to begin.&lt;br&gt;If both player’s scores exceed&lt;br&gt;100, the game results in a tie.&lt;br&gt;Turnin&lt;br&gt;To turnin your code, navigate to your home directory and run the following command:&lt;br&gt;&amp;gt; cse11turnin pa7&lt;br&gt;You may turn in your programming assignment as many times as you like. The last submission you turn in&lt;br&gt;before the deadline is the one that we will collect.&lt;br&gt;Verify&lt;br&gt;To verify a previously turned in assignment,&lt;br&gt;&amp;gt; cse11verify pa7&lt;br&gt;If you are unsure your program has been turned in, use the verify command. We will not take any late files you&lt;br&gt;forgot to turn in. Verify will help you check which files you have successfully submitted.&lt;br&gt;It is your responsibility to make sure you properly turned in your assignment.&lt;br&gt;Files to be collected:&lt;br&gt;Note: You must turn in all the files necessary for your program to run, including the .jar files and .png files.&lt;br&gt;Note: Also, if any exceptions are thrown in the terminal, you will lose points.&lt;br&gt;Source Files:  Image Files:  Misc:&lt;br&gt;PA7indrome.java&lt;br&gt;Spin100Controller.java&lt;br&gt;Spin100Wheel.java
&lt;/em&gt;.png (20 of them)  objectdraw.jar&lt;br&gt;Acme.jar&lt;br&gt;README&lt;br&gt;EC_Spin100Controller.java (extra credit)&lt;br&gt;EC_Spin100Wheel.java (extra credit)&lt;br&gt;Extra Credit ( 5 points )&lt;br&gt;Setup: Create copies of your regular source files and name them EC_Spin100Controller.java and&lt;br&gt;EC_Spin100Wheel.java.&lt;br&gt;Along with the functionality listed below, you will need to change the size of the window if you are adding the&lt;br&gt;extra buttons. Set the canvas width to 1000 and the canvas height to 660.&lt;br&gt;Overall Wins: 1 Point&lt;br&gt;Keep track of the overall wins with a message that appears at the end of the game:&lt;br&gt;Overall Wins P1: #, P2 @&lt;br&gt;where # is a non-negative number indicating how many times player 1 has won the game and @ is a non-&lt;br&gt;negative number indicating how many times player 2 has won the game. This message cannot overlap either&lt;br&gt;wheel and it should be horizontally centered between the wheels. It should be 200 pixels above the vertical&lt;br&gt;center of the canvas. The message can be in whatever color you would like besides black. In the case of a tie,&lt;br&gt;neither player’s win count should change.&lt;br&gt;Change Spin Direction: 1 Point&lt;br&gt;Add some new buttons and change the old ones so that each player has the option to spin up or down. There&lt;br&gt;should be a “P1, Spin Up” button, “P1, Spin Down” button, “P2, Spin Up” button, and “P2, Spin Down” button.&lt;br&gt;To clarify, spinning up is where the numbers appear to be moving up (so the 50 goes towards the top) whereas&lt;br&gt;spinning down is where the numbers appear to be moving down (so the 50 moves towards the bottom). You&lt;br&gt;can see the new buttons in the screenshots below. Disabling the buttons should still work the same as it does&lt;br&gt;in the normal portion of the PA, just make sure to disable both the Up and Down spin buttons.&lt;br&gt;Switch Starting Players: 3 Points&lt;br&gt;The “Switch” button is enabled only at the start of each round of the game. This button should be disabled in&lt;br&gt;the middle of a game (i.e. if a spin has occurred). This allows the player who spins first to switch with the other&lt;br&gt;player. For instance, if Player 1 was going to start first and the switch button is clicked. then the game will&lt;br&gt;restart and Player 2 will now start first. If the restart button were then clicked, Player 2 would still be going first.&lt;br&gt;Sample Screenshots:&lt;br&gt;If all extra credit features are implemented, this is the initial state of the program.&lt;br&gt;The overall number of wins for each player is shown when a round finishes.&lt;br&gt;Player 2 can begin the round of a game when “Switch” is clicked.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;需要完成2个程序，第一个是不带gui界面的，判断字符串是否是回文，判断方法就是首尾循环是否相等，&lt;br&gt;第二个是完成一个旋转车轮的游戏，带gui
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 CS1210 Computer Science I Foundations</title>
    <link href="http://yoursite.com/2017/01/06/page87/"/>
    <id>http://yoursite.com/2017/01/06/page87/</id>
    <published>2017-01-06T14:33:34.000Z</published>
    <updated>2017-01-13T02:52:57.638Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;完成意大利儿童纸牌游戏的完整版。居于上一次作业的重构和改进，主要游戏的游戏规则，&lt;br&gt;根据规则写相关的操作逻辑，并且完成测试。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS1210 Computer Science I: Foundations&lt;br&gt;Homework 5: Ruba Mazzetto, Completed&lt;br&gt;Due Monday, October 31 at 11:59PM&lt;br&gt;Introduction&lt;br&gt;In Homework 4, you completed the simple implementation of the Italian children’s card game called&lt;br&gt;Ruba Mazzetto. In this homework, we’ll finally finish the complete version of the game that pits you&lt;br&gt;against any number of other players, and includes provisions for taking more than one card each turn. In&lt;br&gt;the interest of brevity, you can refer to the descriptions of Homework 3 and Homework 4 for more&lt;br&gt;information about the game.&lt;br&gt;Background&lt;br&gt;For this assignment, we’ll start with a refactored version of the Homework 4 solution, that incorporates&lt;br&gt;one small change to the rules of the game 1 and significantly revamps the structure of the play() function.&lt;br&gt;Your job is to complete this refactored version to support taking more than one card per turn, where the&lt;br&gt;cards matched must sum to the value of the card played. So, for example, the solution to Homework 5 will&lt;br&gt;behave as follows (excerpt taken from the middle of a 3-player game):&lt;br&gt;Pl aye r 0 :&lt;br&gt;St ash : [P l aye r 1] 7♠ (&lt;em&gt;3) , [P l aye r 2] 6♥ (&lt;/em&gt;2)&lt;br&gt;Ta b l e : [3] 10♦, [4] 3♦&lt;br&gt;My hand : [0] 10♣, [1] 10♠&lt;br&gt;Pl ay wh i ch ca rd? 0&lt;br&gt;Se l ec t ma t ch i ng i nd ece s sepa r a t ed by spa c es (b l ank t o d i sca rd) : 1 4&lt;br&gt;Pl aye r 0 p l ays 10♣ and . . .&lt;br&gt;. . . . t ake s 3♦ f rom t ab l e&lt;br&gt;. . . . s t ea l s p l aye r 1 s t ash 7♠&lt;br&gt;=========&lt;br&gt;Pl aye r 1 :&lt;br&gt;St ash : [P l aye r 0] 10♣ (&lt;em&gt;5) , [P l aye r 2] 6♥ (&lt;/em&gt;2)&lt;br&gt;Ta b l e : [3] 10♦&lt;br&gt;Pl aye r 1 p l ays 6♦ and . . .&lt;br&gt;. . . . s t ea l s p l aye r 2 s t ash 6♥&lt;br&gt;=========&lt;br&gt;Pl aye r 2 :&lt;br&gt;St ash : [P l aye r 0] 10♣ (&lt;em&gt;5) , [P l aye r 1] 6♦ (&lt;/em&gt;3)&lt;br&gt;Ta b l e : [3] 10♦&lt;br&gt;Pl aye r 2 add s 1♦ t o t ab l e&lt;br&gt;1&lt;br&gt;The small change referred to here has to do with what happens to the cards that remain on the table at the end&lt;br&gt;of the game. In the ‘‘real’’ version of the game, the last person to match cards from the table or another player’s&lt;br&gt;stash is gifted all of the remaining cards on the table when everyone else has finished playing their cards. This&lt;br&gt;change has been incorporated into the play() function.&lt;br&gt;1 Revised October 24, 2016&lt;br&gt;Note how Player 0 uses the 10♣ to match a 3♦ from the table and the 7♣ from Player 1’s stash (because&lt;br&gt;10 = 3 + 7).&lt;br&gt;As for HW4, to make this homework feasible, you will be provided a code skeleton containing nearly all&lt;br&gt;of the code you will need for the solution. Your assignment is to complete the functions getMove() and&lt;br&gt;pickMove(), but you should begin by studying the code skeleton file carefully.&lt;br&gt;def play(N=2, K=10)&lt;br&gt;The play() function has undergone the most significant reworking since the previous assignment. Aside&lt;br&gt;from an additional variable, which changes the parameters of the deck you play with, the big change is in&lt;br&gt;the main iteration that continues until the deck is exhausted. Previously, this loop was divided into two&lt;br&gt;sections: one for the human player and one for everyone else. The new structure merges these two&lt;br&gt;sections into a single loop and relegates the differentiation of the human player from the computer&lt;br&gt;player(s) to getMove(). The last change to play() involves assignment of any cards remaining on the table&lt;br&gt;to the last player who successfully matched, a job handled by the addition of a variable, last, that is reset&lt;br&gt;each time a player makes a match.&lt;br&gt;def getMove(i, N, H, T, P)&lt;br&gt;The purpose of getMove() has changed significantly from HW4. In HW4, getMove() was to return a&lt;br&gt;single ‘‘best’’ move for a given (automated) player, where each move consisted only of matching a single&lt;br&gt;card from the player’s hand with a single card from the table or the top card from an opposing player’s&lt;br&gt;stash. But now that we permit matching a single card from the player’s hand with the sum of multiple&lt;br&gt;cards from the table or from the top of each opposing player’s stash, we need to generate and then&lt;br&gt;consider the space of all possible legal moves. Each move is represented as (c, M), where c is the index&lt;br&gt;into the player’s hand correspond to the card they will play and M is a list of indeces selected from the&lt;br&gt;table and/or the opposing player’s stashes such that sum(M)≡ H[i][c][0]. If (c, M) is (c,[]), then the&lt;br&gt;move corresponds to discarding c to the table.&lt;br&gt;Your job is to implement helper(c,v, j, M, L) to generate all legal moves, from which one will be&lt;br&gt;selected and returned as the value of getMove(). Let’s examine getMove() more closely:&lt;br&gt;(1)  The first step is to determine if the argument i relates to the human player (i ≡0). If so, then move&lt;br&gt;selection is relegated to pickMove().&lt;br&gt;(2)  The second step invokes the as-yet-unwritten helper function helper(c,v, j, M, L) repeatedly&lt;br&gt;(once for each card held by the current player) to generate the list L of all legal moves.&lt;br&gt;(3)  The third step returns a random card to discard if no legal moves were found.&lt;br&gt;(4)  The final step returns the legal move that maximizes the number of cards captured by the current&lt;br&gt;player (note that other heuristics might be used to make a ‘‘best’’ move selection from the list L of&lt;br&gt;legal moves).&lt;br&gt;The helper() function is a recursive function that constructs the set of legal moves. If you think of the&lt;br&gt;len(T) cards on the table and the up to N − 1 player stashes (excluding the current player’s stash) as&lt;br&gt;defining a space of size 2 len(T)+N−1 , you will need to enumerate the up to this many card combinations by&lt;br&gt;considering possible inclusion or exclusion of each successive card. The arguments to&lt;br&gt;helper(c,v, j, M, L) are designed to help you do so.&lt;br&gt;(1)  The first argument, c, is the index of the card you are trying to match from player i’s hand.&lt;br&gt;(2)  The second argument, v, initially the value of c, represents how many ‘‘points’’ remain to match&lt;br&gt;with the addition of each successive card. When this number reaches 0, you know the cards&lt;br&gt;you’ve selected so far sum to the original value you were trying to match.&lt;br&gt;2 Revised October 24, 2016&lt;br&gt;(3)  The third argument, j, initially 0, is the index of the card you are currently considering adding to&lt;br&gt;the legal move you are construction. On each successive recursive call, you’ll increase j by 1 to&lt;br&gt;indicate you are going to consider the next card, from 0 through N up to N + len(T) − 1. At each&lt;br&gt;recursive step, you will want to explore both adding the jth card to the current legal move or not&lt;br&gt;adding it.&lt;br&gt;(4)  The fourth argument, M, initially [], is the legal move under construction. Each time you elect to&lt;br&gt;include an additional card, you will need to extend M to include that card’s index.&lt;br&gt;(5)  The last argument, L, initially [], is the list of legal moves you have found so far. Each new leg al&lt;br&gt;move you discover should be added to L, and the updated L should be the value returned from&lt;br&gt;helper().&lt;br&gt;def pickMove(i, N, H, T, P)&lt;br&gt;pickMove() is called by getMove() when the first argument i to getMove() corresponds to the human&lt;br&gt;player. pickMove() interacts with the user to obtain a legal move (c, M). Note that pickMove() must&lt;br&gt;guarantee that the move is both legal in every sense and that the cards selected from the table and the top&lt;br&gt;of any opposing player’s stash do, in fact, sum to the value of the card selected from the player’s hand.&lt;br&gt;The Ground Rules&lt;br&gt;Because this class is part of the NSF study we have previously described to you, the ground rules may&lt;br&gt;differ slightly section by section. In your section, you will start working on your assignment in discussion&lt;br&gt;section and continue working on it in next week’s discussion section. We ask that you upload a partial&lt;br&gt;solution to ICON at the end of each session (this will not be graded, it is just to see how far you get during&lt;br&gt;the discussion section). You will also be asked to answer a short survey about your experience after each&lt;br&gt;discussion section. Once you upload your final solution to ICON (when the assignment is complete),&lt;br&gt;your will be asked to fill out a separate short survey about your work on the assignment.&lt;br&gt;Just as a reminder, under no circumstances should you turn in the work of someone else (including any&lt;br&gt;code or material you may find on the Internet) as your own, nor should you share your own work with&lt;br&gt;others. It is fine, however, to discuss general concepts with your classmates as long as these discussions&lt;br&gt;do not lead to the actual exchange of code fragments or written solutions.&lt;br&gt;You hav e several sources for help. Your first recourse should always be to post your question on the ICON&lt;br&gt;discussion board. This is the fastest place to go for clarifications or disambiguation, or for help with&lt;br&gt;Python in general (remember, don’t post your solution or any part of your solution). Second, if you must&lt;br&gt;share a portion of your code, you can always attend a TA help session (see the announcement on ICON&lt;br&gt;entitled General TA Office Hours start Thursday, September 1 for times and locations). You may also&lt;br&gt;attend my office hours Tuesdays from 1:30 to 3:30 in my office (14 MLH). Finally, you may email your&lt;br&gt;code with a specific question to me or to your TA, but please be sure that you include CS1210 on the&lt;br&gt;subject line (also, this is the slowest way of getting help, due to the volume of mail we are likely to&lt;br&gt;receive).&lt;br&gt;What to Hand In&lt;br&gt;As before, for credit, you must make sure your function definitions exactly match the ‘‘signatures’’ giv en&lt;br&gt;in this problem specification. Your files should be uploaded to the HW5 dropbox folder in ICON by the&lt;br&gt;specified time and date: late assignments will not be accepted.&lt;br&gt;You should start building your solution file according to the template at the end of this assignment (the&lt;br&gt;template file, hw5.py, can be downloaded from ICON), substituting your own name for mine, obviously.&lt;br&gt;obviously. Note that the template file is incomplete and will not load in its present state.&lt;br&gt;3 Revised October 24, 2016&lt;br&gt;Make sure that you follow the instructions given for each function exactly, as the autograder expects these&lt;br&gt;functions to follow the naming convention shown. Also note the use of the comment character, #, at the&lt;br&gt;beginning of each line that is not intended to be interpreted by Python. You should use comments liberally&lt;br&gt;to explain what you are doing to the human reader.&lt;br&gt;4 Revised October 24, 2016&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;完成意大利儿童纸牌游戏的完整版。居于上一次作业的重构和改进，主要游戏的游戏规则，&lt;br&gt;根据规则写相关的操作逻辑，并且完成测试。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 CSCA09 The Game of Life</title>
    <link href="http://yoursite.com/2017/01/05/page86/"/>
    <id>http://yoursite.com/2017/01/05/page86/</id>
    <published>2017-01-05T14:13:33.000Z</published>
    <updated>2017-01-13T02:53:18.774Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;主要实现了细胞生成游戏。&lt;br&gt;需要实现游戏的逻辑代码，以及界面仿真代码。&lt;br&gt;&lt;br&gt;首先：&lt;br&gt;完成代码的逻辑编写。比如活细胞和无细胞在不同的邻居个数的情况下，&lt;br&gt;下一代会是活细胞或者无细胞的判断。&lt;br&gt;&lt;br&gt;其次需要实现接口函数，来显示不同的使用策略。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;The Game of Life is a well-known mathematical game that gives rise to amazingly&lt;br&gt;complex behavior, although it can be specified by a few simple rules. (It is not actually a&lt;br&gt;game in the traditional sense, with players competing for a win.) Here are the rules. The&lt;br&gt;game is played on a rectangular grid. Each square on the grid can be either empty&lt;br&gt;(represented by a 0 in our version) or occupied by a “living” cell (represented by a 1). At&lt;br&gt;the beginning, you can specify empty and occupied cells in some way; then the game&lt;br&gt;runs automatically. In each generation, the next generation is computed. A new cell is&lt;br&gt;born on an empty square if it is surrounded by exactly three occupied neighbor cells. A&lt;br&gt;cell dies of overcrowding if it is surrounded by four or more living neighbors, and it dies&lt;br&gt;of loneliness if it is surrounded by zero or one living neighbor. A neighbor is an occupant&lt;br&gt;of an adjacent square to the left, right, top, or bottom or in a diagonal direction. Figure 16&lt;br&gt;shows a cell and its neighbor cells.&lt;br&gt;Many configurations show interesting behavior when subjected to these rules. Figure 17&lt;br&gt;shows a glider, observed over five generations. Note how it moves. After four&lt;br&gt;generations, it is transformed into the identical shape, but located one square to the right&lt;br&gt;and below.&lt;br&gt;One of the more amazing configurations is the glider gun: a complex collection of cells&lt;br&gt;that, after 30 moves, turns back into itself and a glider (see the large figure at the end).&lt;br&gt;Over the next two weeks, you will use Python to program the game to eliminate the&lt;br&gt;drudgery of computing successive generations by hand. Your homework assignment will&lt;br&gt;come in two parts, also known as Programming Assignment 6 and Programming&lt;br&gt;Assignment 7. The Wikipedia page on The Game of Life has a lot of useful information,&lt;br&gt;as well as some real-time examples of program behavior. You should take a look at it.&lt;br&gt;Implementing this game requires a plan for what to do about the cells at the edges of the&lt;br&gt;grid, since those cells don’t have a full complement of eight neighbors. The Wikipedia&lt;br&gt;entry does bring up this issue, and options range from simple to complex. For our&lt;br&gt;purposes, it is sufficient to assume that every square outside of the grid is empty (i.e., 0)&lt;br&gt;and will remain empty for the duration of the game.&lt;br&gt;(Much of the description above, and all the figures below, is borrowed from a textbook&lt;br&gt;by Cay Horstmann.)&lt;br&gt;Programming Assignment 6 - Game of Life, Part 1&lt;br&gt;Your solution is to be written using Python 3. Make sure you provide comments&lt;br&gt;including the file name, your name, and the date at the top of the file you submit.&lt;br&gt;Also make sure to include appropriate docstrings for all functions.&lt;br&gt;The names of your functions must exactly match the names given in this assignment.&lt;br&gt;The order of the parameters in your parameter list must exactly match the order&lt;br&gt;given in this assignment.&lt;br&gt;For any given problem below, you may want to write additional functions other&lt;br&gt;than those specified for your solution. That’s fine with us.&lt;br&gt;The  core  problem  to  be  solved  in  the  implementation  of  the  Game  of  Life  is  how  to&lt;br&gt;generate  the  next  grid  from  the  current  grid.   Your  task  is  to  write  a  function  called&lt;br&gt;nextGen  which  expects  only  one  argument.   That  argument  is  a  two-­‐dimensional&lt;br&gt;table  (i.e.,  a  list  of  lists)  with  m  rows  and  n  columns,  representing  the  current  grid.&lt;br&gt;The  elements  of  the  table  are  either  0  (empty  square)  or  1  (occupied  square).   You&lt;br&gt;may  assume  that  all  rows  have  the  same  number  of  elements.&lt;br&gt;Given  the  current  grid,  nextGen  computes  and  returns  (but  does  not  print)  a  new&lt;br&gt;next  grid  (without  altering  the  current  grid)  by  applying  the  simple  rules  provided&lt;br&gt;above.   For  example,  given  this  initial  grid:&lt;br&gt;glider = [[0,0,0,0,0,0,0],&lt;br&gt;[0,0,1,0,0,0,0],&lt;br&gt;[0,0,0,1,0,0,0],&lt;br&gt;[0,1,1,1,0,0,0],&lt;br&gt;[0,0,0,0,0,0,0],&lt;br&gt;[0,0,0,0,0,0,0]]&lt;br&gt;your function should work like this:&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; x = nextGen(glider)&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; x&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0],&lt;br&gt;[0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; y = nextGen(x)&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0],&lt;br&gt;[0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; z = nextGen(y)&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; z&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0],&lt;br&gt;[0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; q = nextGen(z)&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; q&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0],&lt;br&gt;[0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;If we formatted those results nicely, we’d see a sequence like this:&lt;br&gt;## generation 1&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 1, 0, 1, 0, 0, 0],&lt;br&gt;[0, 0, 1, 1, 0, 0, 0],&lt;br&gt;[0, 0, 1, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;## generation 2&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 1, 0, 0, 0],&lt;br&gt;[0, 1, 0, 1, 0, 0, 0],&lt;br&gt;[0, 0, 1, 1, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;## generation 3&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 1, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 1, 1, 0, 0],&lt;br&gt;[0, 0, 1, 1, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;## generation 4&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 1, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 1, 0, 0],&lt;br&gt;[0, 0, 1, 1, 1, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;These grids correspond to the generations in Figure 17. Note that the grid passed to your&lt;br&gt;function must remain unaltered:&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; glider&lt;br&gt;[[0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0],&lt;br&gt;[0, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0],&lt;br&gt;[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]&lt;br&gt;Where to do the assignment&lt;br&gt;You can do this assignment on your own computer, or in the labs. In either case, use the&lt;br&gt;IDLE development environment – that’s what we’ll use when we grade your program.&lt;br&gt;Put all the functions you created in a file called “prog67.py”. Save that file until you’ve&lt;br&gt;completed Programming Assignment 7.&lt;br&gt;Submitting the Assignment&lt;br&gt;Do not turn in this assignment by itself. Submit it with the work you do for Programming&lt;br&gt;Assignment 7.&lt;br&gt;Saving your work&lt;br&gt;If you are working in the lab, you will need to copy your program to your own flash-drive&lt;br&gt;or save the program to your workspace on SmartSite. To save it on flash-drive, plug the&lt;br&gt;flash-drive into the computer (your TAs or the staff in the labs can help you figure out&lt;br&gt;how), open the flash-drive, and copy your work to it by moving the folder with your files&lt;br&gt;from the Desktop onto the flash-drive. To copy the file to your SmartSite workspace, go&lt;br&gt;to Workspace, select Resources, and then use the Add button next to “My Workspace”.&lt;br&gt;Your TAs can help you with this if you run into trouble.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;&lt;br&gt;主要实现了细胞生成游戏。&lt;br&gt;需要实现游戏的逻辑代码，以及界面仿真代码。&lt;br&gt;&lt;br&gt;首先：&lt;br&gt;完成代码的逻辑编写。比如活细胞和无细胞在
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 CSCA08 Exercise 10</title>
    <link href="http://yoursite.com/2017/01/04/page85/"/>
    <id>http://yoursite.com/2017/01/04/page85/</id>
    <published>2017-01-04T14:23:23.000Z</published>
    <updated>2017-01-13T02:53:29.354Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;主要实现了读懂源码，编写对应的单元测试。&lt;br&gt;需要会使用 unittest 库。&lt;br&gt;&lt;br&gt;首先生成单元测试套件：class TestCartesianProduct(unittest.TestCase):&lt;br&gt;&lt;br&gt;然后在对源码的各个功能进行多方面的黑盒测试。&lt;br&gt;包括 空白表， 单个空白表， 多行表的合并测试。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSCA08 Exercise 10&lt;br&gt;Due: December 1, 2016. 5:00pm&lt;br&gt;In our final exercise of the term, we’re going to be practicing writing UnitTests. The structure of the tests&lt;br&gt;isn’t really as important as the testing plan, but we get to test both.&lt;br&gt;What to Test&lt;br&gt;We wanted to come up with a function for you to test that had a bit of everything: loops, selection, lists,&lt;br&gt;strings, dictionaries, objects, etc. But we had a bit of a conundrum. We wanted something complicated&lt;br&gt;enough to be interesting, but knew you were busy with your assignment, and didn’t want everyone to have&lt;br&gt;to spend lots of time writing a new function in order to test it.&lt;br&gt;That’s when it hit us. You’re already writing a function that you’ll probably want to test anyway…&lt;br&gt;cartesian product! It’s got everything we need, you already have to write it, and now it can help you test&lt;br&gt;your own code for A2. (A pretty smart move if I do say so myself).&lt;br&gt;How to Start&lt;br&gt;Before you start writing any code, you should think about coverage testing, and how we came up with a&lt;br&gt;test plan in lecture. Figure out all of the parameters, and the important ranges they fall into. Then write one&lt;br&gt;test for each possible combination of ranges. The goal here is to find one example test case for all possible&lt;br&gt;regions of your testing space.&lt;br&gt;Most of your actual tests will probably involve code that looks like this (now do you see why we made you&lt;br&gt;write set dict and get dict?&lt;br&gt;d1 = {…}&lt;br&gt;d2 = {…}&lt;br&gt;t1 = Table()&lt;br&gt;t2 = Table()&lt;br&gt;t1.set_dict(d1)&lt;br&gt;t2.set_dict(d2)&lt;br&gt;result_table = squeal.cartesian_product(t1, t2)&lt;br&gt;result_dict = result_table.get_dict()&lt;br&gt;expected_dict = {…}&lt;br&gt;self.assertEqual(result_dict, expected_dict)&lt;br&gt;What to Do&lt;br&gt;In a file called ex10.py, you should write a UnitTest to thoroughly test cartesian product. Your tests will&lt;br&gt;actually be run on a version of the code that I have written. Therefore, you will be doing black box testing&lt;br&gt;(you don’t know if I implemented the cartesian product or the Table class in the same way you will… in&lt;br&gt;fact, you can bet that I probably won’t). My cartesian product function will be in a file called squeal.py,&lt;br&gt;and my Table class will be in a file called database.py. Both will be placed into the same directory as your&lt;br&gt;UnitTest. We’ve provided you with some starter code, just to make sure you can access everything correctly.&lt;br&gt;What to Submit&lt;br&gt;Submit your ex10.py file to MarkUs as usual. Your UnitTest methods do not need any DocStrings, and&lt;br&gt;unless you’re doing something particularly unusual, you probably don’t need any internal comments either.&lt;br&gt;However, your method names and error messages should be descriptive enough to properly explain what&lt;br&gt;each test case does and why it’s useful. Remember that writing frivolous test cases is no better than missing&lt;br&gt;useful ones.&lt;br&gt;1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;主要实现了读懂源码，编写对应的单元测试。&lt;br&gt;需要会使用 unittest 库。&lt;br&gt;&lt;br&gt;首先生成单元测试套件：class TestCartes
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Introduction to Python</title>
    <link href="http://yoursite.com/2017/01/03/page84/"/>
    <id>http://yoursite.com/2017/01/03/page84/</id>
    <published>2017-01-03T03:53:21.000Z</published>
    <updated>2017-01-13T02:47:21.908Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;主要实现了利用三种方式来生成密码。&lt;br&gt;方法一： 随机法，前三位从A-Z生成，后三位从0-9生成。&lt;br&gt;方法二：右旋法，即参照ACSII码表来生成，比如A转换成D.&lt;br&gt;方法三：藏尾法，即输入一句话，从句子中的每一个单词的最后一位组成密码。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Write a Python program that generates passwords in three different ways.&lt;br&gt;a)Generate a random 6 character password. The first 3 characters must be capital letters (A – Z) and the second 3 characters must be numeric characters (0 – 9).&lt;br&gt;&lt;br&gt;b)Enter a secret word and then specify an amount of ‘right shift’ of the characters to encrypt your word. This simple method to encrypt data is attributed to Julius Caesar, the Roman Emperor. (If you are interested, you may like to read the following… &lt;a href=&quot;http://en.wikipedia.org/wiki/Caesar_cipher&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://en.wikipedia.org/wiki/Caesar_cipher&lt;/a&gt;). This method takes each character in a message and replaces it with one which is a certain distance (offset) along the alphabet from it (moving right). For example: 1 2 3 4 5 6 7 8 9 . . . . . A B C D E F G H I J K L M . . . +3 A B C D E F G H I J . . . If the offset is 3 then A becomes D, B becomes E, C becomes F etc. In this case the word DIG encrypts to GLJ. In order to decrypt the word/string, simply offset by the same amount moving in the opposite direction (i.e. moving left). Instead of restricting the cipher to the alphabetic characters only, we will use all of the printable ASCII characters. That is, all the characters from ASCII 32 (Space) to ASCII 126 (~).&lt;br&gt;&lt;br&gt; You will need to use the following two functions - ord(c) Given c, a string of length one ord(c), returns an integer representing the value of the string. For example: ord(‘a’) returns the integer 97. chr(i) Returns a string of one character whose ASCII code is the integer i. For example: chr(97) returns the string ‘a’.&lt;br&gt;c)Enter a secret sentence and create a password by taking the last letter of each word.&lt;br&gt;&lt;br&gt;Write a menu driven program called yourId_encryptor.py that will allow the user to enter commands and process these commands until the quit command is entered.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;主要实现了利用三种方式来生成密码。&lt;br&gt;方法一： 随机法，前三位从A-Z生成，后三位从0-9生成。&lt;br&gt;方法二：右旋法，即参照ACSII码表来生成，
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Introduction to Recursion</title>
    <link href="http://yoursite.com/2017/01/02/page83/"/>
    <id>http://yoursite.com/2017/01/02/page83/</id>
    <published>2017-01-02T14:43:32.000Z</published>
    <updated>2017-01-13T02:47:10.695Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;主要目的：&lt;br&gt;1、练习使用递归方法&lt;br&gt;2、练习命令行参数的使用&lt;br&gt;3、练习文件操作&lt;br&gt;&lt;br&gt;实现方法：&lt;br&gt;1、从输入的参数读取目录字符串&lt;br&gt;2、搜索该目录下的所有文件和文件夹&lt;br&gt;3、递归调用搜索该目录下的子文件夹&lt;br&gt;4、直到搜索完所有的文件&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Prof Jeff Johnson   CS 110&lt;br&gt;Lab 7: Introduction to Recursion (50 points)&lt;br&gt;Objectives&lt;br&gt;• Practice writing recursive functions&lt;br&gt;• Introduction to command-line parameters&lt;br&gt;• Practice coding file operations&lt;br&gt;Recursive Directory Traversal&lt;br&gt;For this lab, you will create a python program (recursive_dir_traversal.py) that will&lt;br&gt;allow the user to provide the path of a directory to your program as a command line parameter.&lt;br&gt;Your program must display the total number of python files and the total number of all files in that&lt;br&gt;directory, its subdirectories, their subdirectories, and so on.&lt;br&gt;For example, the user may type the following at the terminal:&lt;br&gt;$&amp;gt; python3 recursive_dir_traversal.py /home/alark/cs110/labs/&lt;br&gt;Your program must do the following:&lt;br&gt;• Read in the command line parameters and get the user-provided path.&lt;br&gt;• Write a recursive function that takes in the path as the input.&lt;br&gt;• In the recursive function, you have to decide whether the contents of the path provided in the&lt;br&gt;form of a string are a file or a directory. For example, if the user provides the path as&lt;br&gt;/home/alark/cs110/labs/lab1/lab1.py, the provided ‘path’ is actually a file.&lt;br&gt;Alternatively, /home/alark/cs110/labs/lab1/ is a directory. Use the built-in function&lt;br&gt;os.path.isfile(path) in your program to identify whether a path is a file or a directory.&lt;br&gt;• If the path is a file, check if it is a python file. Use a string function for this. Increment the&lt;br&gt;counter for python files. If the file is not a python file, increment the count for all files but not&lt;br&gt;the count for python files. Remember, your program should count the total number of files in&lt;br&gt;the directory and all its subdirectories.&lt;br&gt;• If the path is a directory, obtain a list of all the files in that directory and call your recursive&lt;br&gt;function with every element in that list. Given a path, you can obtain the list of all the files in a&lt;br&gt;directory using files = os.listdir(path).&lt;br&gt;• At the end of the program, you must display the total number of python files and the total&lt;br&gt;number of files found.&lt;br&gt;Submit to your submit directory&lt;br&gt;Using CyberDuck or your favorite file transfer program, make a directory for lab7 in your submit&lt;br&gt;directory and upload:&lt;br&gt;• recursive_dir_traversal.py&lt;br&gt;• README.txt (a text description of how your program works)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;低级难度&lt;br&gt;&lt;br&gt;主要目的：&lt;br&gt;1、练习使用递归方法&lt;br&gt;2、练习命令行参数的使用&lt;br&gt;3、练习文件操作&lt;br&gt;&lt;br&gt;实现方法：&lt;br&gt;1、从输入的参数
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python代写 Computer Project 11</title>
    <link href="http://yoursite.com/2017/01/01/page82/"/>
    <id>http://yoursite.com/2017/01/01/page82/</id>
    <published>2017-01-01T06:23:36.000Z</published>
    <updated>2017-01-13T02:46:58.330Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;主要实现了利用两个class（student，grade）来存储学生成绩等信息。&lt;br&gt;Class Grade：&lt;br&gt;实现方法：&lt;br&gt;&lt;strong&gt;str&lt;/strong&gt;，&lt;strong&gt;repr&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Class Student：&lt;br&gt;实现方法：&lt;br&gt;add_grade，calculate_grade，&lt;strong&gt;str&lt;/strong&gt;，&lt;strong&gt;repr&lt;/strong&gt;，&lt;strong&gt;gt&lt;/strong&gt;，&lt;strong&gt;lt&lt;/strong&gt;，&lt;strong&gt;eq&lt;/strong&gt;&lt;br&gt;完成两个类之后，需要完成测试文件，和app应用文件来调用这两个class。&lt;br&gt;app文件：&lt;br&gt;读取对应的student文件，存入相应的类。&lt;br&gt;存所有的student 实例，并且打印出来。&lt;br&gt;test文件：&lt;br&gt;用于测试以上所有的方法。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE 231  Fall 2016&lt;br&gt;Computer Project #11&lt;br&gt;(Update 12/4: clarified file prompting for proj11-app.py. Update 12/2: clarified Grade &lt;strong&gt;init&lt;/strong&gt; and&lt;br&gt;Student &lt;strong&gt;str&lt;/strong&gt; requirements. Update 11/30: clarified specifications of &lt;strong&gt;init&lt;/strong&gt; and &lt;strong&gt;str&lt;/strong&gt; and added a&lt;br&gt;note about the sample test file).&lt;br&gt;Assignment Overview&lt;br&gt;This assignment focuses on the implementation of two Python classes to store grades of students in a&lt;br&gt;class.&lt;br&gt;It is worth 55 points (5.5% of course grade) and must be completed no later than 11:59 PM on Tuesday,&lt;br&gt;December 6.&lt;br&gt;Assignment Specifications&lt;br&gt;You will develop “Student” and “Grade” classes and implement all the methods described in the&lt;br&gt;following section.&lt;br&gt;You will demonstrate that your implementation of the classes are correct by developing a program&lt;br&gt;which serves as a test bed for that class.&lt;br&gt;You will develop an application program which uses those classes to read “students.txt” and “grades.txt”&lt;br&gt;files and store their data in instances of Student and Grade classes.&lt;br&gt;Assignment Deliverables&lt;br&gt;The deliverables for this assignment are the following files:&lt;br&gt;classes.py  – the source code for your Student and Grade classes&lt;br&gt;proj11-test.py – the source code for your test program&lt;br&gt;proj11-app.py – the source code for your application program&lt;br&gt;Be sure to use the specified file names and submit them for grading via the handin system before the&lt;br&gt;project deadline.&lt;br&gt;Specifications for Class Grade&lt;br&gt;1. The constructor (method &lt;strong&gt;init&lt;/strong&gt;) will accept 3 values as parameters, name of the&lt;br&gt;assignment (string), grade and assignment weight (floats). All three parameters must have&lt;br&gt;default values—you choose appropriate ones. Also, the attributes cannot be private because you&lt;br&gt;need to access them in the Student class. That is, do not use double underscores in your names,&lt;br&gt;i.e. do not use an attribute name such as self.&lt;strong&gt;name.&lt;br&gt;2. The string method (&lt;/strong&gt;str&lt;strong&gt;) and representation method (&lt;/strong&gt;repr&lt;strong&gt;) should return a string&lt;br&gt;that includes the name, grade and weight of the Grade object in one line.&lt;br&gt;Specifications for Class Student&lt;br&gt;1. The constructor (method &lt;/strong&gt;init&lt;strong&gt;) will accept 4 values as parameters, student id (int), first&lt;br&gt;name (string), last name (string), and a list of all the grade objects for that student. All three&lt;br&gt;parameters must have default values—you choose appropriate ones, but the appropriate default&lt;br&gt;value for a list parameter is None, not an empty list ([]).&lt;br&gt;2. add_grade method should take a Grade object as a parameter and append it to a list of grades&lt;br&gt;for that student.&lt;br&gt;3. calculate_grade should multiply all the grade points of the student by their weight and&lt;br&gt;return the final course grade. (Each Grade object in the list has a value and weight that should be&lt;br&gt;multiplied together. The sum of all the calculations results the final weighted grade of the student&lt;br&gt;in the course)&lt;br&gt;4. The string method (&lt;/strong&gt;str&lt;strong&gt;) and representation method (&lt;/strong&gt;repr&lt;strong&gt;) should return a string&lt;br&gt;that has the student’s name (with last name first with a comma between the last name and first&lt;br&gt;name) includes all the grades of the student. This method must call the &lt;/strong&gt;str&lt;strong&gt; method of the&lt;br&gt;Grade objects. Note that implicitly calling the &lt;/strong&gt;str&lt;strong&gt; method is fine such as str() or&lt;br&gt;format(), but do not access the individual attributes such as grade.name.&lt;br&gt;5. &lt;/strong&gt;gt&lt;strong&gt;, &lt;/strong&gt;lt&lt;strong&gt; and &lt;/strong&gt;eq&lt;strong&gt; methods should compare the final grades of two students&lt;br&gt;together.&lt;br&gt;Note that you can use calculate_grade method to calculate the final grade of two students.&lt;br&gt;Never use “==” to check for equality of two float numbers (because floats are approximations&lt;br&gt;of real numbers). Instead, find the absolute value of the difference of two numbers; if the&lt;br&gt;difference is less than epsilon (a very small number such as 10**-6), the floats are equal to&lt;br&gt;each other (that is they are close enough to consider them to be equal). Python has an absolute&lt;br&gt;value function: abs()&lt;br&gt;Please note that you may wish to use function “print” to display various items as you are developing&lt;br&gt;your implementation of the class. However, all invocations of function “print” must be removed from&lt;br&gt;the final version of your classes (or at least turned into comments).&lt;br&gt;Hint: check the “Student” class in page 546 of the book for reference.&lt;br&gt;Specifications for the Test Program&lt;br&gt;1. You will develop a program to serve as a test bed for classes. That is, the only purpose of the&lt;br&gt;program is to demonstrate that each method of your “Student” and “Grade” classes is implemented&lt;br&gt;correctly. The source code for your test bed will be contained in the file named “proj11-test.py”. That&lt;br&gt;file will import “classes.py”. A file named “proj11-test.py” is provided as a starting template.&lt;br&gt;2. Your test bed will not perform any input operations. Instead, all test cases will be embedded in the&lt;br&gt;program itself.&lt;br&gt;3. The output produced by your test bed must be appropriately labeled so that the reader can understand&lt;br&gt;the purpose and result of each test case without examining the source code. For example, when&lt;br&gt;demonstrating &lt;/strong&gt;lt&lt;strong&gt; you might print “Demonstrating Fred &amp;lt; Mary” followed by&lt;br&gt;print(Fred&amp;lt;Mary)&lt;br&gt;Specifications for the Application Program&lt;br&gt;1. You will develop an application program which uses both classes to solve the problem described&lt;br&gt;below.&lt;br&gt;The source code for your application program will be contained in the file named “proj11-app.py”. That&lt;br&gt;file will import “classes.py”.&lt;br&gt;2. The program will attempt to access the files named “students.txt” and “grades.txt”. If any of the&lt;br&gt;input files cannot be opened, the program will display an appropriate message and halt. (Since the first&lt;br&gt;posted version of this document didn’t specify that the program must prompt for these two file names,&lt;br&gt;you have the option of prompting for them or not. However, if you prompt for them, our test program&lt;br&gt;will provide the name grades.txt to the first prompt and students.txt to the second prompt.)&lt;br&gt;3. The grades.txt file will contain three or more lines. The first line contains the weight of each&lt;br&gt;assignment, the second line contains the labels and the name of the assignments. Line 3 and subsequent&lt;br&gt;lines contain grade information for a student. Each line has a student id and all the grades of a student.&lt;br&gt;The information of each assignment should be stored in an instance of “Grade” class. A list of Grade&lt;br&gt;objects should be passed to the constructor of “Student” class.&lt;br&gt;4. The students.txt file will contain one or more lines, where each line contains the information of a&lt;br&gt;student. Each line has an id, first name and last name. That information should be stored in an instance&lt;br&gt;of “Student” class along with the list of “Grade” objects explained above.&lt;br&gt;5. The application should store all “Student” objects in a list and should print them ( print(student) ) like&lt;br&gt;the sample output provided below.&lt;br&gt;6. The application should print the class average at the end.&lt;br&gt;Assignment Notes&lt;br&gt;1. You would be wise to develop your implementation of “Student” and “Grade” classes and your test&lt;br&gt;program incrementally and in parallel. That is, implement one class method at a time and then test that&lt;br&gt;method by adding statements to your test program.&lt;br&gt;Clearly, the first class method which must be implemented and tested is the constructor (&lt;/strong&gt;init&lt;strong&gt;).&lt;br&gt;Perhaps the second class method to implement and test is &lt;/strong&gt;str__ so that you have a way to display&lt;br&gt;the value of an object of type “Student” and “Grade” using function “print”.&lt;br&gt;After implementing and testing those methods, you would continue to implement and test one method at&lt;br&gt;a time until you have completed the class.&lt;br&gt;Be sure to insert and test any necessary error handling at the appropriate time.&lt;br&gt;2. Approximately 60% of the 55 points available for the project will be allocated to the implementation&lt;br&gt;of “Student” and “Grade” classes, approximately 15% will be allocated to the test program, and&lt;br&gt;approximately 25% will be allocated to the application program.&lt;br&gt;Sample Output (Application file)&lt;br&gt;Hopper, Grace&lt;br&gt;proj01 : 75% 0.07&lt;br&gt;proj02 : 81% 0.08&lt;br&gt;proj03 : 91% 0.10&lt;br&gt;proj04 : 87% 0.10&lt;br&gt;proj05 : 73% 0.15&lt;br&gt;exam01 : 90% 0.20&lt;br&gt;exam02 : 86% 0.30&lt;br&gt;Final grade: 84%&lt;br&gt;Knuth, Donald&lt;br&gt;proj01 : 79% 0.07&lt;br&gt;proj02 : 73% 0.08&lt;br&gt;proj03 : 83% 0.10&lt;br&gt;proj04 : 87% 0.10&lt;br&gt;proj05 : 82% 0.15&lt;br&gt;exam01 : 97% 0.20&lt;br&gt;exam02 : 99% 0.30&lt;br&gt;Final grade: 89%&lt;br&gt;Goldberg, Adele&lt;br&gt;proj01 : 92% 0.07&lt;br&gt;proj02 : 82% 0.08&lt;br&gt;proj03 : 92% 0.10&lt;br&gt;proj04 : 83% 0.10&lt;br&gt;proj05 : 96% 0.15&lt;br&gt;exam01 : 92% 0.20&lt;br&gt;exam02 : 93% 0.30&lt;br&gt;Final grade: 91%&lt;br&gt;Kernighan, Brian&lt;br&gt;proj01 : 77% 0.07&lt;br&gt;proj02 : 95% 0.08&lt;br&gt;proj03 : 98% 0.10&lt;br&gt;proj04 : 87% 0.10&lt;br&gt;proj05 : 87% 0.15&lt;br&gt;exam01 : 85% 0.20&lt;br&gt;exam02 : 82% 0.30&lt;br&gt;Final grade: 86%&lt;br&gt;Liskov, Barbara&lt;br&gt;proj01 : 72% 0.07&lt;br&gt;proj02 : 82% 0.08&lt;br&gt;proj03 : 98% 0.10&lt;br&gt;proj04 : 90% 0.10&lt;br&gt;proj05 : 75% 0.15&lt;br&gt;exam01 : 98% 0.20&lt;br&gt;exam02 : 94% 0.30&lt;br&gt;Final grade: 89%&lt;br&gt;The class average is 88.17%&lt;br&gt;========================================&lt;br&gt;Educational Research&lt;br&gt;When you have completed the project insert the 5-line comment specified below.&lt;br&gt;For each of the following statements, please respond with how much they apply to your experience&lt;br&gt;completing the programming project, on the following scale:&lt;br&gt;1 = Strongly disagree / Not true of me at all&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4 = Neither agree nor disagree / Somewhat true of me&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7 = Strongly agree / Extremely true of me&lt;br&gt;&lt;strong&gt;&lt;em&gt;Please note that your responses to these questions will not affect your project grade, so please&lt;br&gt;answer as honestly as possible.&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;Q1: Upon completing the project, I felt proud/accomplished&lt;br&gt;Q2: While working on the project, I often felt frustrated/annoyed&lt;br&gt;Q3: While working on the project, I felt inadequate/stupid&lt;br&gt;Q4: Considering the difficulty of this course, the teacher, and my skills, I think I will do well in&lt;br&gt;this course.&lt;br&gt;Please insert your answers into the bottom of your project program as a comment, formatted exactly as&lt;br&gt;follows (so we can write a program to extract them).&lt;br&gt;# Questions&lt;br&gt;# Q1: 5&lt;br&gt;# Q2: 3&lt;br&gt;# Q3: 4&lt;br&gt;# Q4: 6&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;中级难度&lt;br&gt;主要实现了利用两个class（student，grade）来存储学生成绩等信息。&lt;br&gt;Class Grade：&lt;br&gt;实现方法：&lt;br&gt;&lt;strong
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C++代写 Assignment 2</title>
    <link href="http://yoursite.com/2016/12/30/page81/"/>
    <id>http://yoursite.com/2016/12/30/page81/</id>
    <published>2016-12-30T03:13:46.000Z</published>
    <updated>2017-01-12T04:47:57.524Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Assignment 2&lt;br&gt;Due:​​ Oct 14th (Friday) before 11:59 PM&lt;br&gt;1. Learning Goals&lt;br&gt;Learn how to&lt;br&gt;1. use associative containers like ​std::unordered_set​ and ​std::unordered_map&lt;br&gt;2. use iterators to iterate through associative containers&lt;br&gt;3. use ​algorithms​ that are available in the C++ Standard Library&lt;br&gt;4. pass command line arguments to a C++ program&lt;br&gt;5. partition a C++ program in header files (.hpp) and source files (.cpp)&lt;br&gt;6. read, understand, and use code written by other people&lt;br&gt;2. Description&lt;br&gt;In this assignment you’ll be doing the following:&lt;br&gt;1. Read a raw text file containing movie reviews and ratings.&lt;br&gt;2. Remove the punctuations and stopwords (e.g. is, and, the, etc.) from the reviews and&lt;br&gt;write the contents to a clean review file.&lt;br&gt;3. Associate a value for all words found in the clean reviews based on the average rating of&lt;br&gt;the word.&lt;br&gt;4. Using the map between the words and their associated values, rate reviews from&lt;br&gt;another file that doesn’t have any rating already.&lt;br&gt;5. Write the ratings of the reviews to an output file.&lt;br&gt;2.1. Clean the data&lt;br&gt;The raw data with the reviews and the rating will be present in a file named&lt;br&gt;rawReviewRatings.txt​. Every review is given a rating between 0 - 4 (both inclusive). The&lt;br&gt;following are interpretation of the rating values:&lt;br&gt;● 0 = Negative&lt;br&gt;● 1 = Somewhat Negative&lt;br&gt;● 2 = Neutral&lt;br&gt;● 3 = Somewhat Positive&lt;br&gt;● 4 = Positive&lt;br&gt;Each line of review follows the following format:&lt;br&gt;&lt;rating&gt; &lt;review&gt;&lt;br&gt;Example:&lt;br&gt;4 The Jungle Book is awesome!&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;where 4 is the rating and the text “The Jungle Book is awesome!” is the review.&lt;br&gt;Now, your first task is to read the contents of this file and ​clean the data!&lt;br&gt;The following steps needs to be performed in the same order for cleaning the data:&lt;br&gt;1. Read the raw reviews from an input file. e.g. ​rawReviewRatings.txt&lt;br&gt;2. Replace the hyphens in every line of text with spaces.&lt;br&gt;e.g. If the review contains the word “awe-inspiring”, then it should be split into 2 words&lt;br&gt;namely “awe” and “inspiring”&lt;br&gt;3. Split each line of text into multiple words using the space character as the delimiter.&lt;br&gt;e.g. “The Jungle Book is awesome!” becomes | “The” | “Jungle” | “Book” | “is” |&lt;br&gt;“awesome!” |&lt;br&gt;4. Remove the punctuation marks from the words.&lt;br&gt;e.g. “awesome!” becomes “awesome” and “!” becomes “”&lt;br&gt;5. If there are any trailing/leading whitespaces, then remove them. Remember that the&lt;br&gt;space character (‘ ’), tab (‘\t’), newline (‘\n’), etc. are considered as whitespaces. For a&lt;br&gt;complete list of whitespace characters ​this​.&lt;br&gt;e.g. “zootopia ” becomes “zootopia”, “hello\t” becomes “hello”, and “world\n” becomes&lt;br&gt;“world”&lt;br&gt;6. Remove the empty words. i.e. words with length == 0.&lt;br&gt;7. Remove single lettered words. i.e. words with length == 1.&lt;br&gt;8. Remove stopwords. e.g. is, and, the, etc. The list of stopwords can be found in the file&lt;br&gt;stopwords.txt&lt;br&gt;9. Write the contents of the clean data to a file named ​cleanReviewRatings.txt​.&lt;br&gt;2.2. Fill the dictionary&lt;br&gt;Using the ​cleanReviewRatings.txt file, create a map/dictionary for every word that is found in&lt;br&gt;this file. The dictionary is of type&lt;br&gt;​&lt;br&gt;std::unordered_map&lt;string, std::pair&lt;long,=&quot;&quot; long=&quot;&quot;&gt;&amp;gt;.&lt;br&gt;We associate a pair of values for each word namely its total_rating and its total_count. For&lt;br&gt;example, the word “fantastic” has occurred 3 times in the file ​cleanReviewRatings.txt with&lt;br&gt;associated ratings of 3, 4, and 3 (see the last 3 lines in the file). Therefore the word “fantastic”&lt;br&gt;gets a total_rating of 10 (i.e. 3 + 4 + 3 = 10) and a total_count of 3 since it had occurred 3 times&lt;br&gt;in the file. In a similar way, the other entries in this map are filled up as shown below. You may&lt;br&gt;want to read about a ​std::pair​ to understand more about how this map is organized.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;word total_rating total_count&lt;br&gt;fantastic  10  3&lt;br&gt;Zootopia  3  1&lt;br&gt;Dory  1  1&lt;br&gt;Finding  1  1&lt;br&gt;worst  0  1&lt;br&gt;The  6  2&lt;br&gt;inspiring  2  1&lt;br&gt;Jungle  8  2&lt;br&gt;Book  8  2&lt;br&gt;good  1  1&lt;br&gt;Jack  0  1&lt;br&gt;awesome  4  1&lt;br&gt;Lion  5  2&lt;br&gt;King  5  2&lt;br&gt;awe  2  1&lt;br&gt;Jill  0  1&lt;br&gt;2.3. Rate new reviews&lt;br&gt;Using the map/dictionary that we created in the previous step, we are going to read new unrated&lt;br&gt;reviews from a file (e.g. ​rawReviews.txt​) and predict a rating for each review in this file. The&lt;br&gt;predicted rating for each review is written to an output file named ​ratings.txt​.&lt;br&gt;How do we predict the ratings for the unrated reviews?&lt;br&gt;1. Read the input file with the unrated raw reviews (e.g. ​rawReviews.txt​).&lt;br&gt;2. Clean the data and produce an output file named ​cleanReviews.txt​. The process for&lt;br&gt;cleaning the data is exactly the same as we did in step 2.1.&lt;br&gt;3. Rate each review by finding the rating for each word from the map/dictionary that we&lt;br&gt;created in step 2.2. The rating for a line of review is the average value of the rating of all&lt;br&gt;the words in the review. If some word in this unrated review is not found in the&lt;br&gt;map/dictionary, then that word is given a neutral rating of 2. If a review is empty (i.e. the&lt;br&gt;review contains no words in it), then such a review is also given a neutral rating of 2.&lt;br&gt;e.g. Let see how we computed the rating for the 2nd review in ​cleanReviews.txt (i.e.&lt;br&gt;“The Lion King fantastic”). We lookup the map/dictionary that we created before and get&lt;br&gt;the average rating for each word in this review. The average ratings of each word in this&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;review is shown below:&lt;br&gt;The: 6/2 = 3&lt;br&gt;Lion: 5/2 = 2.5&lt;br&gt;King: 5/2 = 2.5&lt;br&gt;fantastic: 10/3 = 3.33&lt;br&gt;Based on these individual values, this line gets and average review of 2.83 as shown in&lt;br&gt;the file ​ratings.txt​.&lt;br&gt;Rating for this line = (3 + 2.5 + 2.5 + 3.33) / 4 = 2.83&lt;br&gt;We are dividing by 4 since this review contains 4 words in total.&lt;br&gt;Another example: “Finding Nemo great”&lt;br&gt;Finding: 1&lt;br&gt;Nemo: 2 (because it is NOT found in the map)&lt;br&gt;great: 2 (because it is also NOT found in the map)&lt;br&gt;Rating for this line = (1 + 2 + 2) / 3 = 1.67&lt;br&gt;4. Write the ratings for all the reviews to an output file named ​ratings.txt​.&lt;br&gt;A high-level process diagram of the steps explained in 2.1 - 2.3 is shown. Hope this&lt;br&gt;visualization helps you to understand the idea in a better way! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;That’s it! Now, after completing this step you may pat yourself on the back for doing an amazing&lt;br&gt;job with this assignment! :) Also, if you have not taken Artificial Intelligence or Machine Learning&lt;br&gt;before then you have just now completed your first exercise in Machine Learning. You just&lt;br&gt;created a program that may predict the ratings of movie reviews based on some learning it did&lt;br&gt;before based on some reviews that already had ratings associated with them. Well, even though&lt;br&gt;our algorithm is very simple, this is the basic idea behind Machine Learning. Newcomers,&lt;br&gt;welcome to the world of Artificial Intelligence! :)&lt;br&gt;3. Sample Output&lt;br&gt;If your program runs correctly without any errors, then NO OUTPUT will be written to the&lt;br&gt;console. If any input/output file cannot be opened, only then your program writes some error&lt;br&gt;messages to the console. All error handling is already taken care of in the file ​main.cpp​.&lt;br&gt;3.1. Small Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatings.txt&lt;br&gt;Unrated Review File: ​rawReviews.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;3.2. “Big” Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatingsBig.txt&lt;br&gt;Unrated Review File: ​rawReviewsBig.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;4. Important Details&lt;br&gt;1. The code for this assignment is split across 5 files.&lt;br&gt;a. main.cpp&lt;br&gt;b. a2.hpp&lt;br&gt;c. a2.cpp​ (This is the ONLY file you should modify!)&lt;br&gt;d. trim.hpp&lt;br&gt;e. trim.cpp&lt;br&gt;The .hpp files are the header files which contain only the declaration of the functions and&lt;br&gt;the .cpp files are the source files which contain the implementation of these functions. If&lt;br&gt;you want to understand more about why we have separate header and source files, then&lt;br&gt;maybe you should read ​this​.&lt;br&gt;2. Take some time to read the source code starting from the main() function that is present&lt;br&gt;inside the file main.cpp.&lt;br&gt;3. All the code you write for this assignment will only be inside the file ​a2.cpp. You should&lt;br&gt;not perform any file IO, print to stdout, or print to stderr in a2.cpp.&lt;br&gt;4. The files trim.hpp and trim.cpp are provided only to help you with trimming the&lt;br&gt;whitespaces in strings since doing so in C++ is not so easy as it’s in Java. You may read&lt;br&gt;these files to find out how to trim strings for this assignment.&lt;br&gt;5. You should use the following command to ​compile​​ your program.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;$ g++ &lt;em&gt;.cpp -std=c++11&lt;br&gt;where &lt;/em&gt;.cpp means all the .cpp files are to be compiled. You need not mention the&lt;br&gt;names of the .hpp files since they are included from within the .cpp files. The option&lt;br&gt;“-std=c++11” informs the compiler that our may contain C++11 features (e.g.&lt;br&gt;std::unordered_map was introduced only in C++11).&lt;br&gt;6. Your program takes the two files ​rawReviewRatings.txt and ​rawReviews.txt as ​command&lt;br&gt;line arguments​. ​​You should run your program as shown below:&lt;br&gt;$ ./a.out rawReviewRatings.txt rawReviews.txt&lt;br&gt;If you don’t give these 2 command line arguments to your program, then the following&lt;br&gt;error message will be printed. This error handling is already handled for you in main.cpp.&lt;br&gt;$ ./a.out&lt;br&gt;USAGE: ./a.out &lt;reviewratingsfile&gt; &lt;reviewsfile&gt;&lt;br&gt;7. If your program works correctly without any errors, then nothing is printed to the console.&lt;br&gt;Only the three output files cleanReviewRatings.txt, cleanReviews.txt and ratings.txt will&lt;br&gt;be produced. You may even try compiling and running your program before adding any&lt;br&gt;code in a2.cpp to see if these 3 output files are produced. The contents of these output&lt;br&gt;files will be empty until the methods in a2.cpp are implemented.&lt;br&gt;8. You should NOT add any new functions/methods in a2.cpp.&lt;br&gt;9. You ​SHOULD NOT MODIFY​​ any of the following in a2.cpp:&lt;br&gt;a. Names of the functions&lt;br&gt;b. Names and types of the parameters to a function.&lt;br&gt;c. Return types of the functions.&lt;br&gt;10.An approximate number of lines of code is given for each function in a2.cpp. These are&lt;br&gt;the number of lines for each function in Gerald’s implementation of a2.cpp. We have&lt;br&gt;provided this information since it may help you to see how little code you may write if you&lt;br&gt;make use of the C++ Standard Library effectively. This would help you to stop and think&lt;br&gt;for a while before you may write a lot of code by yourself and maybe later realize that&lt;br&gt;you could have used some functionality from the standard library to do the same thing&lt;br&gt;with little code and more effectively!&lt;br&gt;11.Updates to this specification that may be posted on piazza are also part of this&lt;br&gt;specification.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;5. Grading Scheme&lt;br&gt;Item  Grade&lt;br&gt;Correctness of your code  90&lt;br&gt;Code Style (indentation) &amp;amp;&lt;br&gt;Implementation Comments in a2.cpp&lt;br&gt;10&lt;br&gt;TOTAL  100&lt;br&gt;6. Submission&lt;br&gt;Submit ​ONLY your a2.cpp​​ file at the following location:&lt;br&gt;/p/course/cs368-gerald/public/handin/&lt;cslogin&gt;/a2&lt;br&gt;Remember that ​no late work is accepted​​ in this course and there are no exceptions!&lt;br&gt;Hope you have a great time learning and coding associative containers and&lt;br&gt;algorithms using the C++ Standard Library! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/cslogin&gt;&lt;/reviewsfile&gt;&lt;/reviewratingsfile&gt;&lt;/string,&gt;&lt;/review&gt;&lt;/rating&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;s
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写 Assignment 2</title>
    <link href="http://yoursite.com/2016/12/30/page80/"/>
    <id>http://yoursite.com/2016/12/30/page80/</id>
    <published>2016-12-30T03:13:46.000Z</published>
    <updated>2017-01-12T04:47:57.524Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Assignment 2&lt;br&gt;Due:​​ Oct 14th (Friday) before 11:59 PM&lt;br&gt;1. Learning Goals&lt;br&gt;Learn how to&lt;br&gt;1. use associative containers like ​std::unordered_set​ and ​std::unordered_map&lt;br&gt;2. use iterators to iterate through associative containers&lt;br&gt;3. use ​algorithms​ that are available in the C++ Standard Library&lt;br&gt;4. pass command line arguments to a C++ program&lt;br&gt;5. partition a C++ program in header files (.hpp) and source files (.cpp)&lt;br&gt;6. read, understand, and use code written by other people&lt;br&gt;2. Description&lt;br&gt;In this assignment you’ll be doing the following:&lt;br&gt;1. Read a raw text file containing movie reviews and ratings.&lt;br&gt;2. Remove the punctuations and stopwords (e.g. is, and, the, etc.) from the reviews and&lt;br&gt;write the contents to a clean review file.&lt;br&gt;3. Associate a value for all words found in the clean reviews based on the average rating of&lt;br&gt;the word.&lt;br&gt;4. Using the map between the words and their associated values, rate reviews from&lt;br&gt;another file that doesn’t have any rating already.&lt;br&gt;5. Write the ratings of the reviews to an output file.&lt;br&gt;2.1. Clean the data&lt;br&gt;The raw data with the reviews and the rating will be present in a file named&lt;br&gt;rawReviewRatings.txt​. Every review is given a rating between 0 - 4 (both inclusive). The&lt;br&gt;following are interpretation of the rating values:&lt;br&gt;● 0 = Negative&lt;br&gt;● 1 = Somewhat Negative&lt;br&gt;● 2 = Neutral&lt;br&gt;● 3 = Somewhat Positive&lt;br&gt;● 4 = Positive&lt;br&gt;Each line of review follows the following format:&lt;br&gt;&lt;rating&gt; &lt;review&gt;&lt;br&gt;Example:&lt;br&gt;4 The Jungle Book is awesome!&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;where 4 is the rating and the text “The Jungle Book is awesome!” is the review.&lt;br&gt;Now, your first task is to read the contents of this file and ​clean the data!&lt;br&gt;The following steps needs to be performed in the same order for cleaning the data:&lt;br&gt;1. Read the raw reviews from an input file. e.g. ​rawReviewRatings.txt&lt;br&gt;2. Replace the hyphens in every line of text with spaces.&lt;br&gt;e.g. If the review contains the word “awe-inspiring”, then it should be split into 2 words&lt;br&gt;namely “awe” and “inspiring”&lt;br&gt;3. Split each line of text into multiple words using the space character as the delimiter.&lt;br&gt;e.g. “The Jungle Book is awesome!” becomes | “The” | “Jungle” | “Book” | “is” |&lt;br&gt;“awesome!” |&lt;br&gt;4. Remove the punctuation marks from the words.&lt;br&gt;e.g. “awesome!” becomes “awesome” and “!” becomes “”&lt;br&gt;5. If there are any trailing/leading whitespaces, then remove them. Remember that the&lt;br&gt;space character (‘ ’), tab (‘\t’), newline (‘\n’), etc. are considered as whitespaces. For a&lt;br&gt;complete list of whitespace characters ​this​.&lt;br&gt;e.g. “zootopia ” becomes “zootopia”, “hello\t” becomes “hello”, and “world\n” becomes&lt;br&gt;“world”&lt;br&gt;6. Remove the empty words. i.e. words with length == 0.&lt;br&gt;7. Remove single lettered words. i.e. words with length == 1.&lt;br&gt;8. Remove stopwords. e.g. is, and, the, etc. The list of stopwords can be found in the file&lt;br&gt;stopwords.txt&lt;br&gt;9. Write the contents of the clean data to a file named ​cleanReviewRatings.txt​.&lt;br&gt;2.2. Fill the dictionary&lt;br&gt;Using the ​cleanReviewRatings.txt file, create a map/dictionary for every word that is found in&lt;br&gt;this file. The dictionary is of type&lt;br&gt;​&lt;br&gt;std::unordered_map&lt;string, std::pair&lt;long,=&quot;&quot; long=&quot;&quot;&gt;&amp;gt;.&lt;br&gt;We associate a pair of values for each word namely its total_rating and its total_count. For&lt;br&gt;example, the word “fantastic” has occurred 3 times in the file ​cleanReviewRatings.txt with&lt;br&gt;associated ratings of 3, 4, and 3 (see the last 3 lines in the file). Therefore the word “fantastic”&lt;br&gt;gets a total_rating of 10 (i.e. 3 + 4 + 3 = 10) and a total_count of 3 since it had occurred 3 times&lt;br&gt;in the file. In a similar way, the other entries in this map are filled up as shown below. You may&lt;br&gt;want to read about a ​std::pair​ to understand more about how this map is organized.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;word total_rating total_count&lt;br&gt;fantastic  10  3&lt;br&gt;Zootopia  3  1&lt;br&gt;Dory  1  1&lt;br&gt;Finding  1  1&lt;br&gt;worst  0  1&lt;br&gt;The  6  2&lt;br&gt;inspiring  2  1&lt;br&gt;Jungle  8  2&lt;br&gt;Book  8  2&lt;br&gt;good  1  1&lt;br&gt;Jack  0  1&lt;br&gt;awesome  4  1&lt;br&gt;Lion  5  2&lt;br&gt;King  5  2&lt;br&gt;awe  2  1&lt;br&gt;Jill  0  1&lt;br&gt;2.3. Rate new reviews&lt;br&gt;Using the map/dictionary that we created in the previous step, we are going to read new unrated&lt;br&gt;reviews from a file (e.g. ​rawReviews.txt​) and predict a rating for each review in this file. The&lt;br&gt;predicted rating for each review is written to an output file named ​ratings.txt​.&lt;br&gt;How do we predict the ratings for the unrated reviews?&lt;br&gt;1. Read the input file with the unrated raw reviews (e.g. ​rawReviews.txt​).&lt;br&gt;2. Clean the data and produce an output file named ​cleanReviews.txt​. The process for&lt;br&gt;cleaning the data is exactly the same as we did in step 2.1.&lt;br&gt;3. Rate each review by finding the rating for each word from the map/dictionary that we&lt;br&gt;created in step 2.2. The rating for a line of review is the average value of the rating of all&lt;br&gt;the words in the review. If some word in this unrated review is not found in the&lt;br&gt;map/dictionary, then that word is given a neutral rating of 2. If a review is empty (i.e. the&lt;br&gt;review contains no words in it), then such a review is also given a neutral rating of 2.&lt;br&gt;e.g. Let see how we computed the rating for the 2nd review in ​cleanReviews.txt (i.e.&lt;br&gt;“The Lion King fantastic”). We lookup the map/dictionary that we created before and get&lt;br&gt;the average rating for each word in this review. The average ratings of each word in this&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;review is shown below:&lt;br&gt;The: 6/2 = 3&lt;br&gt;Lion: 5/2 = 2.5&lt;br&gt;King: 5/2 = 2.5&lt;br&gt;fantastic: 10/3 = 3.33&lt;br&gt;Based on these individual values, this line gets and average review of 2.83 as shown in&lt;br&gt;the file ​ratings.txt​.&lt;br&gt;Rating for this line = (3 + 2.5 + 2.5 + 3.33) / 4 = 2.83&lt;br&gt;We are dividing by 4 since this review contains 4 words in total.&lt;br&gt;Another example: “Finding Nemo great”&lt;br&gt;Finding: 1&lt;br&gt;Nemo: 2 (because it is NOT found in the map)&lt;br&gt;great: 2 (because it is also NOT found in the map)&lt;br&gt;Rating for this line = (1 + 2 + 2) / 3 = 1.67&lt;br&gt;4. Write the ratings for all the reviews to an output file named ​ratings.txt​.&lt;br&gt;A high-level process diagram of the steps explained in 2.1 - 2.3 is shown. Hope this&lt;br&gt;visualization helps you to understand the idea in a better way! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;That’s it! Now, after completing this step you may pat yourself on the back for doing an amazing&lt;br&gt;job with this assignment! :) Also, if you have not taken Artificial Intelligence or Machine Learning&lt;br&gt;before then you have just now completed your first exercise in Machine Learning. You just&lt;br&gt;created a program that may predict the ratings of movie reviews based on some learning it did&lt;br&gt;before based on some reviews that already had ratings associated with them. Well, even though&lt;br&gt;our algorithm is very simple, this is the basic idea behind Machine Learning. Newcomers,&lt;br&gt;welcome to the world of Artificial Intelligence! :)&lt;br&gt;3. Sample Output&lt;br&gt;If your program runs correctly without any errors, then NO OUTPUT will be written to the&lt;br&gt;console. If any input/output file cannot be opened, only then your program writes some error&lt;br&gt;messages to the console. All error handling is already taken care of in the file ​main.cpp​.&lt;br&gt;3.1. Small Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatings.txt&lt;br&gt;Unrated Review File: ​rawReviews.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;3.2. “Big” Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatingsBig.txt&lt;br&gt;Unrated Review File: ​rawReviewsBig.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;4. Important Details&lt;br&gt;1. The code for this assignment is split across 5 files.&lt;br&gt;a. main.cpp&lt;br&gt;b. a2.hpp&lt;br&gt;c. a2.cpp​ (This is the ONLY file you should modify!)&lt;br&gt;d. trim.hpp&lt;br&gt;e. trim.cpp&lt;br&gt;The .hpp files are the header files which contain only the declaration of the functions and&lt;br&gt;the .cpp files are the source files which contain the implementation of these functions. If&lt;br&gt;you want to understand more about why we have separate header and source files, then&lt;br&gt;maybe you should read ​this​.&lt;br&gt;2. Take some time to read the source code starting from the main() function that is present&lt;br&gt;inside the file main.cpp.&lt;br&gt;3. All the code you write for this assignment will only be inside the file ​a2.cpp. You should&lt;br&gt;not perform any file IO, print to stdout, or print to stderr in a2.cpp.&lt;br&gt;4. The files trim.hpp and trim.cpp are provided only to help you with trimming the&lt;br&gt;whitespaces in strings since doing so in C++ is not so easy as it’s in Java. You may read&lt;br&gt;these files to find out how to trim strings for this assignment.&lt;br&gt;5. You should use the following command to ​compile​​ your program.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;$ g++ &lt;em&gt;.cpp -std=c++11&lt;br&gt;where &lt;/em&gt;.cpp means all the .cpp files are to be compiled. You need not mention the&lt;br&gt;names of the .hpp files since they are included from within the .cpp files. The option&lt;br&gt;“-std=c++11” informs the compiler that our may contain C++11 features (e.g.&lt;br&gt;std::unordered_map was introduced only in C++11).&lt;br&gt;6. Your program takes the two files ​rawReviewRatings.txt and ​rawReviews.txt as ​command&lt;br&gt;line arguments​. ​​You should run your program as shown below:&lt;br&gt;$ ./a.out rawReviewRatings.txt rawReviews.txt&lt;br&gt;If you don’t give these 2 command line arguments to your program, then the following&lt;br&gt;error message will be printed. This error handling is already handled for you in main.cpp.&lt;br&gt;$ ./a.out&lt;br&gt;USAGE: ./a.out &lt;reviewratingsfile&gt; &lt;reviewsfile&gt;&lt;br&gt;7. If your program works correctly without any errors, then nothing is printed to the console.&lt;br&gt;Only the three output files cleanReviewRatings.txt, cleanReviews.txt and ratings.txt will&lt;br&gt;be produced. You may even try compiling and running your program before adding any&lt;br&gt;code in a2.cpp to see if these 3 output files are produced. The contents of these output&lt;br&gt;files will be empty until the methods in a2.cpp are implemented.&lt;br&gt;8. You should NOT add any new functions/methods in a2.cpp.&lt;br&gt;9. You ​SHOULD NOT MODIFY​​ any of the following in a2.cpp:&lt;br&gt;a. Names of the functions&lt;br&gt;b. Names and types of the parameters to a function.&lt;br&gt;c. Return types of the functions.&lt;br&gt;10.An approximate number of lines of code is given for each function in a2.cpp. These are&lt;br&gt;the number of lines for each function in Gerald’s implementation of a2.cpp. We have&lt;br&gt;provided this information since it may help you to see how little code you may write if you&lt;br&gt;make use of the C++ Standard Library effectively. This would help you to stop and think&lt;br&gt;for a while before you may write a lot of code by yourself and maybe later realize that&lt;br&gt;you could have used some functionality from the standard library to do the same thing&lt;br&gt;with little code and more effectively!&lt;br&gt;11.Updates to this specification that may be posted on piazza are also part of this&lt;br&gt;specification.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;5. Grading Scheme&lt;br&gt;Item  Grade&lt;br&gt;Correctness of your code  90&lt;br&gt;Code Style (indentation) &amp;amp;&lt;br&gt;Implementation Comments in a2.cpp&lt;br&gt;10&lt;br&gt;TOTAL  100&lt;br&gt;6. Submission&lt;br&gt;Submit ​ONLY your a2.cpp​​ file at the following location:&lt;br&gt;/p/course/cs368-gerald/public/handin/&lt;cslogin&gt;/a2&lt;br&gt;Remember that ​no late work is accepted​​ in this course and there are no exceptions!&lt;br&gt;Hope you have a great time learning and coding associative containers and&lt;br&gt;algorithms using the C++ Standard Library! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/cslogin&gt;&lt;/reviewsfile&gt;&lt;/reviewratingsfile&gt;&lt;/string,&gt;&lt;/review&gt;&lt;/rating&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;s
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 A Simple Student Management System</title>
    <link href="http://yoursite.com/2016/12/29/page79/"/>
    <id>http://yoursite.com/2016/12/29/page79/</id>
    <published>2016-12-29T04:43:26.000Z</published>
    <updated>2017-01-12T03:53:26.077Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;完成一个简单的学生管理系统，包括增删改查学信息的功能，保存到数据库，统计和记录学生成绩&lt;br&gt;等等相关操作，输入java入门级的作业&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 1&lt;br&gt;A Simple Student Management System&lt;br&gt;Due Date : 12 noon on Friday in Week 12 (21st Oct 2016)&lt;br&gt;Introduction&lt;br&gt;This assignment is worth 25% of the marks for your final assessment in this unit. Heavy penalties will&lt;br&gt;apply for late submission. This is an individual assignment and must be entirely your own work. You must&lt;br&gt;attribute the source of any part of your code which you have not written yourself. Please note the section on&lt;br&gt;plagiarism in this document.&lt;br&gt;The assignment must be done using the BlueJ environment. All user input to the system, and system&lt;br&gt;output to the user, must be done at the BlueJ terminal window. No other graphical interfaces are to be&lt;br&gt;used (nor assessed) in your program.&lt;br&gt;The Java source code for this assignment must be implemented according to the FIT9131 Java Coding&lt;br&gt;Standards.&lt;br&gt;Any points needing clarification should be discussed with your tutor in the tutorial class. You should not&lt;br&gt;make any assumptions about the program without consulting with your tutor.&lt;br&gt;Specification&lt;br&gt;For this assignment you are required to write a program that implements a simple Student Management&lt;br&gt;System for a very small, fictional, school. This section specifies the required functionality of the program.&lt;br&gt;The aim of the Student Management System is for a user (the school’s enrolment staff) to keep a database of&lt;br&gt;the students enrolled in various subjects in this fictional school. This school only offers three (3) subjects :&lt;br&gt;Computing, Maths, and English. The system will allow the user to add/delete students, enrol them in&lt;br&gt;subjects, and perform simple reports.&lt;br&gt;Even though this program is functionally very different from the program you wrote in Assignment 1, you&lt;br&gt;should be able to re-use much of your previous code here - if you have designed the classes/logic in your&lt;br&gt;previous program properly. This is one of the major benefits of an object-oriented program - the ability to&lt;br&gt;re-use classes.&lt;br&gt;The Student Management System should provide the following features :&lt;br&gt; maintains a list (using a Java Collection class) of Student objects&lt;br&gt;o each Student object represents a person who is allowed to enrol in the fictional school&lt;br&gt; maintains a fixed list of exactly 3 Subject objects&lt;br&gt;o each Subject object represents a subject which is available in the fictional school&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 2&lt;br&gt; enrol each student in a subject, or subjects (HD level)&lt;br&gt; lists the details of an existing student&lt;br&gt; produces a report of students based on some criteria&lt;br&gt; loads a list of students (with their enrolled subjects) from a text file&lt;br&gt; saves the list of current students (with their enrolled subjects) to a text file&lt;br&gt;You are to demonstrate the following programming techniques in your program :&lt;br&gt; reading/writing data from/to text files&lt;br&gt; using appropriate Java Collection class or classes to store data&lt;br&gt; using code to manipulate the data in the collection(s)&lt;br&gt; performing simple searches, filtered by some given criteria&lt;br&gt; using program constructs such as repetitions &amp;amp; selections&lt;br&gt; using appropriate classes to represent objects in the program&lt;br&gt;There will be a description of the “HD level” features later in this document (in the Grades section).&lt;br&gt;You are also required to produce a partial Test Strategy for your program.&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 3&lt;br&gt;Program Logic&lt;br&gt;When the Student Management System starts, it should automatically load a text file called&lt;br&gt;“students.txt” which contains details of all students currently stored in the system. The actual format&lt;br&gt;of this text file is described later in this document. The data loaded should be stored in some appropriate data&lt;br&gt;structures. No other reading from or writing to file is required while the program is in operation, until the&lt;br&gt;user chooses to exit, at which point the program saves all the data in memory back to the same text file&lt;br&gt;(students.txt).&lt;br&gt;In other words, the file I/O operations are performed automatically by the program, and require no&lt;br&gt;interactions with the user.&lt;br&gt;When the program is running, it should repeatedly display a menu with these options :&lt;br&gt;(1) Add new student&lt;br&gt;(2) Delete a student&lt;br&gt;(3) Find Student By Name&lt;br&gt;(4) List Students By Subject&lt;br&gt;(5) List All Students&lt;br&gt;(6) Exit System&lt;br&gt;Option (1) allows the user to add a new student into the database. The user should be asked for the student’s&lt;br&gt;details, plus what subject to “enrol” him/her in.&lt;br&gt;Option (2) allows the user to remove an existing student from the database.&lt;br&gt;Option (3) allows the user to find an existing student in the database. The user should be asked to enter a&lt;br&gt;name to search for. If a matching student is found, his/her details will be displayed.&lt;br&gt;Option (4) allows the user to display a list of students enrolled in a subject. The user should be asked for a&lt;br&gt;subject name; a list of all students (if any) enrolled in that subject should then be displayed.&lt;br&gt;Option (5) allows the user to display a list of all students enrolled in the school.&lt;br&gt;Option (6) exits the program. All the students currently in memory are automatically saved to&lt;br&gt;“students.txt”.&lt;br&gt;Inputs other than 1-6 should be rejected, and an error message printed. The menu should be displayed&lt;br&gt;repeatedly, until the user chooses Option (6).&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 4&lt;br&gt;Important Assumptions&lt;br&gt;You should observe the following assumptions when implementing your program :&lt;br&gt; all student names are unique - if a student is already in the database, trying to add the same name&lt;br&gt;again should generate an error&lt;br&gt; there is no limit to how many students can be enrolled&lt;br&gt; exactly 3 subjects are offered : Computing, Maths and English&lt;br&gt; each student can only enrol in exactly one subject&lt;br&gt; all searches use exact matches (eg. “andy” will not match “andy cheng”); however, the search&lt;br&gt;strings are not case-sensitive (eg. “Sue Smith” is considered to be the same as “SUE smith”)&lt;br&gt; the data file is always in the correct format - ie. no need to validate the data when reading it in&lt;br&gt;Student Record Format&lt;br&gt;Each student in the database contains the following information :&lt;br&gt; Name (non-blank String, may contain multiple words)&lt;br&gt; Telephone (non-blank String, exactly 9 digits, 1st digit must be a ‘9’)&lt;br&gt; Subject (a String, representing one of the 3 subjects offered)&lt;br&gt;Input File Format&lt;br&gt;The input data file (students.txt) has the following format for each line :&lt;br&gt;Name,Telephone,Subject  (the fields are separated by commas)&lt;br&gt;Eg.&lt;br&gt;David Smith,912345678,Maths&lt;br&gt;Andy Cheng,987654321,Computing&lt;br&gt;Susan Dally,911221122,English&lt;br&gt;Zak Whatever,999999999,Maths&lt;br&gt;Russell Crowe,980808080,Computing&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 5&lt;br&gt;Program Design&lt;br&gt;Your program must demonstrate your understanding of the object-oriented concepts and general&lt;br&gt;programming constructs presented in FIT9131. You must use appropriate data structures to store the various&lt;br&gt;objects (list of students, list of subjects, etc) in the program.&lt;br&gt;You must be able to justify the choice of the data structures during your interview. You must document any&lt;br&gt;additional assumptions you made.&lt;br&gt;Validation of values for fields and local variables should also be implemented. You should not allow an&lt;br&gt;object of a class to be set to an invalid state.&lt;br&gt;Discuss with your tutor regarding what classes are appropriate, and how they interact with each other.&lt;br&gt;The main requirements are : (1) the Students and Subjects must be implemented as objects, and they must&lt;br&gt;be stored in some appropriate Java collections, and (2) for the HD level , the list of Subjects within each&lt;br&gt;Student object must also be stored in some appropriate Java collections.&lt;br&gt;Your program must deal with invalid values entered by the user in a sensible manner. For instance, if a user&lt;br&gt;enters “abc” instead of a number for the menu options, your program should not crash.&lt;br&gt;All on-screen input/output should be formatted in a user-friendly manner. Sensible error messages should be&lt;br&gt;displayed whenever appropriate (eg. when searching for a student who is not in the database, trying to enrol&lt;br&gt;student in a subject which does not exist, etc).&lt;br&gt;Grades&lt;br&gt;There are 2 possible Grade Categories for this assignment, as described below :&lt;br&gt;1) A maximum grade of up to a D (Distinction) can be achieved by correctly implementing all the&lt;br&gt;features as described in the “Program Logic” section above.&lt;br&gt;2) To achieve up to a maximum of a HD (High Distinction), you need to implement the following&lt;br&gt;additional features :&lt;br&gt; for Option (1), a student can be enrolled in up to a maximum of 3 unique subjects&lt;br&gt; for Option (4), the user can specify more than 1 subject, and the program will display all&lt;br&gt;students listed in those subjects (eg. all students enrolled in both “Computing” AND “English”,&lt;br&gt;all students enrolled in “Computing” AND “Maths” AND “English”, etc)&lt;br&gt;Note : The description of the program’s logic/design is intentionally left vague, to give you some room&lt;br&gt;to exercise your own design and creativity. Discuss with your tutor about what/how to implement.&lt;br&gt;Important : You must not attempt the HD Category until you have fully implemented the D&lt;br&gt;Category. If you submit a program which partially implements both, you will only be awarded up&lt;br&gt;to a maximum of D.&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 6&lt;br&gt;Test Strategy&lt;br&gt;For this assignment, you are required to produce a partial Test Strategy for the program.&lt;br&gt;There is no need to produce Test Strategy for any other classes you have used in your program.&lt;br&gt;You must provide a Test Plan, plus detailed sets of Test Data, Expected Results and Actual Results for the&lt;br&gt;Student class.&lt;br&gt;Assessment&lt;br&gt;Assessment for this assignment will be done via an interview with your tutor. The marks will be allocated as&lt;br&gt;follows:&lt;br&gt; Test Strategy : 10%&lt;br&gt; Java Code &amp;amp; Object-Oriented Design : 35%&lt;br&gt; Program Functionality in accordance with the requirements : 55%&lt;br&gt;You must submit your work by the submission deadline on the due date (a late penalty of 20% per day of&lt;br&gt;the possible marks will apply).&lt;br&gt;Marks will be deducted for untidy submissions and non-conformances to the FIT9131 Java Coding&lt;br&gt;Standards.&lt;br&gt;Interview&lt;br&gt;You will be asked to demonstrate your program at an interview following the submission date. At the&lt;br&gt;interview you can also expect to be asked to explain your code, your design, discuss design decisions and&lt;br&gt;alternatives and modify your code as required. Marks will not be awarded for any section of code or&lt;br&gt;functionality that a student cannot explain satisfactorily. (The marker may delete excessive comments in&lt;br&gt;code before a student is asked to explain that code).&lt;br&gt;In other words, you will be assessed on your understanding of the code, and not on the actual code itself.&lt;br&gt;Interview times will be arranged in the tutorial labs in Week 12. It is your responsibility to attend the lab and&lt;br&gt;arrange an interview time with your tutor. Any student who does not attend an interview will receive a mark&lt;br&gt;of 0 for the assignment.&lt;br&gt;The actual interviews will take place in Week 13.&lt;br&gt;Your Test Strategy will be only for one class - the Student class.&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 7&lt;br&gt;Submission Requirements&lt;br&gt;The assignment must be uploaded to Moodle on or before the due date. The link to upload the assignment&lt;br&gt;will be made available in the Assignments section of the unit’s Moodle site before the submission deadline.&lt;br&gt;The submission requirements are as follows:&lt;br&gt;A .zip file uploaded to Moodle containing the following components:&lt;br&gt; the BlueJ project you created to implement your assignment. The .zip should be named with your&lt;br&gt;Student ID Number. For example, if your id is 12345678, then the file should be named&lt;br&gt;12345678_A2.zip. Do not name your file any other way.&lt;br&gt; it is your responsibility to check that your ZIP file contains all the correct files, and is not corrupted,&lt;br&gt;before you submit it. If you tutor cannot open your zip file, or if it does not contain the correct files,&lt;br&gt;you will not be assessed.&lt;br&gt; an MS Word document containing your Test Strategy for the Student class.  (Note: The JUnit facility in&lt;br&gt;BlueJ is NOT to be used for this assignment)&lt;br&gt; a completed Assignment Cover Sheet. This will be available for download from the unit’s Moodle site&lt;br&gt;before the submission deadline. You simply complete the editable sections of the document, save it, and&lt;br&gt;include it in your .zip file for submission.&lt;br&gt;Marks will be deducted for failure to comply with any of these requirements.&lt;br&gt;Warning : there will be no extensions to the due date. Any late submission will incur the 20% per day&lt;br&gt;penalty. It is strongly suggested that you submit the assignment well before the deadline, in case there are&lt;br&gt;some unexpected complications on the day (eg. interruptions to your home internet connection).&lt;br&gt;Plagiarism&lt;br&gt;Cheating and plagiarism are viewed as serious offences. In cases where cheating has been confirmed,&lt;br&gt;students have been severely penalised, from losing all marks for an assignment, to facing disciplinary action&lt;br&gt;at the Faculty level. Monash has several policies in relation to these offences and it is your responsibility to&lt;br&gt;acquaint yourself with these.&lt;br&gt;Plagiarism (&lt;a href=&quot;http://www.policy.monash.edu/policybank/academic/education/conduct/plagiarism-policy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.policy.monash.edu/policybank/academic/education/conduct/plagiarism-policy.html&lt;/a&gt;)&lt;br&gt;Discipline: Student Policy (&lt;a href=&quot;http://www.policy.monash.edu/policy-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.policy.monash.edu/policy-&lt;/a&gt;&lt;br&gt;bank/academic/education/conduct/student-discipline-policy.html&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;完成一个简单的学生管理系统，包括增删改查学信息的功能，保存到数据库，统计和记录学生成绩&lt;br&gt;等等相关操作，输入java入门级的作业&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Re
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 Programming Assignment 2  Link State Routing</title>
    <link href="http://yoursite.com/2016/12/28/page78/"/>
    <id>http://yoursite.com/2016/12/28/page78/</id>
    <published>2016-12-28T04:12:34.000Z</published>
    <updated>2017-01-12T03:49:18.869Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java的网络编程，完成状态路由协议，本题主要考察java基础，网络编程基础，设计路由协议，Dijkstra’s算法&lt;br&gt;，UDP套接字协议，动态路由等等知识，分为2个part&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;COMP 3331/9331: Computer Networks &amp;amp; Applications&lt;br&gt;Programming Assignment 2: Link State Routing&lt;br&gt;Due Date: 28 Oct 2016, 11:59 pm (Week 13) Marks: 10 + 1 bonus&lt;br&gt;1. Change Log&lt;br&gt;Version 1.0 released on 19 th September 2016.&lt;br&gt;2. Goal and Learning Objectives&lt;br&gt;In this assignment your task is to implement the link state routing protocol. Your program will be&lt;br&gt;running at all nodes in the specified network. At each node the input to your program is a set of&lt;br&gt;directly attached nodes (i.e. neighbours) and the costs of these links. Each node will broadcast&lt;br&gt;link-state packets to all other nodes in the network. Your routing program at each node should&lt;br&gt;report the least-cost path and the associated cost to all other nodes in the network. Your program&lt;br&gt;should be able to deal with failed nodes.&lt;br&gt;2.1 Learning Objectives&lt;br&gt;On completing this assignment you will gain sufficient expertise in the following skills:&lt;br&gt;• Designing a routing protocol&lt;br&gt;• Link state (Dijkstra’s) algorithm&lt;br&gt;• UDP socket programming&lt;br&gt;• Handling routing dynamics&lt;br&gt;3. Assignment Specification&lt;br&gt;This section gives detailed specifications of the assignment. You can receive 1 bonus mark for&lt;br&gt;submitting the assignment 1 week prior to the deadline.&lt;br&gt;3.1 Implementation Details&lt;br&gt;In this assignment, you will implement the link state routing protocol.&lt;br&gt;The program will accept the following command line arguments:&lt;br&gt;• NODE_ID, the ID for this node. This argument must be a single uppercase alphabet (e.g., A,&lt;br&gt;B, etc).&lt;br&gt;• NODE_PORT, the port number on which this node will send and receive packets to and from&lt;br&gt;its neighbours.&lt;br&gt;Updates to the assignment, including any corrections and clarifications, will be posted on the&lt;br&gt;subject website. Please make sure that you check the subject website regularly for updates.&lt;br&gt;• CONFIG.TXT, this file will contain the costs to the neighbouring nodes. It will also contain&lt;br&gt;the port number being used by each neighbour for exchanging routing packets. An example of&lt;br&gt;this file is provided below.&lt;br&gt;Since we can’t let you play with real network routers, the routing programs for all the nodes in the&lt;br&gt;simulated network will run on a single desktop machine. However, each instance of the routing&lt;br&gt;protocol (corresponding to each node in the network) will be listening on a different port number.&lt;br&gt;If your routing software executes correctly on a single desktop machine, it should also work&lt;br&gt;correctly on real network routers. Note that, the terms router and node are used interchangeably in&lt;br&gt;the rest of this specification.&lt;br&gt;Assume that the routing protocol is being instantiated for a node A, with two neighbours B and C.&lt;br&gt;A simple example of how the routing program would be executed (assuming it is a Java program&lt;br&gt;named Lsr.java) follows:&lt;br&gt;java Lsr A 2000 config.txt&lt;br&gt;where the config.txt would be as follows:&lt;br&gt;2&lt;br&gt;B 5 2001&lt;br&gt;C 7 2002&lt;br&gt;The first line of this file indicates the number of neighbours (NOT the total number of nodes in the&lt;br&gt;network). Following this there is one line dedicated to each neighbour. It starts with the neighbour&lt;br&gt;id, followed by the cost to reach this neighbour and finally the port number that this neighbour is&lt;br&gt;using for communication. For example, the second line in the config.txt above indicates that the&lt;br&gt;cost to neighbour B is 5 and this neighbour is using port number 2001 for receiving and&lt;br&gt;transmitting link-state packets. The node ids will be uppercase alphabets and you can assume that&lt;br&gt;there will be no more than 10 nodes in the test scenarios. However, do not make assumptions that&lt;br&gt;the node ids will necessarily start from the letter A or that they will always be in sequence. The&lt;br&gt;link costs should be floating point numbers (up to the first decimal) and the port numbers should&lt;br&gt;be integers. These three fields will be separated by a single white space between two successive&lt;br&gt;fields in each line of the configuration file. The link costs will be static and will not change once&lt;br&gt;initialised. Further, the link costs will be consistent in both directions, i.e., if the cost from A to B&lt;br&gt;is 5, then the link from B to A will also have a cost of 5. You may assume that the configuration&lt;br&gt;files used for marking will be consistent with the above description and devoid of any errors.&lt;br&gt;Important: It is worth restating that initially each node is only aware of the costs to its direct&lt;br&gt;neighbours. The nodes do not have global knowledge (i.e. information about the entire network&lt;br&gt;topology) at start-up.&lt;br&gt;The remainder of the specification is divided into two parts, beginning with the base specification&lt;br&gt;as the first part and the subsequent part adding new functionality to the base specification. In order&lt;br&gt;to receive full marks for this assignment you must implement both parts. If you are unable to&lt;br&gt;complete the second part, you will still receive marks for the first part. (The marking guidelines at&lt;br&gt;the end of the specification indicate the distribution of marks).&lt;br&gt;Part 1: Base Specification&lt;br&gt;In link-state routing, each node broadcasts link-state packets to all other nodes in the network, with&lt;br&gt;each link-state packet containing the identities of the node’s neighbours and the associated costs to&lt;br&gt;reach them. You must implement a simple broadcasting mechanism in your program. Upon&lt;br&gt;initialisation, each node creates a link-state packet (containing the appropriate information – see&lt;br&gt;description of link-state protocol in the textbook/lecture notes) and sends this packet to all direct&lt;br&gt;neighbours. The exact format of the link-state packets that you will use is left for you to decide.&lt;br&gt;Upon receiving this link-state packet, each neighbouring router in turn broadcasts this packet to its&lt;br&gt;own neighbours (excluding the router from which it received this link-state packet in the first&lt;br&gt;place). This simple flooding mechanism will ensure that each link-state packet is propagated&lt;br&gt;through the entire network.&lt;br&gt;It is possible that some nodes may start earlier than their neighbours. As a result, a node might&lt;br&gt;send the link-state packet to a neighbour, which has not run yet. You should not worry about this&lt;br&gt;since the routing program at each node will repeatedly send the link-state packet to its neighbours&lt;br&gt;and a slow-starting neighbour will eventually get the information. That said, when we test your&lt;br&gt;assignment, we would ensure that all nodes are initiated simultaneously (using a script).&lt;br&gt;Each node should periodically broadcast the link-state packet to its neighbours every&lt;br&gt;UPDATE_INTERVAL. You should set this interval to 1 second. In other words, a node should&lt;br&gt;broadcast a link state packet every second.&lt;br&gt;Real routing protocols use UDP for exchanging control packets. Hence, you MUST use UDP as&lt;br&gt;the transport protocol for exchanging link-state packets amongst the neighbours. Note that, each&lt;br&gt;router can consult its configuration file to determine the port numbers used by its neighbours for&lt;br&gt;exchanging link-state packets. Do not worry about the unreliable nature of UDP. Since, you are&lt;br&gt;simulating multiple routers on a single machine, it is highly unlikely that link-state packets will be&lt;br&gt;dropped. Furthermore, since link-state packets are broadcast periodically, occasional packet loss&lt;br&gt;will not impact the operation of your protocol. If you use TCP, a significant penalty will be&lt;br&gt;assessed.&lt;br&gt;On receiving link-state packets from all other nodes, a router can build up a global view of the&lt;br&gt;network topology. You may want to review your class notes and consult standard data structures&lt;br&gt;textbooks for standard representations of undirected graphs, which would be an appropriate way to&lt;br&gt;model this view of the network.&lt;br&gt;Given a view of the entire network topology, a router should run Dijkstra’s algorithm to compute&lt;br&gt;least-cost paths to all other routers within the network. Each node should wait for a&lt;br&gt;ROUTE_UPDATE_INTERVAL (the default value is 30 seconds) since start-up and then execute&lt;br&gt;Dijkstra’s algorithm. Given that there will be no more than 10 nodes in the network and a periodic&lt;br&gt;link-state broadcast frequency of 1 second, 30 seconds is a sufficiently long duration for each node&lt;br&gt;to discover the global view of the entire topology.&lt;br&gt;Once a router finishes running Dijkstra’s algorithm, it should print out to the terminal, the least-&lt;br&gt;cost path to each destination node (excluding itself) along with the cost of this path. The following&lt;br&gt;is an example output for node A in some arbitrary network:&lt;br&gt;least-cost path to node B: ACB and the cost is 10&lt;br&gt;least-cost path to node C: AC and the cost is 2.5&lt;br&gt;We will wait for duration of ROUTE_UPDATE_INTERVAL after running your program for the&lt;br&gt;output to appear (some extra time will be added as a buffer). If the output does not appear within&lt;br&gt;this time, you will be heavily penalised. As indicated earlier, we will restrict the size of the&lt;br&gt;network to 10 nodes in the test topologies. The default value of 30 seconds is sufficiently long for&lt;br&gt;all the nodes to receive link-state packets from every other node and compute the least-cost paths.&lt;br&gt;Your program should execute forever (as a loop). In other words, each node should keep&lt;br&gt;broadcasting link-state packets every UPDATE_INTERVAL and Dijkstra’s algorithm should be&lt;br&gt;executed and the output printed out every ROUTE_UPDATE_INTERVAL. To kill an instance of&lt;br&gt;the routing protocol, the user should type CTRL-C at the respective terminal.&lt;br&gt;Restricting Link-state Broadcasts: Note that, a naïve broadcast strategy; wherein each node&lt;br&gt;retransmits every link state packet that it receives will result in unnecessary broadcasts and thus&lt;br&gt;increase the overhead. To elaborate this issue, consider the example topology discussed in the&lt;br&gt;latter part of the spec. The link-state packet created by node A will be sent to its direct neighbours&lt;br&gt;B, C and D. Each of these three nodes will in turn broadcast this link-state packet to their&lt;br&gt;neighbours. Let us consider Node C, which broadcasts A’s link state packet to B, D, E and F. Note&lt;br&gt;that node B has already broadcast A’s link state packet once (when it received it directly from A).&lt;br&gt;Node B has now received this same link-state packet via node C. There should thus be no need for&lt;br&gt;node B to broadcast this packet again. You MUST implement a mechanism to reduce such&lt;br&gt;unnecessary broadcasts. This can be achieved in several ways. You are open to choose any method&lt;br&gt;to achieve this. You must describe your method in the written report.&lt;br&gt;Part 2: Dealing with Node Failures&lt;br&gt;In this part you must implement additional functionality in your code to deal with random node&lt;br&gt;failures. Recall that in the base assignment specification it is assumed that once all nodes are up&lt;br&gt;and running they will continue to be operational till the end when all nodes are terminated&lt;br&gt;simultaneously. In this part you must ensure that your algorithm is robust to node failures. Once a&lt;br&gt;node fails, its neighbours must quickly be able to detect this and the corresponding links to this&lt;br&gt;failed node must be removed. Further, the routing protocol should converge and the failed nodes&lt;br&gt;should be excluded from the least-cost path computations. The other nodes should no longer&lt;br&gt;compute least-cost paths to the failed nodes. Furthermore, the failed nodes should not be included&lt;br&gt;in the least-cost paths to other nodes.&lt;br&gt;A simple method that is often used to detect node failures is the use of periodic heartbeat (also&lt;br&gt;often known as keep alive) messages. A heartbeat message is a short control message, which is&lt;br&gt;periodically sent by a node to its directly connected neighbours. If a node does not receive a&lt;br&gt;certain number of consecutive hearbeat messages from one of its neighbours it can assume that&lt;br&gt;this node has failed. Note that, each node transmits a link-state packet to its immediate neighbour&lt;br&gt;every UPDATE_INTERVAL (1 second). Hence, this distance vector message could also double&lt;br&gt;up as the hearbeat message. Alternately, you may wish to make use of an explicit heartbeat&lt;br&gt;message (over UDP), which is transmitted more frequently (i.e. with a period less than 1 second)&lt;br&gt;to expedite the detection of a failed node. It is recommended that you wait till at least 3 consequent&lt;br&gt;hearbeat (or link-state) messages are not received from a neighbour before considering it to have&lt;br&gt;failed. This will ensure that if at all a UDP packet is lost then it does not hamper the operation of&lt;br&gt;your protocol.&lt;br&gt;Once a node has detected that one of its neighbours has failed, it should update its link-state packet&lt;br&gt;accordingly to reflect the change in the local topology. Eventually, via the propagation of the&lt;br&gt;updated link-state packets, other nodes in the network will become aware that the failed node is&lt;br&gt;unreachable and it will be excluded from the link-state computations (i.e. Dijkstra’s algorithm).&lt;br&gt;Once a node has failed, you may assume that it cannot be initialised again.&lt;br&gt;While marking, we will only fail a few nodes, so that a reasonable connected topology is still&lt;br&gt;maintained. Furthermore, care will be taken to ensure that the network does not get partitioned. In&lt;br&gt;a typical topology (recall that the largest topology used for testing will consist of 10 nodes), at&lt;br&gt;most 3 nodes will fail. However, note that the nodes do not have to fail simultaneously.&lt;br&gt;Recall  that  each  node  will  execute  Dijkstra’s  algorithm  periodically  after&lt;br&gt;ROUTE_UPDATE_INTERVAL (30 seconds) to compute the least-cost path to every other&lt;br&gt;destination. It may so happen that the updated link-state packets following a node failure may not&lt;br&gt;have reached certain nodes in the network before this interval expires. As a result, these nodes will&lt;br&gt;use the old topology information (prior to node failure) to compute the least-cost paths. Thus the&lt;br&gt;output at these nodes will be incorrect. This is not an error. It is just an artefact of the delay&lt;br&gt;incurred in propagating the updated link-state information. To account for this, it is necessary to&lt;br&gt;wait for at least two consecutive ROUTE_UPDATE_INTERVAL periods (i.e. 1 minute) after the&lt;br&gt;node failure is initiated. This will ensure that all the nodes are aware of the topology change.&lt;br&gt;While marking, we will wait for 2&lt;em&gt;ROUTE_UPDATE_INTERVAL following a node failure&lt;br&gt;before checking the output.&lt;br&gt;3.2. An Example&lt;br&gt;Let us look at an example with the network topology as shown in the figure below:&lt;br&gt;The numbers alongside the links indicate the link costs. The configuration files for the 6 nodes are&lt;br&gt;available for download from the assignment webpage. In the configuration files we have assumed&lt;br&gt;the following port assignments: A at 2000, B at 2001, C at 2002, D at 2003, E at 2004 and F at&lt;br&gt;2005. However note that some of these ports may be in use by another student logged on to the&lt;br&gt;same CSE machine as you. In this case, change the port assignments in all the configuration files&lt;br&gt;appropriately. The program output at node A should look like the following:&lt;br&gt;least-cost path to node B: AB and the cost is 2.0&lt;br&gt;least-cost path to node C: ADEC and the cost is 3.0&lt;br&gt;least-cost path to node D: AD and the cost is 1.0&lt;br&gt;least-cost path to node E: ADE and the cost is 2.0&lt;br&gt;least-cost path to node F: ADEF and the cost is 4.0&lt;br&gt;Note: It is not necessary that your program should print the paths to the destinations in&lt;br&gt;alphabetical order.&lt;br&gt;You may also test out the ability of your program to deal with node failures in the above example&lt;br&gt;by causing node B to fail (as an example).&lt;br&gt;Please ensure that before you submit, your program provides a similar output for the above&lt;br&gt;topology. However, we will use different network topologies in our testing.&lt;br&gt;4. Additional Notes&lt;br&gt;This is not a group assignment. You are expected to work on this individually.&lt;br&gt;How to start: Sample UDP client and server programs are available on the Week 3 lecture&lt;br&gt;material page. They are a good starting point to start your development. You will also find several&lt;br&gt;links to network programming resources on that page.&lt;br&gt;A&lt;br&gt;D&lt;br&gt;B  C&lt;br&gt;E&lt;br&gt;F&lt;br&gt;2&lt;br&gt;2&lt;br&gt;5&lt;br&gt;1&lt;br&gt;1&lt;br&gt;1&lt;br&gt;3&lt;br&gt;2&lt;br&gt;5&lt;br&gt;3&lt;br&gt;Language and Platform: You are free to use one of C, JAVA or Python to implement this&lt;br&gt;assignment. Please choose a language that you are comfortable with. The programs will be tested&lt;br&gt;on CSE Linux machines. So please make sure that your entire application runs correctly on these&lt;br&gt;machines. This is especially important if you plan to develop and test the programs on your&lt;br&gt;personal computers (which may possibly use a different OS or version or JVM). Note that CSE&lt;br&gt;machines support the following: gcc version 4.9.2, Java 1.7, Python 2.7, 2.8 and 3. Note for&lt;br&gt;Python: In your report, please indicate which version of Python you have used. You may only use&lt;br&gt;the basic socket programming APIs providing in your programming language of choice. Note that,&lt;br&gt;the network will be simulated by running multiple instances of your program on the same machine&lt;br&gt;with a different port number for each node. Make sure that your program will work appropriately&lt;br&gt;under these conditions. See the sequence of operations listed below for details.&lt;br&gt;Error Condition: Note that all the arguments supplied to the programs will be in the appropriate&lt;br&gt;format. The configuration files supplied as an argument to each node will also be consistent with&lt;br&gt;the test topology. Your programs do not have to handle errors in format, etc.&lt;br&gt;You should be aware that port ID’s, when bound to sockets, are system-wide values and thus other&lt;br&gt;students may be using the port number you are trying to use. On Linux systems, you can run the&lt;br&gt;command netstat to see which port numbers are currently assigned.&lt;br&gt;Do not worry about the reliability of UDP in your assignment. It is possible for packets to be&lt;br&gt;dropped, for example, but the chances of problems occurring in a local area network are fairly&lt;br&gt;small. If it does happen on the rare occasion, that is fine. Further, your routing protocol is&lt;br&gt;inherently robust against occasional losses since the link state packets are exchanged every 1&lt;br&gt;second. If your program appears to be losing or corrupting packets on a regular basis, then there is&lt;br&gt;likely a fault in your program.&lt;br&gt;Test your assignment out with several different topologies (besides the sample topology provided).&lt;br&gt;Make sure that your program is robust to node failures by creating several failed nodes (however&lt;br&gt;make sure that the topology is still connected). You can very easily work out the least-cost paths&lt;br&gt;manually (as shown in the lecture notes or the textbook) to verify the output of your program.&lt;br&gt;5. File Naming Convention and Assignment Submission&lt;br&gt;Your main program should be named Lsr.c (or Lsr.java or Lsr.py). You may of course have&lt;br&gt;additional header files and/or helper files. If you are using C you MUST submit a makefile/script&lt;br&gt;(not necessary with Java and Python). In addition you should submit a small report, report.pdf&lt;br&gt;(no more than 3 pages) describing the program design and a brief description of how your system&lt;br&gt;works. Describe the data structure used to represent the network topology and the link-state packet&lt;br&gt;format. Comment on how your program deals with node failures and restricts excessive link-state&lt;br&gt;broadcasts. Also discuss any design tradeoffs considered and made. Describe possible&lt;br&gt;improvements and extensions to your program and indicate how you could realise them. If your&lt;br&gt;program does not work under any particular circumstances please report this here. Also indicate&lt;br&gt;any segments of code that you have borrowed from the Web or other books.&lt;br&gt;You do not have to submit any topology files.&lt;br&gt;Here are the step-by-step instructions for submission:&lt;br&gt;1. Log in to your CSE account.&lt;br&gt;2. Create a directory called assign and copy ONLY the necessary files into that directory.&lt;br&gt;3. Tar this directory using the following command: “tar –cvf assign.tar assign”&lt;br&gt;4. Submit your assignment using the following command: “give cs3331 assign2 assign.tar”. You&lt;br&gt;should receive a confirmation of your submission.&lt;br&gt;Alternately, you may submit the tar archive via the submission link at the top of the assignment&lt;br&gt;web page.&lt;br&gt;Note that, the system will only accept assign.tar as the file name. All other names will be rejected.&lt;br&gt;You can submit as many times as you like before the deadline. A later submission will override&lt;br&gt;the previous submission, so make sure you submit the correct version. Do not wait till just before&lt;br&gt;the deadline for submission, as there may be unforeseen problems (brief disconnection of Internet&lt;br&gt;connectivity, power outage, computer crash, etc.).&lt;br&gt;Late Submission Penalty: Late penalty will be applied as follows:&lt;br&gt;• 1 day after deadline: 10% reduction&lt;br&gt;• 2 days after deadline: 20% reduction&lt;br&gt;• 3 days after deadline: 30% reduction&lt;br&gt;• 4 days after deadline: 40% reduction&lt;br&gt;• 5 or more days late: NOT accepted&lt;br&gt;NOTE: The above penalty is applied to your final total. For example, if you submit your&lt;br&gt;assignment 2 days late and your score on the assignment is 10, then your final mark will be 10 – 2&lt;br&gt;(20% penalty) = 8.&lt;br&gt;6. Plagiarism&lt;br&gt;You are to write all of the code for this assignment yourself. All source codes are subject to strict&lt;br&gt;checks for plagiarism, via highly sophisticated plagiarism detection software. These checks may&lt;br&gt;include comparison with available code from Internet sites and assignments from previous&lt;br&gt;semesters. In addition, each submission will be checked against all other submissions of the&lt;br&gt;current semester. Do not post this assignment on forums where you can pay programmers to write&lt;br&gt;code for you. We will be monitoring such forums. Please note that we take this matter quite&lt;br&gt;seriously. The LIC will decide on appropriate penalty for detected cases of plagiarism. The most&lt;br&gt;likely penalty would be to reduce the assignment mark to ZERO.&lt;br&gt;That said, we are aware that a lot of learning takes place in student conversations, and don’t wish&lt;br&gt;to discourage you from taking your classmates, provided you follow the Gilligan’s Island Rule -&lt;br&gt;After a joint discussion of an assignment or problem, each student should discard all written&lt;br&gt;material and then go do something mind-numbing for half an hour. For example, go watch an&lt;br&gt;episode of Gilligan’s Island (or Reality TV in modern terms), and then recreate the solutions. The&lt;br&gt;idea of this policy is to ensure that you fully understand the solutions or ideas that the group came&lt;br&gt;up with.&lt;br&gt;It is important, for both those helping others and those being helped, not to provide/accept any&lt;br&gt;programming language code in writing, as this is apt to be used exactly as is, and lead to&lt;br&gt;plagiarism penalties for both the supplier and the copier of the codes. Write something on a piece&lt;br&gt;of paper, by all means, but tear it up/take it away when the discussion is over. It is OK to borrow&lt;br&gt;bits and pieces of code from sample socket code out on the Web and in books. You MUST&lt;br&gt;however acknowledge the source of any borrowed code. This means providing a reference to a&lt;br&gt;book or a URL when the code appears (as comments). Also indicate in your report the portions of&lt;br&gt;your code that were borrowed. Explain any modifications you have made (if any) to the borrowed&lt;br&gt;code.&lt;br&gt;7. Forum Use&lt;br&gt;Students are strongly recommended to discuss about the assignment on the course forum.&lt;br&gt;However, at no point should any code fragments be posted to the message forum. Such actions&lt;br&gt;will be considered to be instances of plagiarism, thus incurring a significant penalty. Students are&lt;br&gt;also encouraged to share example topologies that they have created to test their program.&lt;br&gt;8. Sequence of Operation for Testing&lt;br&gt;The following shows the sequence of events that will be involved in the testing of your&lt;br&gt;assignment. Please ensure that before you submit your code you thoroughly check that your code&lt;br&gt;can execute these operations successfully.&lt;br&gt;1) First chose an arbitrary network topology (similar to the test topology above). Create the&lt;br&gt;appropriate configuration files that need to be input to the nodes. Note again that the&lt;br&gt;configuration files should only contain information about the neighbours and not of the entire&lt;br&gt;topology. Work out the least-cost paths and corresponding costs from each node to all other&lt;br&gt;destinations manually using Dijkstra’s algorithm as described in the lecture notes (or&lt;br&gt;textbook). This will allow you to check that your program is computing the paths correctly.&lt;br&gt;2) Log on to a CSE Linux machine. Open as many terminal windows as the number of nodes in&lt;br&gt;your test topology. Almost simultaneously, execute the routing protocol for each node (one&lt;br&gt;node in each terminal).&lt;br&gt;java lsr A 2000 configA.txt (for JAVA)&lt;br&gt;java lsr B 2001 configB.txt&lt;br&gt;and so on. You may write a simple script to automate this process.&lt;br&gt;3) Wait till the nodes display the output at their respective terminals.&lt;br&gt;4) Compare the displayed paths and costs to the ones obtained in step 1 above. These should be&lt;br&gt;consistent.&lt;br&gt;5) The next step involves testing the capability of your program to deal with failed nodes. For this&lt;br&gt;choose a few nodes (max of 3 nodes) from the topology that is currently being tested (in the&lt;br&gt;above tests) and terminate the nodes by typing CTRL-C in their respective terminal windows.&lt;br&gt;Make sure that the nodes chosen for termination do not partition the network. Work out the&lt;br&gt;least-cost paths from each node to all other destinations manually using Dijkstra’s algorithm as&lt;br&gt;described  in  the  lecture  notes  (or  textbook).  Wait  for  a  duration  of&lt;br&gt;2&lt;/em&gt;ROUTE_UPDATE_INTERVAL and observe the updated output at each node. Corroborate&lt;br&gt;the results with the manual computations.&lt;br&gt;6) Terminate all nodes.&lt;br&gt;NOTE: We will ensure that your programs are tested multiple times to account for any possible&lt;br&gt;UDP segment losses (it is quite unlikely that your routing packets will be dropped).&lt;br&gt;9. Marking Policy:&lt;br&gt;We will test your routing protocol for at least 2 different network topologies (which will be&lt;br&gt;distinct from the example provided). Marks will be deducted if necessary, depending on the extent&lt;br&gt;of the errors observed in the output at each node. After the marking process we will upload the test&lt;br&gt;topologies on the website for all students to view.&lt;br&gt;Your code will be marked using the following criteria:&lt;br&gt;• Mechanism to restrict link-state broadcasts: 1 marks&lt;br&gt;• Correct operation of the link state protocol: 5.5 marks&lt;br&gt;• Appropriate handling of dead nodes, whereby the least-cost paths are updated to reflect the&lt;br&gt;change in topology: 2.5 marks&lt;br&gt;• Report: 1 mark&lt;br&gt;Bonus Mark: You may receive 1 bonus mark for submitting the assignment a week before the&lt;br&gt;deadline, i.e. by 21 st October 2016 (Week 12). However, to receive the bonus mark, in addition&lt;br&gt;to submitting by the early deadline, your code should have scored at least 7 marks (out of 10) as&lt;br&gt;per the above criteria. The bonus mark can be used to offset lost marks in any assessable&lt;br&gt;component in this course (e.g. mid-semester exam, final exam, labs, etc.).&lt;br&gt;IMPORTANT NOTE: For assignments that fail to execute all of the above tests, we will be&lt;br&gt;unable to award you a substantial mark. Note that, we will test your code multiple times before&lt;br&gt;concluding that there is a problem. You should test your program rigorously and verify the results&lt;br&gt;by trying out different topologies before submitting your code.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java的网络编程，完成状态路由协议，本题主要考察java基础，网络编程基础，设计路由协议，Dijkstra’s算法&lt;br&gt;，UDP套接字协议，动态路由等等知识，分为2个par
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Network" scheme="http://yoursite.com/tags/Network/"/>
    
  </entry>
  
</feed>
