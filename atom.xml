<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生Computer Science编程作业代写</title>
  <subtitle>专业 高效 原创</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-19T09:59:54.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>csyoyo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>留学生Computer Science编程作业代写</title>
    <link href="http://yoursite.com/2111/01/11/mainpage/"/>
    <id>http://yoursite.com/2111/01/11/mainpage/</id>
    <published>2111-01-11T07:55:30.000Z</published>
    <updated>2016-09-19T09:59:54.153Z</updated>
    
    <content type="html">&lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队成员有的擅长java，有的擅长python，有的擅长数据结构，有的擅长机器学习，&lt;br&gt;  有的擅长C/C++，有的擅长ios/android。通过自己设计的任务分发系统，我们可以在15分钟内迅速准确评估时间和难度，完成之后还有互相之间的code review。&lt;br&gt;  相比与代写机构的黑心，个人代写的不规范(我们也是个人代写发展而来)，我们团队经过不断的调整进步，具备了代写机构规范的流程优势，&lt;br&gt;  并且价格合理，具备了个人代写的一对一，并且熟练了解代写流程规范。&lt;/p&gt;
&lt;h2 id=&quot;服务内容&quot;&gt;&lt;a href=&quot;#服务内容&quot; class=&quot;headerlink&quot; title=&quot;服务内容&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;服务内容&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  代写美国、加拿大、英国、澳洲或者其他国家的Computer Science编程作业，范围包括&lt;font color=&quot;red&quot;&gt;Assignment、Homework、Lab、Project、Final甚至App&lt;/font&gt;。&lt;br&gt;    我不会给你看不懂的高逼格code，我的编程风格都是模仿你的slides和notes，为你量身打造，&lt;font color=&quot;red&quot;&gt;绝无超纲代码&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;特别擅长各种疑难作业&lt;/font&gt;，做过大量Game Design、Operating System、Database System, Web Design，得分几乎全A(90%)。&lt;/p&gt;
&lt;h2 id=&quot;擅长范围&quot;&gt;&lt;a href=&quot;#擅长范围&quot; class=&quot;headerlink&quot; title=&quot;擅长范围&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;擅长范围&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  我们擅长范围包括但不限于：&lt;br&gt;    C C++ Java Python Php Android Ios&lt;br&gt;    Js Jsp Qt MFC J2ee Sql Matlab Ssh&lt;br&gt;    Assignment/Project/Lab/作业/编程/辅导&lt;br&gt;    Data structure/数据结构/机器学习/定制/制作&lt;br&gt;    Linux/Windows/Mac socket Algorithom/算法&lt;br&gt;    网站设计 Web开发 Operating system/操作系统&lt;br&gt;    Computer Science Everything/程序设计/app/&lt;/p&gt;
&lt;h2 id=&quot;质量保证&quot;&gt;&lt;a href=&quot;#质量保证&quot; class=&quot;headerlink&quot; title=&quot;质量保证&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;质量保证&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  开发之前会详细问你的开发语言、系统环境、软件版本、测试方式(本地测试、服务器自动测试)、是否需要documention、deadline(精确到小时)&lt;br&gt;    沟通好时间后，我们不会临着deadline给你code。一般都是提前足够的时间给客户反馈一个版本的code，如果有问题需要反馈修改也有充足的时间。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;除了code会免费提供给客户一个运行说明word，即使客户不知道如何运行，根据说明word也可以运行验证code&lt;/font&gt;。&lt;br&gt;    带checker/tester的必全过，带得分点的必全做，能顺手做掉的bonus也帮你做。&lt;br&gt;    小作业24小时内完成，大作业24-72小时，绝不浪费你的slip day。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;代码肯定是手写原创，不违反honor code，我给你的代码属于reference&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;免费提供售后服务，包括代码运行，讲解答疑&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&quot;价格优势&quot;&gt;&lt;a href=&quot;#价格优势&quot; class=&quot;headerlink&quot; title=&quot;价格优势&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;价格优势&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  价格通常在$100 USD以上，只有部分Lab可能低于这个价格。&lt;br&gt;    真正的&lt;font color=&quot;red&quot;&gt;无中介费用&lt;/font&gt;，绝不漫天要价，欢迎你货比三家，支持PayPal/支付宝/微信支付。&lt;br&gt;    通常先收取一半定金，写好之后验收code之后付尾款。&lt;br&gt;    我给你的不止是一个答案，还有我作为工程师的经验，编程方法和技巧。&lt;/p&gt;
&lt;h2 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;联系方式&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  邮箱 : cscoderman@gmail.com (请附带作业要求)&lt;br&gt;    微信 : cscoderman&lt;br&gt;    联系时，请简单或详细地说明你的要求+微信昵称(如大二，Algorithm and Data Structure)，便于我们快速报价与沟通。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python代写：Introduction to Computer Programming with Python</title>
    <link href="http://yoursite.com/2016/11/16/page41/"/>
    <id>http://yoursite.com/2016/11/16/page41/</id>
    <published>2016-11-16T01:11:23.000Z</published>
    <updated>2017-01-04T04:01:50.296Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;一个天气数据的处理系统，需要用到array，在线的API接口，数据异常处理等等，根据获取的天气数据做相关处理（增删改查统计等等），&lt;br&gt;最后还有sample run的示例辅助测试。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS 8: Introduction to Computer Programming with Python&lt;br&gt;Spring 2016&lt;br&gt;Project 2&lt;br&gt;Assigned: Wednesday, February 24 Due: Tuesday, March 29 11:59 PM&lt;br&gt;Overview&lt;br&gt;Blackjack, or 21, is the most widely-played casino banking game in the world. The goal is&lt;br&gt;to build a hand of cards that values as close to 21 as possible without exceeding it. First,&lt;br&gt;here is the terminology used in the game.&lt;br&gt; Hit: Take another card for your hand&lt;br&gt; Stand: Stop taking cards&lt;br&gt; Bust: Exceed a value of 21 in your hand&lt;br&gt; Push: Tie with the dealer&lt;br&gt;The cards are valued as follows.&lt;br&gt;Rank Value&lt;br&gt;Ace 11 or 1&lt;br&gt;2–10 Face value&lt;br&gt;Jack, Queen, King 10&lt;br&gt;Of particular note, an Ace can be considered either value 11 or 1. Given rational strategy,&lt;br&gt;it will be considered 11 unless that will cause a bust, in which case it will be considered 1.&lt;br&gt;In each hand, play proceeds as follows.&lt;br&gt;1. The dealer takes one card, which the player can see.&lt;br&gt;2. The player is given two cards.&lt;br&gt;3. The player has the option to hit, or take one additional card. The player can hit as&lt;br&gt;many times as desired, until they reach or exceed 21, or decide to stand (stop taking&lt;br&gt;cards).&lt;br&gt;1&lt;br&gt;4. If the player did not bust (exceed 21), the dealer takes cards until she reaches 17 or&lt;br&gt;higher (i.e., the dealer will hit on 16 or fewer points, and stand on 17 or more points).&lt;br&gt;5. If the player busts, she immediately loses, and the dealer will not draw more cards.&lt;br&gt;If the dealer busts, the player wins. If the player and dealer have the same total, it is&lt;br&gt;a push. Otherwise, the winner is the one with higher point total.&lt;br&gt;6. If the player loses, she loses her bet. If the player wins, she wins her bet. If the hand&lt;br&gt;is a push, the bet is returned (i.e., no gain or loss).&lt;br&gt;In this project, you will program a functional Blackjack game by first coding the basic logic&lt;br&gt;of the game, then gradually adding features.&lt;br&gt;2&lt;br&gt;Lab Session 1, Feb 24–Feb 25&lt;br&gt;Activity 1&lt;br&gt;In this activity, you will code the logic of the game using simplifications, rather than tackling&lt;br&gt;a full Blackjack game all at once. Instead of selecting a card and then determining its value,&lt;br&gt;you will instead randomly generate a card’s value from between 2 and 11. You will also&lt;br&gt;assume that the bet is always $25.&lt;br&gt;Note that randomly generating a card’s value is not an accurate way to simulate draws. In a&lt;br&gt;real deck, there are more cards worth 10 than there are, e.g., cards worth 5. Consider other&lt;br&gt;ways in which this version of Blackjack will not be exactly the same as real-life Blackjack.&lt;br&gt;You will add features to make the game more realistic in later activities.&lt;br&gt;1. Write a main() function that asks the user for their name, and initializes their starting&lt;br&gt;money to $1,000.&lt;br&gt;2. Write a loop in main() that will play a hand of blackjack, then ask the user if they want&lt;br&gt;to play another hand (as long as they still have money to bet). You will play a hand&lt;br&gt;by calling the play_hand(name) function (which does not yet exist). This function&lt;br&gt;should return the change in the player’s money (positive if they win, negative if they&lt;br&gt;lose), and you should use this value to update their amount after each hand.&lt;br&gt;3. Write the play_hand(name) function. In this function, you will need to track the&lt;br&gt;running total of the cards that the dealer and player have been dealt. Deal one card&lt;br&gt;to the dealer and two to the player. Prompt the player for their action (hit/stay)&lt;br&gt;until they reach or exceed 21, or choose to stay. Then, deal cards to the dealer until&lt;br&gt;they reach or exceed 17. Determine the winner, and return the change in the player’s&lt;br&gt;money (i.e., 25 if they won, -25 if they lost, and 0 if the hand was a push).&lt;br&gt;Here is an example run after completing this stage:&lt;br&gt;Name? Bill&lt;br&gt;Bill has $1,000&lt;br&gt;Dealer received card of value 2&lt;br&gt;Bill received card of value 9&lt;br&gt;Bill received card of value 5&lt;br&gt;Dealer total: 2&lt;br&gt;Bill total: 14&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received card of value 6&lt;br&gt;Dealer total: 2&lt;br&gt;3&lt;br&gt;Bill total: 20&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Dealer received card of value 4&lt;br&gt;Dealer total: 6&lt;br&gt;Bill total: 20&lt;br&gt;Dealer received card of value 5&lt;br&gt;Dealer total: 11&lt;br&gt;Bill total: 20&lt;br&gt;Dealer received card of value 10&lt;br&gt;Dealer total: 21&lt;br&gt;Bill total: 20&lt;br&gt;Dealer wins&lt;br&gt;Bill has $975&lt;br&gt;Play again? (y/n) y&lt;br&gt;Dealer received card of value 4&lt;br&gt;Bill received card of value 3&lt;br&gt;Bill received card of value 7&lt;br&gt;Dealer total: 4&lt;br&gt;Bill total: 10&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Dealer received card of value 2&lt;br&gt;Dealer total: 6&lt;br&gt;Bill total: 10&lt;br&gt;Dealer received card of value 5&lt;br&gt;Dealer total: 11&lt;br&gt;Bill total: 10&lt;br&gt;Dealer received card of value 5&lt;br&gt;Dealer total: 16&lt;br&gt;Bill total: 10&lt;br&gt;Dealer received card of value 6&lt;br&gt;Dealer total: 22&lt;br&gt;Bill total: 10&lt;br&gt;Dealer bust&lt;br&gt;4&lt;br&gt;Bill has $1,000&lt;br&gt;Play again? (y/n) y&lt;br&gt;Dealer received card of value 3&lt;br&gt;Bill received card of value 11&lt;br&gt;Bill received card of value 10&lt;br&gt;Dealer total: 3&lt;br&gt;Bill total: 21&lt;br&gt;Dealer received card of value 7&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 21&lt;br&gt;Dealer received card of value 3&lt;br&gt;Dealer total: 13&lt;br&gt;Bill total: 21&lt;br&gt;Dealer received card of value 11&lt;br&gt;Dealer total: 24&lt;br&gt;Bill total: 21&lt;br&gt;Dealer bust&lt;br&gt;Bill has $1,025&lt;br&gt;Play again? (y/n) n&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;5&lt;br&gt;Activity 2&lt;br&gt;In this activity, you will improve the drawing of cards. You will use the strategy we’ve&lt;br&gt;learned in lecture for encoding information in a way that the computer can store it: trans-&lt;br&gt;form the information into a number. In this activity, use an integer to store each card, and&lt;br&gt;represent them as follows.&lt;br&gt;Rank int encoding Point value&lt;br&gt;Ace (A) 1 11&lt;br&gt;2 2 2&lt;br&gt;3 3 3&lt;br&gt;4 4 4&lt;br&gt;5 5 5&lt;br&gt;6 6 6&lt;br&gt;7 7 7&lt;br&gt;8 8 8&lt;br&gt;9 9 9&lt;br&gt;10 10 10&lt;br&gt;Jack (J) 11 10&lt;br&gt;Queen (Q) 12 10&lt;br&gt;King (K) 13 10&lt;br&gt;Now, you can randomly generate a card from Ace to King, rather than randomly generating&lt;br&gt;a value. You will modify your program so that you can determine how to display each card,&lt;br&gt;as well as what value it has.&lt;br&gt;1. Write a function value_of_card(card) that takes as a parameter an int-encoded&lt;br&gt;card as described above (i.e., an int value from 1 to 13) and returns its point value as&lt;br&gt;described above.&lt;br&gt;2. Write a function string_of_card(card) that takes as a parameter an int-encoded&lt;br&gt;card as described above and returns the card’s string value for printing during the&lt;br&gt;game.&lt;br&gt;For example, string_of_card(5) should return “5”, and string_of_card(12) (a&lt;br&gt;Queen) should return “Q”.&lt;br&gt;3. Modify the play_hand function to generate a random card, rather than a random card&lt;br&gt;value. When adding a card to the player or dealer’s total, use value_of_card(card),&lt;br&gt;and when displaying a card, use string_of_card(card).&lt;br&gt;Here is an example run after completing this stage:&lt;br&gt;Name? Bill&lt;br&gt;6&lt;br&gt;Bill has $1,000&lt;br&gt;Dealer received 2&lt;br&gt;Bill received A&lt;br&gt;Bill received K&lt;br&gt;Dealer total: 2&lt;br&gt;Bill total: 21&lt;br&gt;Dealer received A&lt;br&gt;Dealer total: 13&lt;br&gt;Bill total: 21&lt;br&gt;Dealer received 9&lt;br&gt;Dealer total: 22&lt;br&gt;Bill total: 21&lt;br&gt;Dealer bust&lt;br&gt;Bill has $1,025&lt;br&gt;Play again? (y/n) y&lt;br&gt;Dealer received K&lt;br&gt;Bill received 6&lt;br&gt;Bill received Q&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 16&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received 6&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 22&lt;br&gt;Bill bust&lt;br&gt;Bill has $1,000&lt;br&gt;Play again? (y/n) n&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;7&lt;br&gt;Lab Session 2, Mar 2–Mar 3&lt;br&gt;Activity 3&lt;br&gt;In this activity, you will save the player’s game and allow them to resume. You will use file&lt;br&gt;I/O as discussed in lecture. You will save and restore the player’s name and money total.&lt;br&gt;1. Write a function save(name, money) that saves the user’s name and money to the&lt;br&gt;file blackjack.save.&lt;br&gt;Hint: In order to restore this information successfully, you should save these two&lt;br&gt;pieces of information on separate lines of the file.&lt;br&gt;2. Write a function restore() that attempts to read the user’s name and money from&lt;br&gt;the file blackjack.save. If it is successful, it should return these values as a string and&lt;br&gt;an int, respectively. If it fails, it should return ‘’, -1 to indicate it was unsuccessful.&lt;br&gt;3. Modify function main() to call save(name, money) before quitting.&lt;br&gt;4. Modify function main() to call restore() when starting up. If the load was successful,&lt;br&gt;ask the user if they would like to resume or start a new game. If it was unsuccessful,&lt;br&gt;simply start a new game.&lt;br&gt;Here is an example run after completing this stage (nothing has changed yet, because there&lt;br&gt;is no saved game to load):&lt;br&gt;Name? Bill&lt;br&gt;Bill has $1,000&lt;br&gt;Dealer received K&lt;br&gt;Bill received Q&lt;br&gt;Bill received 3&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 13&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received 4&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 17&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received A&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 28&lt;br&gt;Bill bust&lt;br&gt;8&lt;br&gt;Bill has $975&lt;br&gt;Play again? (y/n) y&lt;br&gt;Dealer received Q&lt;br&gt;Bill received J&lt;br&gt;Bill received 6&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 16&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received J&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 26&lt;br&gt;Bill bust&lt;br&gt;Bill has $950&lt;br&gt;Play again? (y/n) n&lt;br&gt;Here is an example of the load functionality when running the program again:&lt;br&gt;Resume saved game ‘Bill’? (y/n) y&lt;br&gt;Bill has $950&lt;br&gt;Dealer received K&lt;br&gt;Bill received 7&lt;br&gt;Bill received Q&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 17&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Dealer received K&lt;br&gt;Dealer total: 20&lt;br&gt;Bill total: 17&lt;br&gt;Dealer wins&lt;br&gt;Bill has $925&lt;br&gt;Play again? (y/n) n&lt;br&gt;Finally, here is an example of starting a new game even though a saved game exists:&lt;br&gt;9&lt;br&gt;Resume saved game ‘Bill’? (y/n) n&lt;br&gt;Name? Phil&lt;br&gt;Phil has $1,000&lt;br&gt;Dealer received 4&lt;br&gt;Phil received 3&lt;br&gt;Phil received J&lt;br&gt;Dealer total: 4&lt;br&gt;Phil total: 13&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Phil received 10&lt;br&gt;Dealer total: 4&lt;br&gt;Phil total: 23&lt;br&gt;Phil bust&lt;br&gt;Phil has $975&lt;br&gt;Play again? (y/n) n&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;10&lt;br&gt;Activity 4&lt;br&gt;In this activity, you will allow the player to change their bet before each hand.&lt;br&gt;1. Write a function input_bet(bet, money) that accepts parameter for the current bet&lt;br&gt;and amount of money available, and returns the bet input from the user. Perform&lt;br&gt;input validation on the following requirements:&lt;br&gt;The bet must be a whole number, cannot be negative, and cannot be greater than the&lt;br&gt;available money. If the user presses enter without typing anything, use the existing&lt;br&gt;bet value (if valid). The user can bet 0, which means they want to quit the game.&lt;br&gt;2. Modify main() to call input_bet(bet, money) before every hand instead of prompt-&lt;br&gt;ing for y/n for another hand. If the user bets 0, save their game and quit.&lt;br&gt;Now, you will need to pass the current bet to the play_hand function, and modify&lt;br&gt;this function so it returns the correct change in the player’s money when they win or&lt;br&gt;lose.&lt;br&gt;Here is an example run after completing this stage:&lt;br&gt;Name? Bill&lt;br&gt;Bill has $1,000&lt;br&gt;Bet? (0 to quit, Enter to stay at $25) 1500&lt;br&gt;Cannot bet more than $1,000&lt;br&gt;Bet? (0 to quit, Enter to stay at $25) Fifty&lt;br&gt;Bet? (0 to quit, Enter to stay at $25) 500&lt;br&gt;Dealer received J&lt;br&gt;Bill received 10&lt;br&gt;Bill received 10&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 20&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received Q&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 30&lt;br&gt;Bill bust&lt;br&gt;Bill has $500&lt;br&gt;Bet? (0 to quit, Enter to stay at $500)&lt;br&gt;Dealer received A&lt;br&gt;Bill received 5&lt;br&gt;Bill received K&lt;br&gt;11&lt;br&gt;Dealer total: 11&lt;br&gt;Bill total: 15&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received A&lt;br&gt;Dealer total: 11&lt;br&gt;Bill total: 26&lt;br&gt;Bill bust&lt;br&gt;Bill has $0&lt;br&gt;Game over&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;12&lt;br&gt;Lab Session 3, Mar 16–Mar 17&lt;br&gt;Activity 5&lt;br&gt;In this activity, you will improve the card drawing functionality even further. In real life,&lt;br&gt;you cannot draw 5 Aces in a single hand. However, if we’re only generating random cards,&lt;br&gt;this is possible. Therefore, for each hand, you will create a deck of cards, shuffle it, and&lt;br&gt;draw from it.&lt;br&gt;1. Write a function new_deck() that returns a list containing 4 Kings, 4 Queens, etc.&lt;br&gt;using the integer encoding from Activity 2.&lt;br&gt;Hint: Use nested loops.&lt;br&gt;2. Write a function shuffle_deck(deck) that returns a shuffled version of the deck.&lt;br&gt;Hint: Use the random module.&lt;br&gt;3. Modify play_hand() so that it creates and shuffles a deck at the start of each hand.&lt;br&gt;Instead of randomly generating cards, “draw” them from the shuffled deck. Be sure&lt;br&gt;that you do not draw the same card from the deck multiple times (e.g., by removing&lt;br&gt;the card you draw from the deck).&lt;br&gt;Unless you know how to count cards, the output after this activity will not look very&lt;br&gt;different. However, your distribution of cards will be more realistic. You should run your&lt;br&gt;program to ensure that you are still getting random-looking cards, and not drawing the&lt;br&gt;same cards over and over again.&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;13&lt;br&gt;Activity 6&lt;br&gt;In this activity, you will modify your encoding of cards so that it stores both the rank (A–K)&lt;br&gt;and the suit (♣, ♦, ♥, ♠).&lt;br&gt;1. Modify new_deck() so that it creates a list of cards where each card is a tuple of size&lt;br&gt;2. Store the int value first, then a string value representing the suit.&lt;br&gt;Hint: You may be able to copy and paste the suit symbols directly into your text&lt;br&gt;editor. If not, you can use the following escape sequences to include the suit symbols&lt;br&gt;in a string literal in Python.&lt;br&gt;Suit Escape sequence&lt;br&gt;♣ \u2663&lt;br&gt;♦ \u2662&lt;br&gt;♥ \u2661&lt;br&gt;♠ \u2660&lt;br&gt;2. Modify value_of_card to account for the change in encoding of cards.&lt;br&gt;3. Modify the string_of_card to print both the rank and suit of the card.&lt;br&gt;Here is an example run after completing this stage:&lt;br&gt;Name? Bill&lt;br&gt;Bill has $1,000&lt;br&gt;Bet? (0 to quit, Enter to stay at $25) 100&lt;br&gt;Dealer received 10♦&lt;br&gt;Bill received 6♦&lt;br&gt;Bill received 2♠&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 8&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bill received A♠&lt;br&gt;Dealer total: 10&lt;br&gt;Bill total: 19&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Dealer received A♣&lt;br&gt;Dealer total: 21&lt;br&gt;Bill total: 19&lt;br&gt;Dealer wins&lt;br&gt;14&lt;br&gt;Bill has $900&lt;br&gt;Bet? (0 to quit, Enter to stay at $100) 0&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;15&lt;br&gt;Lab Session 4, Mar 23–Mar 24&lt;br&gt;Activity 7&lt;br&gt;In this activity, you will modify your program to improve its output. Instead of keeping&lt;br&gt;track of only the total points of the player and dealer, you will keep track of their full hand&lt;br&gt;as a list of cards.&lt;br&gt;1. Write function string_of_hand(hand) that uses the string_of_card(card) func-&lt;br&gt;tion to return a string of an entire hand (encoded as a list of cards).&lt;br&gt;2. Write function value_of_hand(hand) that uses the value_of_card(card) function&lt;br&gt;to return the value of an entire hand of cards.&lt;br&gt;3. Modify the function play_hand so that it keeps track of the hands of the player and&lt;br&gt;dealer, rather than just the total points for their hand. Then modify your output so&lt;br&gt;that it prints the hands instead of individual cards.&lt;br&gt;4. Modify your function value_of_hand(hand) so that it correctly adds the value of&lt;br&gt;Ace.&lt;br&gt;Recall the rule: if an Ace of value 11 would make the hand bust, it is considered to&lt;br&gt;be value 1 instead. Thus, an Ace alone is worth 11, an Ace and a King is worth 21,&lt;br&gt;and two Aces is worth 12.&lt;br&gt;Hint: It may help to create a list of values for each card. For example, if the user&lt;br&gt;has two Aces, first create the list of values [11, 11], then modify it according to the&lt;br&gt;rule.&lt;br&gt;Here is an example run after completing this stage:&lt;br&gt;Name? Bill&lt;br&gt;Bill has $1,000&lt;br&gt;Bet? (0 to quit, Enter to stay at $25) 100&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♥&lt;br&gt;Value: 10&lt;br&gt;Bill’s hand: J♠ 2♣&lt;br&gt;Value: 12&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♥&lt;br&gt;Value: 10&lt;br&gt;16&lt;br&gt;Bill’s hand: J♠ 2♣ 3♣&lt;br&gt;Value: 15&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♥&lt;br&gt;Value: 10&lt;br&gt;Bill’s hand: J♠ 2♣ 3♣ 7♠&lt;br&gt;Value: 22&lt;br&gt;Bill bust&lt;br&gt;Bill has $900&lt;br&gt;Bet? (0 to quit, Enter to stay at $100)&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♦&lt;br&gt;Value: 10&lt;br&gt;Bill’s hand: 4♥ 2♣&lt;br&gt;Value: 6&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♦&lt;br&gt;Value: 10&lt;br&gt;Bill’s hand: 4♥ 2♣ 3♣&lt;br&gt;Value: 9&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♦&lt;br&gt;Value: 10&lt;br&gt;Bill’s hand: 4♥ 2♣ 3♣ 9♣&lt;br&gt;Value: 18&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♦&lt;br&gt;Value: 10&lt;br&gt;Bill’s hand: 4♥ 2♣ 3♣ 9♣ A♥&lt;br&gt;17&lt;br&gt;Value: 19&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♦ 4♣&lt;br&gt;Value: 14&lt;br&gt;Bill’s hand: 4♥ 2♣ 3♣ 9♣ A♥&lt;br&gt;Value: 19&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 10♦ 4♣ K♠&lt;br&gt;Value: 24&lt;br&gt;Bill’s hand: 4♥ 2♣ 3♣ 9♣ A♥&lt;br&gt;Value: 19&lt;br&gt;Dealer bust&lt;br&gt;Bill has $1000&lt;br&gt;Bet? (0 to quit, Enter to stay at $100)&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: A♣&lt;br&gt;Value: 11&lt;br&gt;Bill’s hand: 10♣ 7♣&lt;br&gt;Value: 17&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: A♣&lt;br&gt;Value: 11&lt;br&gt;Bill’s hand: 10♣ 7♣ 7♦&lt;br&gt;Value: 24&lt;br&gt;Bill bust&lt;br&gt;Bill has $900&lt;br&gt;Bet? (0 to quit, Enter to stay at $100)&lt;br&gt;Bet: $100&lt;br&gt;18&lt;br&gt;Dealer’s hand: 8♠&lt;br&gt;Value: 8&lt;br&gt;Bill’s hand: 6♣ K♥&lt;br&gt;Value: 16&lt;br&gt;Move? (hit/stay) h&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 8♠&lt;br&gt;Value: 8&lt;br&gt;Bill’s hand: 6♣ K♥ A♠&lt;br&gt;Value: 17&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 8♠ 5♠&lt;br&gt;Value: 13&lt;br&gt;Bill’s hand: 6♣ K♥ A♠&lt;br&gt;Value: 17&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 8♠ 5♠ 8♦&lt;br&gt;Value: 21&lt;br&gt;Bill’s hand: 6♣ K♥ A♠&lt;br&gt;Value: 17&lt;br&gt;Dealer wins&lt;br&gt;Bill has $800&lt;br&gt;Bet? (0 to quit, Enter to stay at $100)&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 4♦&lt;br&gt;Value: 4&lt;br&gt;Bill’s hand: 2♦ J♥&lt;br&gt;Value: 12&lt;br&gt;Move? (hit/stay) s&lt;br&gt;Bet: $100&lt;br&gt;19&lt;br&gt;Dealer’s hand: 4♦ A♥&lt;br&gt;Value: 15&lt;br&gt;Bill’s hand: 2♦ J♥&lt;br&gt;Value: 12&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 4♦ A♥ A♦&lt;br&gt;Value: 16&lt;br&gt;Bill’s hand: 2♦ J♥&lt;br&gt;Value: 12&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 4♦ A♥ A♦ 10♥&lt;br&gt;Value: 16&lt;br&gt;Bill’s hand: 2♦ J♥&lt;br&gt;Value: 12&lt;br&gt;Bet: $100&lt;br&gt;Dealer’s hand: 4♦ A♥ A♦ 10♥ 8♦&lt;br&gt;Value: 24&lt;br&gt;Bill’s hand: 2♦ J♥&lt;br&gt;Value: 12&lt;br&gt;Dealer bust&lt;br&gt;Bill has $900&lt;br&gt;Bet? (0 to quit, Enter to stay at $100) 0&lt;br&gt;Once you have completed these steps, show your TA your program.&lt;br&gt;20&lt;br&gt;Bonus Activity&lt;br&gt;This optional activity is less guided. Completing it will result in up to 8 bonus project&lt;br&gt;points. In this activity, you will output the money the user has after each hand, in order&lt;br&gt;to graph the result using a spreadsheet program.&lt;br&gt;A csv file, or comma-separated values, is a set of rows where each field is separated by a&lt;br&gt;comma. In this bonus activity, after each hand, output the hand number and total money&lt;br&gt;the user has, to a row in the file blackjack.csv. The data, including the hand number,&lt;br&gt;should continue to accumulate even if the user has saved and resumed their game.&lt;br&gt;An example of such an output might be:&lt;br&gt;1,975&lt;br&gt;2,950&lt;br&gt;3,975&lt;br&gt;4,1000&lt;br&gt;5,1025&lt;br&gt;6,1050&lt;br&gt;7,1025&lt;br&gt;…&lt;br&gt;Once you accomplish this, play at least 20 hands, then open your blackjack.csv file in&lt;br&gt;a spreadsheet program such as Excel or Google Sheets. Draw a line graph showing the&lt;br&gt;amount of money you had over those hands.&lt;br&gt;Submission&lt;br&gt;Submit your .py file as described at &lt;a href=&quot;https://cs.pitt.edu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cs.pitt.edu/&lt;/a&gt; ~ bill/8/#submission.&lt;br&gt;In addition, please include a plain text file entitled README.txt that answers the following&lt;br&gt;questions.&lt;br&gt;1. Which features of your program are working properly, and which are not?&lt;br&gt;2. What was the hardest part about this project? How did you overcome it?&lt;br&gt;3. What feature do you wish you could have added to this project?&lt;br&gt;If you complete the Bonus Activity, submit an image file of your graph, as well.&lt;br&gt;21&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;一个天气数据的处理系统，需要用到array，在线的API接口，数据异常处理等等，根据获取的天气数据做相关处理（增删改查统计等等），&lt;br&gt;最后还有sample run的示例辅助
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CM0718 Program Design and Implementation</title>
    <link href="http://yoursite.com/2016/11/14/page39/"/>
    <id>http://yoursite.com/2016/11/14/page39/</id>
    <published>2016-11-14T00:22:13.000Z</published>
    <updated>2017-01-04T03:58:13.721Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java实现一个带gui版本的贷款记录系统，需要完成贷款记录系统的一些基本的功能操作，用swing完成gui的设计，然后需要生成javadoc文档&lt;br&gt;最后自己需要进行黑盒和白盒测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CM0718 Program Design and Implementation&lt;br&gt;Assignment 2, 2015-16&lt;br&gt;M J Brockway&lt;br&gt;Issued Teaching week 9 in classes and on module web pages&lt;br&gt;Due 23:59 on Friday 13 May, 2016. Links will be provided on the eLP for&lt;br&gt;electronic submission of your work.&lt;br&gt;Marking and feedback will be available within the following 3 weeks in class&lt;br&gt;or via an appointment, or via e-mail.&lt;br&gt;Weighting towards Module 70%&lt;br&gt;Learning Objectives Covered The following learning objectives are either&lt;br&gt;fully or partially covered by this assignment:&lt;br&gt;1. Analyse and specify a programming problem.&lt;br&gt;2. Design a high-level solution to the problem using object oriented and&lt;br&gt;general imperative programming language constructs.&lt;br&gt;3. Write, compile, execute, test and debug an OO program, which maps the&lt;br&gt;high-level design onto concrete programming constructs, using appropriate&lt;br&gt;documentation standards and software tools.&lt;br&gt;4. Critically evaluate the methodologies and conceptual tools used in devel-&lt;br&gt;oping solutions to programming problems.&lt;br&gt;The two main themes of this assignment are programming graphical user inter-&lt;br&gt;faces in Java and using inheritence in Java.&lt;br&gt;The work is set in week 9 of the module by which time you will have covered&lt;br&gt;the key concepts required to complete the work. However, you may find that&lt;br&gt;some of the material discussed after the Easter Vacation may be of use in your&lt;br&gt;implementation of the program.&lt;br&gt;1&lt;br&gt;Problem Specification&lt;br&gt;You are going to provide a version of the loans recording system (assignment 1)&lt;br&gt;with a GUI and some extra functionality.&lt;br&gt;The system needs to be expanded to include items for sale as well as items for&lt;br&gt;loan. The system should hold a price and a number in stock for a sale-item,&lt;br&gt;and a borrower and a return-date for a loan item. Thus there will be two types&lt;br&gt;of Item in the collection.&lt;br&gt;1. LoanItem: consisting of item ID and item description plus a borrower and&lt;br&gt;a return date; the ID consists of the letters LN followed by a three-digit&lt;br&gt;number;&lt;br&gt;2. SaleItem: consisting of item ID and description plus a price and a number&lt;br&gt;in stock; the ID consists of the letters SL followed by a three-digit number;&lt;br&gt;You are provided with two classes as a starting point for the work:&lt;br&gt;• Item a class representing a single item entry in the system. This class&lt;br&gt;contains only the ID and description; you will need to extend it to include&lt;br&gt;the extra data (borrower name and loan date (a long integer) in case of&lt;br&gt;LoanItem and description and quantity in case of SaleItem).&lt;br&gt;• ItemCollection a class representing the collection of item records, and&lt;br&gt;containing functions to save the item data (in text format) to a data file,&lt;br&gt;and to load item data from the file.&lt;br&gt;There is also a sample data file, containing IDs and descriptions only, and a&lt;br&gt;Main.class which illustrates loading from the data file into the item collection,&lt;br&gt;and saving of the item collection to the data file. More on these classes below.&lt;br&gt;Requirements&lt;br&gt;The following are essential functional requirements of the program:&lt;br&gt;1. The system needs to be expanded to include items for sale as well as items&lt;br&gt;for loan, as above.&lt;br&gt;• The Item class needs to be extended to classes LoanItem (record-&lt;br&gt;ing borrower and return data as per assignment 1) and SaleItem,&lt;br&gt;recording price and number in stock in addition to ID, description.&lt;br&gt;• The ItemCollection class needs to be extended also.&lt;br&gt;The ExtendedItemCollection class will inherit the ArrayList&lt;item&gt;&lt;br&gt;and use this to store the two types of Item in one list, but will need&lt;br&gt;extra methods to support the functions set out below.&lt;br&gt;2&lt;br&gt;In particular, the Items in the collection will be a mixture of LoanItems&lt;br&gt;and SaleItems; your code needs to be able to distinguish these.&lt;br&gt;2. Your program should provide the following functions -&lt;br&gt;(a) issue a loan-item on loan;&lt;br&gt;(b) check back in a loan-item;&lt;br&gt;(c) sell some quantity of a sale-item (and update of the number in stock);&lt;br&gt;(d) list all entries;&lt;br&gt;(e) list all loan-item entries;&lt;br&gt;(f) list all loan-items currently on loan;&lt;br&gt;(g) list all sale-item entries;&lt;br&gt;3. The user interface must be a GUI.&lt;br&gt;Figure 1: A GUI for the application&lt;br&gt;General Points&lt;br&gt;1. You must make use of inheritance in developing this program. This should&lt;br&gt;involve you in extending the given Item and ItemCollection classes. Al-&lt;br&gt;3&lt;br&gt;though you may be given the source files, your program you MUST NOT&lt;br&gt;make any changes to these files.&lt;br&gt;2. All interactions must be via a GUI. Typically you can expect to make use&lt;br&gt;of buttons, text areas, and text fields. Your GUI should look something&lt;br&gt;like that depicted in figure 1.&lt;br&gt;3. The program should consist of a number of classes each with well defined&lt;br&gt;functionality. There should be a driver class to set things going; a GUI&lt;br&gt;class to provide the user interface; classes concerned with the address&lt;br&gt;book.&lt;br&gt;4. Your program should deal with error conditions by producing an error&lt;br&gt;dialogue window when the use makes a mistake (Consider the use of JOp-&lt;br&gt;tionPane dialogues for the error dialogues. This will require a little inves-&lt;br&gt;tigation on your part.)&lt;br&gt;5. Input could be via the ‘generic’ dialogues provided by JOptionPane; or&lt;br&gt;you could try making your own custom dialogues extending JDialog class.&lt;br&gt;6. All classes must be fully documented using Javadoc conventions.&lt;br&gt;7. The code you produce must adhere to the published course coding stan-&lt;br&gt;dards. Failure to adhere to the standards will lead to a loss of marks.&lt;br&gt;8. You will be expected to test your program against a suitable set of sit-&lt;br&gt;uations. In the documentation you should describe your testing strategy&lt;br&gt;(see below).&lt;br&gt;Design&lt;br&gt;You must produce design documentation. This will include a class diagram for&lt;br&gt;the system, a short explanation as to the general purpose of each of the classes&lt;br&gt;you have produced and their key methods; and a justification for any design&lt;br&gt;decisions you have made.&lt;br&gt;Implementation&lt;br&gt;You must provide listings for your program. The code must adhere to the Java&lt;br&gt;style standards as defined for the module.&lt;br&gt;Testing&lt;br&gt;You are expected to test your code. During the module we looked at strategies&lt;br&gt;for testing programs. You must apply these strategies to your work.&lt;br&gt;4&lt;br&gt;The testing section of your documentation indicates the approach you have&lt;br&gt;taken to verifying and validating your system. Just as you should not convey&lt;br&gt;the design of your system by presenting the code or even listing the classes,&lt;br&gt;you should not merely list the tests performed. Rather, discuss how tests were&lt;br&gt;selected, why they are sufficient, why a reader should believe that no important&lt;br&gt;tests were omitted, and why the reader should believe that the system will really&lt;br&gt;operate as desired when in use.&lt;br&gt;1. Strategy: An explanation of the overall strategy for testing: Black box&lt;br&gt;and/or white box, integration, kinds of test beds or test drivers used,&lt;br&gt;sources of test data, test suites. You might want to use different techniques&lt;br&gt;(or combinations of techniques) in different parts of the program. In each&lt;br&gt;case, justify your decisions.&lt;br&gt;2. Test Data: A set of tables showing the test data you used for each class,&lt;br&gt;etc. The format of the test documentation should be as follows: for each&lt;br&gt;test case in the tables,&lt;br&gt;• a unique ID&lt;br&gt;• a brief description of the purpose of the test&lt;br&gt;• the pre-conditions for running the test&lt;br&gt;• the test data&lt;br&gt;• the expected result&lt;br&gt;Reflection&lt;br&gt;You must provide a final critical evaluation of your work.&lt;br&gt;The reflection section is where you can generalize from specific failures or suc-&lt;br&gt;cesses to rules that you or others can use in future software development. What&lt;br&gt;surprised you most? What do you wish you knew when you started? How could&lt;br&gt;you have avoided problems that you encountered during development?&lt;br&gt;1. Evaluation: What you regard as the successes and failures of the devel-&lt;br&gt;opment: unresolved design problems, performance problems, etc. Identify&lt;br&gt;which features of your design are the important ones. Point out design&lt;br&gt;or implementation techniques that you are particularly proud of. Dis-&lt;br&gt;cuss what mistakes you made in your design, and the problems that they&lt;br&gt;caused.&lt;br&gt;2. Lessons: What lessons you learned from the experience: how you might&lt;br&gt;do it differently a second time round, and how the faults of the design and&lt;br&gt;implementation may be corrected. Describe factors that caused problems&lt;br&gt;such as missed milestones or to the known bugs and limitations.&lt;br&gt;5&lt;br&gt;3. Known Bugs and Limitations: In what ways does your implementation&lt;br&gt;fall short of the specification? Be precise. Although you will lose points&lt;br&gt;for bugs and missing features, you will receive partial credit for accurately&lt;br&gt;identifying those errors, and the source of the problem.&lt;br&gt;This should be 1 to 2 pages long.&lt;br&gt;Deliverables&lt;br&gt;You are expected to submit the following items:&lt;br&gt;1. Your working Java classes, source code and project files (if approriate).&lt;br&gt;JUnit test classes and sources should be included. Your Java source code&lt;br&gt;should&lt;br&gt;(a) be fully commented in the JavaDoc style;&lt;br&gt;(b) adhere to the defined coding standards.&lt;br&gt;2. a .jar file containing your application classes.&lt;br&gt;3. The HTML documentation produced by JavaDoc.&lt;br&gt;4. A report containing the following sections:&lt;br&gt;(a) A cover page giving your name, University ID, and module details;&lt;br&gt;(b) Design documentation as outlined above;&lt;br&gt;(c) All the test documentation outlned above;&lt;br&gt;(d) Your reflection and critical evaluation, as outlined above&lt;br&gt;(e) Brief instructions on running your program (this will not be marked);&lt;br&gt;Submission is electronic. Electronic Copies of your work should be sub-&lt;br&gt;mitted via the assignment mechanism on the eLP (Blackboard). Separate links&lt;br&gt;will be provided for (1) a ZIP containing your java source, classes, etc, your&lt;br&gt;jar file and your Javadoc-generted documentation; and (2) your report, in PDF&lt;br&gt;format.&lt;br&gt;Academic integrity&lt;br&gt;You must adhere to the university regulations on academic conduct. Formal&lt;br&gt;inquiry proceedings will be instigated if there is any suspicion of plagiarism or&lt;br&gt;any other form of misconduct in your work. Refer to the Universitys Assessment&lt;br&gt;Regulations for Northumbria Awards if you are unclear as to the meaning of&lt;br&gt;these terms. The latest copy is available on the University website.&lt;br&gt;6&lt;br&gt;Classes Provided&lt;br&gt;Your have been given the following .class files from which you will build your&lt;br&gt;new system:&lt;br&gt;• Entry.class&lt;br&gt;• AddressBook.class&lt;br&gt;The documentation for each class is also provided but you should not count on&lt;br&gt;seeing the source code. It is intended that you use the functionality provided&lt;br&gt;by these classes without modifying them in any way.&lt;br&gt;To use these classes&lt;br&gt;1. In BlueJ create the project for the assignment&lt;br&gt;2. Copy the .class files into the folder created for this project. They might&lt;br&gt;NOT appear immediately inside BlueJ although later on you may see&lt;br&gt;them.&lt;br&gt;3. Now start to add your own classes.&lt;br&gt;Assessment&lt;br&gt;Feedback will be provided at the end of the semester, about 3 weeks after&lt;br&gt;submission, by inerview or by e-mail.&lt;br&gt;The marking for the assignment is designed to reflect the general guidance given&lt;br&gt;on the University’s web site for the assessment of postgraduate work. Some&lt;br&gt;modifications to the generic criteria have been made to better reflect the nature&lt;br&gt;of the assignment. The marking scheme is set out below.&lt;br&gt;70-100 Distinction Excellent work providing evidence to a very high level of the&lt;br&gt;knowledge, understanding and skills appropriate to level 7. All learning&lt;br&gt;outcomes met, many at high level. Marks at the high end of this range&lt;br&gt;indicate outstanding work where all learning outcomes are met at a high&lt;br&gt;level. Excellent in all the specific areas of the assessment criteria listed&lt;br&gt;below for the assignment; evidence of successful independent learning as&lt;br&gt;demonstrated by the implementation of optional features in the program;&lt;br&gt;use of up-to-date material from a variety of sources; critical evaluation&lt;br&gt;and creative use of theory&lt;br&gt;60-69 Commendation Commendable work providing evidence to a high level&lt;br&gt;of the knowledge, understanding and skills appropriate to level 7. All&lt;br&gt;learning outcomes met, many are more than satisfied. Good in all or&lt;br&gt;7&lt;br&gt;most of: the specific assessment criteria listed below for the assignment;&lt;br&gt;evidence of independent learning; critical evaluation and creative use of&lt;br&gt;theory&lt;br&gt;55-59 Pass Satisfactory work providing evidence of the knowledge, understand-&lt;br&gt;ing and skills appropriate to level 7. All learning outcomes are met. Sat-&lt;br&gt;isfactory in all or most of the assessment criteria listed below.&lt;br&gt;50-54 Pass Adequate work providing evidence of the knowledge, understanding&lt;br&gt;and skills appropriate to level 7 but only at a bare pass level. All learning&lt;br&gt;outcomes are met (or nearly met and balanced by strengths elsewhere).&lt;br&gt;Adequate in all of (or most of, with balancing strength elsewhere) of the&lt;br&gt;criteria listed below.&lt;br&gt;40-49 Fail The program fails to achieve the basic pass criteria specified below.&lt;br&gt;Work is not acceptable in providing evidence of the knowledge, under-&lt;br&gt;standing and skills appropriate to level 7. May be adequate in some but&lt;br&gt;not all of the assessment criteria listed below.&lt;br&gt;1-39 Fail Work is not acceptable and provides little evidence of the knowledge,&lt;br&gt;understanding and skills appropriate to level 7. Few of the learning out-&lt;br&gt;comes are met. Inadequate in terms of the various criteria given below as&lt;br&gt;a basis for judging the work.&lt;br&gt;0 Fail Work not submitted OR Work giving evidence of serious academic&lt;br&gt;misconduct (subject to regulations in ARNA Appendix 1) OR Work show-&lt;br&gt;ing no evidence of the knowledge, understanding and skills appropriate to&lt;br&gt;level 7. None of the learning outcomes are met&lt;br&gt;1. Basic functionality: 20 marks. You must have produced code for the GUI,&lt;br&gt;which must compile. The program must provide via the GUI the basic&lt;br&gt;services provided by the original AddressBook class, e.g. add an entry,&lt;br&gt;find an entry, delete an entry, list all.&lt;br&gt;2. Coding style and quality: 20 marks.&lt;br&gt;• Judicious use of comments, including Javadoc comments;&lt;br&gt;• Good layout, good naming&lt;br&gt;• Good level of class and function decomposition&lt;br&gt;• Simple methods; appropriate use of Java language features.&lt;br&gt;3. Correctness: 20 marks&lt;br&gt;• Robust and correct user interface&lt;br&gt;• Errors handled cleanly.&lt;br&gt;• Significant use of Java object-orientation: inheritence, polymorphism.&lt;br&gt;• Good use of GUI features: there are marks for exploring beyond the&lt;br&gt;basics.&lt;br&gt;8&lt;br&gt;• Well structured listeners, with helper functions.&lt;br&gt;• Program logic is correct.&lt;br&gt;4. Testing: 20 marks&lt;br&gt;• JUnit: a comprehensive set of the JUnit tests; JUnit features (setup,&lt;br&gt;asserts) appropriately used.&lt;br&gt;• The test cases provided to test the program are documented in the&lt;br&gt;report as asked, and justified.&lt;br&gt;5. Report: 20 marks&lt;br&gt;• Design documentation: class diagram and description of roles of&lt;br&gt;classes and their methods; explanation of key design decisions.&lt;br&gt;• Critical evaluation, including issues arising from exploration of ad-&lt;br&gt;vanced GUI features.&lt;br&gt;9&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/item&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java实现一个带gui版本的贷款记录系统，需要完成贷款记录系统的一些基本的功能操作，用swing完成gui的设计，然后需要生成javadoc文档&lt;br&gt;最后自己需要进行黑盒和
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：Assignment 2</title>
    <link href="http://yoursite.com/2016/11/13/page38/"/>
    <id>http://yoursite.com/2016/11/13/page38/</id>
    <published>2016-11-13T14:12:33.000Z</published>
    <updated>2017-01-04T03:59:21.084Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java的网络编程，主要是一个FileSender 发送类和一个FileReceiver接收类， 考察了网络编程的基础知识，CRC32 Checksum验证，&lt;br&gt;消息头的封装和解封，数据的传输等等知识&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;Page 1 of 6&lt;br&gt;Assignment 2&lt;br&gt;Introduction&lt;br&gt;In this assignment, you will transfer a file over UDP protocol on top of an unreliable channel&lt;br&gt;that may either corrupt or drop packets randomly (but always deliver packets in order).&lt;br&gt;Writing Your Programs&lt;br&gt;You are free to write your programs on any platform/IDE that you are familiar with.&lt;br&gt;Grading&lt;br&gt;Your programs will be graded according to their correctness using a grading script:&lt;br&gt;• [2 points] Programs are compilable on sunfire, program execution follows specified&lt;br&gt;Java commands (see sections below).&lt;br&gt;• [1 point] Programs can successfully transfer a file from sender to receiver when channel is&lt;br&gt;perfectly reliable (i.e. no error at all).&lt;br&gt;Page 2 of 6&lt;br&gt;• [1 point] Programs can successfully transfer a file from sender to receiver in the presence of&lt;br&gt;data packet corruption.&lt;br&gt;• [1 point] Programs can successfully transfer a file from sender to receiver in the presence of&lt;br&gt;ACK/NAK packet corruption.&lt;br&gt;• [1 point] Programs can successfully transfer a file from sender to receiver in the presence of&lt;br&gt;data packet loss.&lt;br&gt;• [1 point] Programs can successfully transfer a file from sender to receiver in the presence of&lt;br&gt;ACK/NAK packet loss.&lt;br&gt;• [1 point] Programs can successfully transfer a file from sender to receiver in the presence&lt;br&gt;of both packet corruption and packet loss.&lt;br&gt;To conclude a successful file transfer, received file must have identical content as the&lt;br&gt;sent one (use command cmp to check it on sunfire). Your program should work for&lt;br&gt;both text and binary files, and for both small files and large files (a few MBs).&lt;br&gt;Grading script doesn’t care what messages your programs print on the screen. It just checks&lt;br&gt;if the received file is exactly the same as the sent one in respective test cases.&lt;br&gt;• [2 points] (Who runs faster?) Time taken for your programs to transfer an enormous file&lt;br&gt;(more than 10MB) in the presence of both packet corruption and packet loss will be noted&lt;br&gt;down. The fastest batch of student programs will receive 2 marks and slower programs that&lt;br&gt;are still faster than average will receive 1 mark. J&lt;br&gt;You may apply the knowledge gained from this or other courses as appropriate. However,&lt;br&gt;since the objective of this assignment is to design a fast network transmission protocol,&lt;br&gt;you are NOT allowed to play tricks (e.g., data compression) to gain unfair advantage&lt;br&gt;over your peers. Please consult the teaching team if you are unsure if certain techniques&lt;br&gt;can be used or not.&lt;br&gt;A Word of Advice&lt;br&gt;This assignment is complex and time-consuming. You are suggested to write programs&lt;br&gt;incrementally and modularly. For example, deal with data packet corruption first, then ACK&lt;br&gt;packet corruption, then data packet loss, etc. Test your programs after every single major&lt;br&gt;change. Take note that partial credit will be awarded even if your programs don’t meet all listed&lt;br&gt;requirements.&lt;br&gt;Page 3 of 6&lt;br&gt;Overall Architecture&lt;br&gt;There are three programs in this assignment, FileSender, UnreliNET and&lt;br&gt;FileReceiver. Their relationship is illustrated in Figure 1 below. The FileSender and&lt;br&gt;FileReceiver programs implement a file transfer application over UDP protocol. The&lt;br&gt;UnreliNET program simulates the transmission channel that transmits packets unreliably and&lt;br&gt;randomly corrupts or loses packets. However, for simplicity, you can assume that this channel&lt;br&gt;always delivers packets in order.&lt;br&gt;Figure 1: UnreliNet Simulates Unreliable Network&lt;br&gt;The UnreliNET program acts as a proxy between FileSender and FileReceiver.&lt;br&gt;Instead of sending packets directly to FileReceiver, FileSender sends all packets to&lt;br&gt;UnreliNET. UnreliNET may introduce bit errors to packets or lose packets randomly. It&lt;br&gt;then forwards packets (if not lost) to FileReceiver. When receiving feedback packets from&lt;br&gt;FileReceiver, UnreliNET may also corrupt them or lose them with certain probability&lt;br&gt;before relaying them to FileSender.&lt;br&gt;The UnreliNET program is complete and given. Your task in this assignment is to develop the&lt;br&gt;FileSender and FileReceiver programs so that a file can be successfully transferred&lt;br&gt;from sender to receiver in the presence of possible packet corruption and packet loss. The&lt;br&gt;received file should be identical to the file sent. You may need to implement techniques learnt&lt;br&gt;in lecture, including sequence number, acknowledgement, timeout and retransmission, to&lt;br&gt;ensure that packets are correctly delivered.&lt;br&gt;FileSender Class&lt;br&gt;The FileSender program is basically a file uploader that opens a given file and sends its&lt;br&gt;content as a sequence of packets to UnreliNet. UnreliNet would then corrupt/lose&lt;br&gt;packets with certain probability before relaying them to the FileReceiver program.&lt;br&gt;To run FileSender on sunfire, type command:&lt;br&gt;java  FileSender  &lt;path filename=&quot;&quot;&gt;&lt;/path&gt;  &lt;unrelinetip&gt;&lt;br&gt;&lt;unrelinetport&gt; &lt;rcvfilename&gt;&lt;br&gt;For example:&lt;br&gt;java FileSender ../test/cny.mp3 localhost 9000 gxfc.mp3&lt;br&gt;sends the file cny.mp3 from directory (relative path) ../test to UnreliNet running in&lt;br&gt;the same host at port 9000. UnreliNet will then pass the file to your FileReceiver&lt;br&gt;program to be stored as gxfc.mp3.&lt;br&gt;UnreliNET  FileSender  FileReceiver&lt;br&gt;Page 4 of 6&lt;br&gt;(Note: Windows system uses a different file separator ‘\’, e.g., ..\test\cny.mp3)&lt;br&gt;You may assume that during testing, your sender program will be supplied with the correct&lt;br&gt;path and filename (no more than 100 bytes long). No input validation is needed.&lt;br&gt;UnreliNET Class&lt;br&gt;The UnreliNET program simulates an unreliable channel that may corrupt or lose packets&lt;br&gt;with a certain probability. This program is given and shouldn’t be changed.&lt;br&gt;To run UnreliNET on sunfire, type command:&lt;br&gt;java  UnreliNET  &lt;p_data_corrupt&gt;  &lt;p_ack_corrupt&gt;&lt;br&gt;&lt;p_data_loss&gt; &lt;p_ack_loss&gt; &lt;unrelinetport&gt; &lt;rcvhostname&gt;&lt;br&gt;&lt;rcvport&gt;&lt;br&gt;For example:&lt;br&gt;java UnreliNET 0.3 0.2 0.1 0.05 9000 localhost 9001&lt;br&gt;listens on port 9000 and forwards all received data packets to FileReceiver running on the&lt;br&gt;same host at port 9001, with 30% chance of packet corruption and 10% chance of packet loss.&lt;br&gt;The UnreliNET program also forwards ACK/NAK packets to FileSender, with 20% packet&lt;br&gt;corruption rate and 5% packet loss rate.&lt;br&gt;Packet Corruption Probability&lt;br&gt;The UnreliNET program randomly corrupts or loses data packets and ACK/NAK packets&lt;br&gt;according to the specified parameters P_DATA_CORRUPT, P_ACK_CORRUPT P_ACK_LOSS and&lt;br&gt;P_ACK_LOSS. You can set these values to anything in the range [0, 0.3] during testing (setting a&lt;br&gt;too large corruption/loss rate may result in a very slow file transmission).&lt;br&gt;If you have trouble getting your code to work, it might be advisable to set them to 0 first for&lt;br&gt;debugging purposes.&lt;br&gt;FileReceiver Class&lt;br&gt;The FileReceiver program receives a file from FileSender (through UnreliNET) and&lt;br&gt;saves it in the same directory as the FileReceiver program, with a filename specified by&lt;br&gt;FileSender.&lt;br&gt;To run FileReceiver on sunfire, type command:&lt;br&gt;java FileReceiver &lt;rcvport&gt;&lt;br&gt;For example:&lt;br&gt;java FileReceiver 9001&lt;br&gt;listens on port 9001 and dumps the bytes received into a file whose name is given by sender.&lt;br&gt;Page 5 of 6&lt;br&gt;Running All Three Programs&lt;br&gt;You should first launch FileReceiver, followed by UnreliNET in the second window.&lt;br&gt;Finally, launch FileSender in a third window to start data transmission. All programs should&lt;br&gt;receive user input from command-line argument only. Please always test your programs in&lt;br&gt;localhost to avoid the interference of network traffic on your programs.&lt;br&gt;The UnreliNET program simulates unreliable communication network and runs infinitely.&lt;br&gt;Once launched, you may reuse it in consecutive tests. To manually terminate it, press &lt;ctrl&gt; + c.&lt;br&gt;The UnreliNET program prints out information that is helpful in debugging your programs.&lt;br&gt;However, we will disable such outputs in speed test.&lt;br&gt;The sender and receiver programs shouldn’t communicate with each other directly – all traffic&lt;br&gt;should be forwarded by the UnreliNET program. The sender program should terminate&lt;br&gt;properly (e.g., no exception, no infinite loop) once transmission finishes. However, you may&lt;br&gt;leave the receiver program running infinitely (i.e., no need for receiver to detect end of&lt;br&gt;transmission and terminate, but DO remember to close the file output stream at the end).&lt;br&gt;Self-defined Header/Trailer Fields at Application Layer&lt;br&gt;UDP transmission is unreliable. To detect packet corruption or packet loss, you may need to&lt;br&gt;implement reliability checking and recovery mechanisms at application layer. The following&lt;br&gt;header/trailer fields are suggested though you may have your own design:&lt;br&gt; Sequence number&lt;br&gt; Checksum&lt;br&gt;Note that each packet FileSender sends should contain at most 1000 bytes of application&lt;br&gt;data (inclusive of self-defined header/trailer fields), or UnreliNET program will reject it.&lt;br&gt;Computing Checksum&lt;br&gt;To detect bit errors, FileSender should compute checksum for every outgoing packet and&lt;br&gt;embed it in the packet. FileReceiver needs to re-compute checksum to verify the integrity&lt;br&gt;of a received packet.&lt;br&gt;Please refer to Assignment 0 Exercise 3 on how to compute checksum using Java CRC32 class.&lt;br&gt;Timer and Timeout Value&lt;br&gt;Sender may have to maintain a timer for unacknowledged packet. You are suggested to use the&lt;br&gt;setSoTimeout() method of Java Socket class.&lt;br&gt;You shouldn’t set a timeout value that is larger than 200ms, or your program might be too slow&lt;br&gt;in transmitting data and thus get killed by the grading script.&lt;br&gt;Page 6 of 6&lt;br&gt;Reading/Writing Values to Header/Trailer Fields&lt;br&gt;The number of header/trailer fields and the sequence of their appearance in a packet is the&lt;br&gt;agreement between sender and receiver (i.e. an application layer protocol designed by you).&lt;br&gt;As discussed in tutorial 3, to give value to a header field of a 4-byte integer, you may consider&lt;br&gt;ByteBuffer class from java.nio package. An example is shown below.&lt;br&gt;At sender side:&lt;br&gt;int length = 1000;&lt;br&gt;// allocate a 4-byte array to store converted integer&lt;br&gt;byte[] pktLen = ByteBuffer.allocate(4).putInt(length).array();&lt;br&gt;// copy content of pktLen to the beginning of output buffer of pkt&lt;br&gt;System.arraycopy(pktLen, 0, buffer, 0, pktLen.length);&lt;br&gt;At receiver side:&lt;br&gt;// extract the first 4 bytes of a packet as the integer ‘length’&lt;br&gt;ByteBuffer wrapper = ByteBuffer.wrap(pkt.getData(), 0, 4);&lt;br&gt;int length = wrapper.getInt();&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/ctrl&gt;&lt;/rcvport&gt;&lt;/rcvport&gt;&lt;/rcvhostname&gt;&lt;/unrelinetport&gt;&lt;/p_ack_loss&gt;&lt;/p_data_loss&gt;&lt;/p_ack_corrupt&gt;&lt;/p_data_corrupt&gt;&lt;/rcvfilename&gt;&lt;/unrelinetport&gt;&lt;/unrelinetip&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java的网络编程，主要是一个FileSender 发送类和一个FileReceiver接收类， 考察了网络编程的基础知识，CRC32 Checksum验证，&lt;br&gt;消息头的封
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Network" scheme="http://yoursite.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>C代写：Chat Room</title>
    <link href="http://yoursite.com/2016/11/12/page37/"/>
    <id>http://yoursite.com/2016/11/12/page37/</id>
    <published>2016-11-12T13:22:33.000Z</published>
    <updated>2017-01-04T03:53:16.980Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c语言写一个多人聊天室，大致要求就是做一个能够实现自由加入和退出的聊天室。 一个人发送信息其他人&lt;br&gt;都能收到，消息发送成功要有个提示。每个人加入和退出也会有提示，前面的英&lt;br&gt;文有举例。多人聊天的时候可以分辨出来那句话是谁发的。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;you will implement a multi-user chat program. In C program please.&lt;br&gt;The Bare Minimum&lt;br&gt;The minimum requirement is for a central server that can accept two connections.&lt;br&gt;Either client can then type a message, which is then sent to the server. The server&lt;br&gt;relays the message to the other client. A sample run of the program might look like the&lt;br&gt;following:&lt;br&gt;&amp;gt; ./chat 127.0.0.1&lt;br&gt;What is your screen name? &amp;gt;&amp;gt; KitC&lt;br&gt;KitC has joined the chat.&lt;br&gt;Linda has joined the chat.&lt;br&gt;&amp;gt;&amp;gt; Hi, Linda. Are we having our meeting later today?&lt;br&gt;[Your Message Has Been Sent]&lt;br&gt;Linda: No. I’m really busy writing our paper and&lt;br&gt;a couple other people have conflicts.&lt;br&gt;&amp;gt;&amp;gt; Okay. Thanks!&lt;br&gt;[Your Message Has Been Sent]&lt;br&gt;&amp;gt;&amp;gt; exit&lt;br&gt;KitC has left the chat.&lt;br&gt;This is only an example interface, but shows the minimum requirements of sending&lt;br&gt;messages between the clients. A confirmation that your message has been sent by the&lt;br&gt;client is also a requirement at this level.&lt;br&gt;Level 2 Requirements&lt;br&gt;In Level 2, a few more features may be added. In the example above, there were&lt;br&gt;notifications when a user entered or left the chat. Level 2 code should add this feature.&lt;br&gt;At this level, the server should be able to accept multiple connections | not just two.&lt;br&gt;That means that the server needs to keep track of who sent a message and distribute&lt;br&gt;it to all of the other clients except the one who sent it.&lt;br&gt;Buffet Features&lt;br&gt;If you have time or interest, you can add any or all of the following features.&lt;br&gt;Private messages between clients (Something like @replies in Twitter)&lt;br&gt;Sending a message to a subset of clients&lt;br&gt;Add some pretty formatting to the messages (like colors, line wrapping, etc.)&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c语言写一个多人聊天室，大致要求就是做一个能够实现自由加入和退出的聊天室。 一个人发送信息其他人&lt;br&gt;都能收到，消息发送成功要有个提示。每个人加入和退出也会有提示，前面的英
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C代写：Bonus Lab (Chat Program using Message Queues)</title>
    <link href="http://yoursite.com/2016/11/11/page36/"/>
    <id>http://yoursite.com/2016/11/11/page36/</id>
    <published>2016-11-11T14:32:43.000Z</published>
    <updated>2017-01-04T03:51:37.928Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c语言的纸牌游戏，规定用链表实现功能，包括创建4种花色，洗牌，发牌等功能的实现。&lt;br&gt;最后还提供了sample方便测试，这个题目属于阶段性题目的一部分，以后还会有相应的扩展&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;1&lt;br&gt;ECE175 Computer Programming for Engineering Applications&lt;br&gt;Homework Assignment 8&lt;br&gt;Due Date: Tuesday April 12, 2016 11:59 PM, via D2L&lt;br&gt;Conventions: Name your C programs as hwxpy.c&lt;br&gt;where x corresponds to the homework number and y correspondto the problem number.&lt;br&gt;Write comments to your programs. Programs with no comments will receive PARTIAL&lt;br&gt;credit. For each program that you turn in, at least the following information should be&lt;br&gt;included&lt;br&gt;Author:&lt;br&gt;Date created:&lt;br&gt;- Brief (two lines) description of the program:&lt;br&gt;Submission Instructions: Submit your .c files via D2L Dropbox.&lt;br&gt;Problem 1 (60 pts): Write a C program to&lt;br&gt;1) Create a full deck of 52 cards that are in order. In other words, for each of the four&lt;br&gt;suits, the cards should be in order from Ace (1) through King (13).&lt;br&gt;each card is consisted of&lt;br&gt;suit [clubs (♣),spades (♠),hearts (♥), or diamonds (♦))&lt;br&gt;a face (1(Ace) – 10, Jacks (J), Queens (Q), and Kings (K))&lt;br&gt;To simulate the deck, and each of the players’ hands, you MUST use a dynamic list of&lt;br&gt;cards with the following type&lt;br&gt;typedef struct card_s {&lt;br&gt;char suit;&lt;br&gt;int face;&lt;br&gt;struct card_s *listp;&lt;br&gt;} card;&lt;br&gt;At the HW demo time, you will be asked to print the deck that you create.&lt;br&gt;2) shuffle the deck (52 cards), using the following algorithm:&lt;br&gt;(a) For each card in the deck, get a random number in the range of 0 to 50 to be&lt;br&gt;used as the index of the element to swap that card with, i.e.&lt;br&gt;if deck[0] holds the Jack of clubs (J ♣) and the random number generated was&lt;br&gt;24, and deck[24] holds the 9 of diamonds (9♦), then&lt;br&gt;after the first swap, deck[0] would hold the 9 of diamonds (9♦) and&lt;br&gt;24] would hold the Jack of clubs (J ♣). You would then proceed to&lt;br&gt;deck[1], find a random index of a card to swap with, and swap those cards,&lt;br&gt;etc.&lt;br&gt;(b) Repeat step (a) at least 100 times.&lt;br&gt;Note: You must seed the random number generator with a call to time() with&lt;br&gt;srand(). [see sec 2.22 Random numbers in your Zyante book]&lt;br&gt;At the HW demo time, you will be asked to print the deck after the shuffle is done.&lt;br&gt;3) deal the cards (after shuffling the deck) by giving one card to the user/player,&lt;br&gt;followed by one card to the computer/dealer, followed by one card to the&lt;br&gt;2&lt;br&gt;user/player, etc. until each player get 8 cards. There are only 2 players&lt;br&gt;(computer/dealer and one user/player).&lt;br&gt;The player’s hand is represented as a dynamic list of cards. The list is populated&lt;br&gt;with the cards drawn by the player.&lt;br&gt;The dealer’s hand is represented as a dynamic list of cards. The list is populated&lt;br&gt;with the cards drawn by the dealer.&lt;br&gt;Note: the card(s) added to each of the player/dealer’s hand (drawn from the deck)&lt;br&gt;must be added to that player/dealer’s linked list correctly and MUST be removed&lt;br&gt;from the deck.&lt;br&gt;At the HW demo time, you will be asked to print both computer’s hand and user’s hand&lt;br&gt;Note: your program can do one of the followings (pick one):&lt;br&gt;♣, ♠, ♥, ♦&lt;br&gt;OR  display club, spade, heart, diamond&lt;br&gt;Sample code execution 1:&lt;br&gt;Note: your program will NOT&lt;br&gt;get exactly these shuffle&lt;br&gt;cards since rand() is used!&lt;br&gt;Note: you can see that the shuffled&lt;br&gt;cards are distributed to each hand in&lt;br&gt;an alternate fashion and starts with a&lt;br&gt;player/user hand.&lt;br&gt;- 1st card from the shuffled one is 4 of&lt;br&gt;club which is assigned to player’s&lt;br&gt;hand&lt;br&gt;- 2nd card from the shuffled one is 2&lt;br&gt;of spade which is assigned to&lt;br&gt;computer’s hand&lt;br&gt;- 3rd card from the shuffled one is 10&lt;br&gt;of spade which is assigned to player’s&lt;br&gt;hand&lt;br&gt;- etc.&lt;br&gt;3&lt;br&gt;Sample code execution 2:&lt;br&gt;Note: your program will NOT get&lt;br&gt;exactly these shuffle cards since&lt;br&gt;rand() is used!&lt;br&gt;Note: you can see that the shuffled cards are&lt;br&gt;distributed to each hand in an alternate fashion&lt;br&gt;and starts with a player/user hand.&lt;br&gt;- 1st card from the shuffled one is A ♦ which is&lt;br&gt;assigned to player’s hand&lt;br&gt;- 2nd card from the shuffled one is 6 ♦ which is&lt;br&gt;assigned to computer’s hand&lt;br&gt;- 3rd card from the shuffled one is  5♣  which is&lt;br&gt;assigned to player’s hand&lt;br&gt;- etc.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c语言的纸牌游戏，规定用链表实现功能，包括创建4种花色，洗牌，发牌等功能的实现。&lt;br&gt;最后还提供了sample方便测试，这个题目属于阶段性题目的一部分，以后还会有相应的扩展&lt;
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C代写：Bonus Lab (Chat Program using Message Queues)</title>
    <link href="http://yoursite.com/2016/11/11/page35/"/>
    <id>http://yoursite.com/2016/11/11/page35/</id>
    <published>2016-11-11T14:32:43.000Z</published>
    <updated>2017-01-04T03:50:07.945Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;unix的IPC通讯，涉及到消息队列，共享内存等等多进程知识，是操作系统的必须课程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;In this assignment you are to develop a chat program between two users, similar to the&lt;br&gt;one already available on the UNIX system called talk. When two instances of your&lt;br&gt;program are being run simultaneously on the system, a user typing in one instance will be&lt;br&gt;able to send the message typed to the user running the other instance of the program.&lt;br&gt;User interface can be a very simple one by using printf() and scanf() functions of the C&lt;br&gt;programming language. IPC mechanism is going to be developed using Message Queues.&lt;br&gt;Important: You should design your code so that when the user is waiting to type a&lt;br&gt;message, at the same time messages are being retrieved from the queue if they arrive in it.&lt;br&gt;This requires multi-threaded program.&lt;br&gt;Specifics&lt;br&gt;IPC Introduction and naming&lt;br&gt;Under UNIX operating system, apart from pipes and signals as primitive type of IPC,&lt;br&gt;from System V release new techniques were added: message queues, semaphores and&lt;br&gt;shared memory. You can investigate the status of IPC facilities on the system by entering&lt;br&gt;ipcs –b on the command prompt. IPC Message queues will exist even after the process&lt;br&gt;creating it terminates, thus it should be manually removed with the ipcrm –q &lt;id&gt;&lt;br&gt;command, since IPC resources on a system are limited.&lt;br&gt;IPC system calls related to the Message Queues that is the mechanism of choice for the&lt;br&gt;IPC are: msgget for allocating an IPC or gaining access to an existing queue. msgctl to&lt;br&gt;control an IPC, modify its status and/or remove it. Lastly, for sending and receiving&lt;br&gt;messages msgsnd and msgrcv are used.&lt;br&gt;Once an IPC facility is created using the msgget function, an IPC identifier is returned by&lt;br&gt;the system. The user creating the IPC facility identified by the returned identifier should&lt;br&gt;specify the access permissions. Header &lt;sys ipc.h=&quot;&quot;&gt; defines the IPC permissions structure&lt;br&gt;called: ipc_perm. Also, &lt;sys types.h=&quot;&quot;&gt; needs to be included in every program before the&lt;br&gt;sys/ipc.h is included.&lt;br&gt;The unique system-wide identifier identifies message queues. To create such an identifier&lt;br&gt;of type key_t defined in the &lt;sys ipc.h=&quot;&quot;&gt; file, ftok() function should be used. If ftok() is&lt;br&gt;called with the same arguments from two different processes, the same key would be&lt;br&gt;produced, thus two different processes would be able to access the same IPC facility.&lt;br&gt;For example:&lt;br&gt;key_t key;&lt;br&gt;key = ftok(“.”, 123);&lt;br&gt;First argument is the reference to an existing accessible file (in UNIX, file “.” – a&lt;br&gt;reference to the current directory is always available and accessible). Second argument is&lt;br&gt;some integer, referred to as an id. There are also constants to be passed as an ID: for&lt;br&gt;example IPC_PRIVATE that assures that returned key is always unique.&lt;br&gt;Creating Message Queue&lt;br&gt;A message queue is created using the msgget system call. If successful, a non-negative&lt;br&gt;integer is returned which is a message queue identifier that can be used in subsequent&lt;br&gt;calls that reference it. First parameter is the key returned by ftok(), and the second&lt;br&gt;parameter is the access permission that is of the same format as the chmod command&lt;br&gt;parameter. Passing 0777 would give read and write permissions to everyone on the&lt;br&gt;system. To verify proper access permissions are made, once the queue is created, you can&lt;br&gt;observe set permissions with the ipcs –b command described at the beginning of this&lt;br&gt;section. Furthermore, use the IPC_CREAT flag ORed with the 0777 to assure that the&lt;br&gt;queue is created if it does not exist or if it already exist, an identifier to it is simply&lt;br&gt;returned.&lt;br&gt;For example:&lt;br&gt;mq_handle = msgget(key, IPC_CREAT | 0777);&lt;br&gt;if(mq_handle&amp;lt;=-1) {&lt;br&gt;printf(“Error creating message queue\n”);&lt;br&gt;perror(“MQ Sample”); /&lt;em&gt; print the error &lt;/em&gt;/&lt;br&gt;return(1);&lt;br&gt;}&lt;br&gt;Obtaining information about the message queue&lt;br&gt;Using the msgctl function and the IPC_STAT flag passed to it, information about the&lt;br&gt;queue, its owner, number of bytes on the queue, number of messages, etc…can be&lt;br&gt;obtained. An include file &lt;sys msg.h=&quot;&quot;&gt; needs also to be included in the program.&lt;br&gt;For example:&lt;br&gt;struct msqid_ds *info;&lt;br&gt;int ret;&lt;br&gt;…&lt;br&gt;ret = msgctl(mq_handle, IPC_STAT, info);&lt;br&gt;if(ret==-1) {&lt;br&gt;printf(“Failed to obtain message queue information\n”);&lt;br&gt;perror(“MQ Sample”);exit(1); }&lt;br&gt;printf(“# of messages on queue: %d\n”, info-&amp;gt;msg_qnum);&lt;br&gt;Communicating through Message Queue&lt;br&gt;A message is defined in the struct msgbuf in the include file &lt;sys msg.h=&quot;&quot;&gt;. First field of&lt;br&gt;the structure, mtype, is an user-defined positive integer id, agreed between the programs&lt;br&gt;using the message queue to selectively retrieve the messages from it. Suppose, 4&lt;br&gt;programs (instances of the chat program) are using the same message queue, in that case&lt;br&gt;the following should be done to assure proper bi-directional communication:&lt;br&gt;Instance 1  Instance 2  Instance 3  Instance 4&lt;br&gt;Instance 1  –  12  13  14&lt;br&gt;Instance 2  21  –  23  24&lt;br&gt;Instance 3  31  32  –  34&lt;br&gt;Instance 4  41  42  43  –&lt;br&gt;For example:&lt;br&gt;Instance 1 will use mtype=12 to send a message to the Instance 2 and also Instance 1 will&lt;br&gt;retrieve messages that have mtype=21. Instance 2 will use mtype=12 to retrieve messages&lt;br&gt;from the queue from the Instance 1 and it will use mtype=21 to send a message to the&lt;br&gt;Instance 1. Thus, we assure that there is a bi-directional communication on the same&lt;br&gt;channel (same message queue) that is shared by many instances of the same chat program&lt;br&gt;and messages are not delivered to the wrong instance.&lt;br&gt;msgsend()&lt;br&gt;msgsend() takes four parameters and it returns 0 on success and –1 on failure setting the&lt;br&gt;errno global variable to a pre-specified number that can be examined to retrieve the error&lt;br&gt;(or by using perror() function to get a meaningful message).&lt;br&gt;First parameter is the identifier of the message queue. Second parameter is the pointer to&lt;br&gt;the actual message. Third parameter is the size of the message obtained by using the&lt;br&gt;sizeof operator, and the last parameter is the flags. IPC_NOWAIT is one flag, which&lt;br&gt;causes a non-blocking send (send would block if the queue was full) or a zero can be&lt;br&gt;passed if no flags are needed).&lt;br&gt;msgrcv()&lt;br&gt;msgrcv() takes five parameters. First one is the queue identifier. Second one is the pointer&lt;br&gt;to where the received message will be placed (receiver’s end structure should have the&lt;br&gt;first member as ulong to assure message type can be correctly written). Third one is the&lt;br&gt;maximum size of the message that can be received. Fourth parameter specifies which&lt;br&gt;messages should be received: an identifier used in mtype at the sender’s side or 0 to&lt;br&gt;retrieve all messages. Fifth parameter is the flags. IPC_NOWAIT is to create a no-&lt;br&gt;blocking receive and MSG_NOERROR is not to produce any error if the message&lt;br&gt;received is bigger than the maximum size specified. If MSG_NOERROR is not specified&lt;br&gt;and message received is larger than the maximum specified size an error will occur.&lt;br&gt;msgrcv() returns –1 on failure or number of bytes received if it is successful. On error, it&lt;br&gt;also sets errno global variable able to be retrieved using perror().&lt;br&gt;Submission&lt;br&gt;You should submit your C program on Carmen along with details on how to run it and&lt;br&gt;anything else that would allow the grader to grade your work.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/sys&gt;&lt;/sys&gt;&lt;/sys&gt;&lt;/sys&gt;&lt;/sys&gt;&lt;/id&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;unix的IPC通讯，涉及到消息队列，共享内存等等多进程知识，是操作系统的必须课程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;In this
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="unix" scheme="http://yoursite.com/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>C代写：Software Tools and Systems Programming</title>
    <link href="http://yoursite.com/2016/11/10/page34/"/>
    <id>http://yoursite.com/2016/11/10/page34/</id>
    <published>2016-11-10T15:12:56.000Z</published>
    <updated>2017-01-04T03:41:48.727Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c语言的数据结构，联系完成二叉搜索树和B树的实现和操作，给了函数声明的模板，在linux下编译，makefle也是自己写，最后通过&lt;br&gt;makefile编译然后完成测试工作&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;THE UNIVERSITY OF WESTERN ONTARIO&lt;br&gt;DEPARTMENT OF COMPUTER SCIENCE&lt;br&gt;LONDON CANADA&lt;br&gt;Software Tools and Systems Programming&lt;br&gt;(Computer Science 2211b)&lt;br&gt;ASSIGNMENT 5&lt;br&gt;Due date: Thursday, March 31, 2016, 11:55 PM&lt;br&gt;Assignment overview&lt;br&gt;Objectives. The purpose of this assignment is to get experience with&lt;br&gt;• advanced data structures,&lt;br&gt;• manipulation of pointers and C constructs,&lt;br&gt;• dynamic allocation and and deallocation of memory,&lt;br&gt;• organizing code in multiple files,&lt;br&gt;• writing Makefile to compile your code.&lt;br&gt;In this assignment, you are to write a C program to implement a sparse matrix structure&lt;br&gt;(2D array) indexed by a pair of strings using binary search trees.&lt;br&gt;Assignment basic requirements. The code should be well documented and logically&lt;br&gt;organized. The comments should be proper. Your code should be tested carefully before&lt;br&gt;submitting it, especially for boundary cases, such as empty data-structures. Avoid segmen-&lt;br&gt;tation fault and memory leak.&lt;br&gt;1 Preliminaries&lt;br&gt;In this assignment, you will implement the following data structures.&lt;br&gt;Binary search tree&lt;br&gt;This will be implemented with pointers and structures. The key type is a pair of strings (a&lt;br&gt;pair of pointers to char) which will be used later as indices of the matrix structure. The&lt;br&gt;data type can be any type and in this assignment it is float.&lt;br&gt;The type definitions for key and data in C are the following.&lt;br&gt;typedef float Data_Item;&lt;br&gt;typedef char&lt;em&gt; Sub_Key;&lt;br&gt;typedef struct {Sub_Key key1; Sub_Key key2} Key;&lt;br&gt;You will need a function to generate a key from a pair of strings, a function to print a key,&lt;br&gt;a function to print a data, and a function to compare two keys.&lt;br&gt;1&lt;br&gt;int key_comp(Key key1, Key key2);&lt;br&gt;Key key_gen(Sub_Key key1, Sub_Key key2);&lt;br&gt;void key_print(Key key);&lt;br&gt;void data_print(Data_Item data);&lt;br&gt;The type definitions for binary search trees are the following:&lt;br&gt;struct Bst_Node {&lt;br&gt;Key key;&lt;br&gt;Data_Item data;&lt;br&gt;struct Bst_Node &lt;/em&gt;left, &lt;em&gt;right;&lt;br&gt;};&lt;br&gt;typedef struct Bst_Node BStree_node;&lt;br&gt;typedef BStree_node** BStree;&lt;br&gt;The operations for binary search trees are the following.&lt;br&gt;BStree bs_tree_ini(void);&lt;br&gt;Allocate memory of type BStree node&lt;/em&gt;, set the value to NULL, and return a pointer to the&lt;br&gt;allocated memory.&lt;br&gt;void bs_tree_insert(BStree bst, Key key, Data_Item data);&lt;br&gt;Insert data with key into bst. If key is in bst, then do nothing.&lt;br&gt;Data_Item &lt;em&gt;bs_tree_search(BStree bst, Key key);&lt;br&gt;If key is in bst, return a pointer to key’s associated data. If key is not in bst, return&lt;br&gt;NULL.&lt;br&gt;void bs_tree_traversal(BStree bst);&lt;br&gt;In order traversal of bst and print each node’s key and data.&lt;br&gt;void bs_tree_free(BStree bst);&lt;br&gt;Free all the dynamically allocated memory of bst.&lt;br&gt;A Matrix Indexed by a pair of Strings&lt;br&gt;The matrix structure will be implemented as Matrix using BStree.&lt;br&gt;The type definition in C is the following.&lt;br&gt;typedef BStree Matrix;&lt;br&gt;typedef Sub_Key Index;&lt;br&gt;The operations are the following.&lt;br&gt;Matrix matrix_construction(void);&lt;br&gt;Matrix construction using bs tree ini();&lt;br&gt;Data_Item &lt;/em&gt;matrix_get(Matrix m, Index index1, Index index2);&lt;br&gt;2&lt;br&gt;If at location (index1, index2) in Matrix m, the value is defined, then return a pointer to&lt;br&gt;the associated data. Otherwise, return NULL.&lt;br&gt;void matrix_set(Matrix m, Index index1, Index index2, Data_Item data);&lt;br&gt;Assign data to Matrix m at location (index1, index2).&lt;br&gt;void matrix_listing(Matrix m);&lt;br&gt;Print values in the Matrix m (with bs tree traversal()).&lt;br&gt;void matrix_destruction(Matrix m);&lt;br&gt;Free allocated space (with bs tree free()).&lt;br&gt;2 Organizing the code into multiple files&lt;br&gt;For this assignment you are to organize the code in the following way:&lt;br&gt;• In the file datatype.h, define the type Data Item, the type Sub Key, the type Key, and&lt;br&gt;declare prototypes of the functions for type Data Item and type Key.&lt;br&gt;• In the file datatype.c, implement the functions for type Data Item and type Key.&lt;br&gt;• In the file bs tree.h, define the type BStree node, the type BStree and declare proto-&lt;br&gt;types of the operations on BStree.&lt;br&gt;• In the file bs tree.c, implement the functions on BStree.&lt;br&gt;• In the file matrix.h, define the type Index and the type Matrix and declare prototypes&lt;br&gt;of the operations on Matrix.&lt;br&gt;• In the file matrix.c, implement the functions on Matrix.&lt;br&gt;• In the file main.c, your program will&lt;br&gt;1. create a new Matrix.&lt;br&gt;2. read from stdin, or redirect from a file, string pairs (a pair of strings, i.e. two&lt;br&gt;strings, per line) and then calculate occurrences of each string pair read using the&lt;br&gt;Matrix created.&lt;br&gt;3. print the data in the Matrix&lt;br&gt;4. free all allocated memory spaces for the Matrix and terminate.&lt;br&gt;A sample input is given below.&lt;br&gt;bba aa&lt;br&gt;aab aab&lt;br&gt;bba aa&lt;br&gt;aab abb&lt;br&gt;bba aaa&lt;br&gt;3&lt;br&gt;A sample output is given below.&lt;br&gt;String 1 String 2 Occurrence&lt;br&gt;aab aab 1&lt;br&gt;aab abb 1&lt;br&gt;bba aa 2&lt;br&gt;bba aaa 1&lt;br&gt;3 Creating a Makefile to compile the source code&lt;br&gt;You are asked to create a Makefile to compile your source code. When “make” is typed,&lt;br&gt;an executable program called “mymatrix” is generated. Typing “make clean” cleans all the&lt;br&gt;files generated by “gcc”.&lt;br&gt;4 Testing your program&lt;br&gt;You should implement BStree first and then test it to make sure it is correct before imple-&lt;br&gt;menting Matrix.&lt;br&gt;Your program should have no segmentation fault, no memory leak. Your program should&lt;br&gt;print all the elements correctly.&lt;br&gt;You should test your program by running it on Gaul. Capture the screen of your testing by&lt;br&gt;using script command.&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c语言的数据结构，联系完成二叉搜索树和B树的实现和操作，给了函数声明的模板，在linux下编译，makefle也是自己写，最后通过&lt;br&gt;makefile编译然后完成测试工作&lt;
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C代写：BULK FOOD STORE PROGRAM</title>
    <link href="http://yoursite.com/2016/11/09/page33/"/>
    <id>http://yoursite.com/2016/11/09/page33/</id>
    <published>2016-11-08T19:02:46.000Z</published>
    <updated>2017-01-04T03:39:43.727Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;初级的c语言入门知识，完成一个散装食品商店程序，考察点包括程序格式要求，&lt;br&gt;用户界面是否美观，c语言基础知识的应用，还有异常的处理等。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;1&lt;br&gt;BULK FOOD STORE PROGRAM&lt;br&gt;Instructions:&lt;br&gt;Develop a C program which has to have all the required functions and features listed below.&lt;br&gt;Other than these, you are free to create/add other functions/features that you feel may be&lt;br&gt;useful for the application.&lt;br&gt;You are required to develop this program BY YOURSELF!!! The program that you submit MUST&lt;br&gt;BE THE FINAL VERSION, and MUST BE YOUR OWN WORK!!&lt;br&gt;You MUST NOT COPY any CODE from ANYBODY ELSE. If your program is found to be&lt;br&gt;the same as any other student with just a few variable names changed or a few lines of code&lt;br&gt;changed, both YOU and the OTHER person(s) will be assigned a MARK of ZERO as well as be&lt;br&gt;subject to disciplinary action under the ACADEMIC Misconduct Policy !!!&lt;br&gt;To avoid this from happening to you, you must NEVER give any type of COPY of your code to&lt;br&gt;anybody else until at least 1 week after the project due date.&lt;br&gt;LATE SUBMISSIONS GET A MARK OF 0 !&lt;br&gt;The program and project document must be submitted on&lt;br&gt;Wednesday March 16, or Thursday March 17, or Friday March 18,&lt;br&gt;2016 during your corresponding Lab. Sessions.&lt;br&gt;You are required to submit the following:&lt;br&gt;A program called PROJECT.C and the screenshot of your program output.&lt;br&gt;Project Assessment:&lt;br&gt;The marks will be assigned on the following basis:&lt;br&gt;1. Program Format - programmer’s block, indentation, and adequate comments&lt;br&gt;2. User Interface - appearance to users, ease of use, checking for out of range input&lt;br&gt;3. No compile or run time errors&lt;br&gt;4. Functionality and Structure&lt;br&gt;The basic functions/features for the application as required, applying topics such as #defines,&lt;br&gt;if..else, loops, switch/case, etc.&lt;br&gt;Project Marking Scheme&lt;br&gt;Marks will be assigned as follows:&lt;br&gt;Program Functionality: 2 marks&lt;br&gt;Programmer’s block and comments: 1 mark&lt;br&gt;Program Clarity/Organization: 1 mark&lt;br&gt;Ease of use, format and appearance to the user: 1 mark&lt;br&gt;Total: 5 Marks&lt;br&gt;2&lt;br&gt;Description:&lt;br&gt;1. Required Functionalities:&lt;br&gt;When the program initializes, the user should be presented with the following MAIN MENU:&lt;br&gt;BULK FOOD STORE PROGRAM&lt;br&gt;Item Description Cost/lb # Pounds Subtotal&lt;br&gt;A candy 4.55 0.00 $ 0.00&lt;br&gt;B Flour 1.50 0.00 $ 0.00&lt;br&gt;C Soup 2.88 0.00 $ 0.00&lt;br&gt;D Walnuts 5.25 0.00 $ 0.00&lt;br&gt;E Rice 1.05 0.00 $ 0.00&lt;br&gt;F Noodles 0.35 0.00 $ 0.00&lt;br&gt;G Sugar 0.92 0.00 $ 0.00&lt;br&gt;H Cake 1.45 0.00 $ 0.00&lt;br&gt;total pounds = 0.00 SUBTOTAL $ 0.00&lt;br&gt;Avg. Cost/lb = 0.00 HST Amount $ 0.00&lt;br&gt;TOTAL Amount $ 0.00&lt;br&gt;Your choice (R to RESET, Q to quit) ==&amp;gt;&lt;br&gt;3&lt;br&gt;2. Required Functionalities (continued):&lt;br&gt;(i)  Your program should accept ONLY UPPER/lower Case characters A-H (or a-h) as&lt;br&gt;well as R and Q (or r and q).&lt;br&gt;(ii)  All other user input for choice should cause an AUDIBLE BEEP, and not be accepted.&lt;br&gt;If the user enters a letter (Upper or Lower case) from A-H (or a-h), it should then&lt;br&gt;prompt the user for the number of POUNDS.&lt;br&gt;(iii)  Pounds should be a floating point value. Negative values for POUNDS should cause&lt;br&gt;an AUDIBLE BEEP and not be accepted.&lt;br&gt;(iv)  The number of POUNDS should be multiplied by the COST/LB value to generate a&lt;br&gt;subtotal to 2 decimal places for that ITEM. The ITEM SUBTOTALS should be&lt;br&gt;added together to give the SUBTOTAL at the bottom.&lt;br&gt;(v)  The HST tax amounts should be generated for the bottom SUBTOTAL to give the&lt;br&gt;TOTAL Amount.&lt;br&gt;(vi)  The number of POUNDS column should be added together to get the TOTAL&lt;br&gt;POUNDS. You should then take the SUBTOTAL COST at the bottom and divide it&lt;br&gt;by the TOTAL Pounds to get the Avg Cost/lb.&lt;br&gt;(vii)  Remember that you cannot divide by 0, so this will have to be taken into account before&lt;br&gt;displaying this value at start up and after choosing Reset.&lt;br&gt;(viii) When the user chooses to Quit, the program should display a message and ask the user&lt;br&gt;to:&lt;br&gt;HIT ANY KEY TO CONTINUE…&lt;br&gt;before ending the program.&lt;br&gt;4&lt;br&gt; PROGRAM REQUIREMENTS:&lt;br&gt;Variables: Any variables used in the program must be a LOCAL VARIABLE with the function.&lt;br&gt;When the program first starts, all POUNDS should be set to 0.00&lt;br&gt;Defines: The program must include the following defines:&lt;br&gt;#define A “Candy “&lt;br&gt;#define A_P 4.55&lt;br&gt;#define B “Flour “&lt;br&gt;#define B_P 1.5&lt;br&gt;#define C “Soup “&lt;br&gt;#define C_P 2.88&lt;br&gt;#define D “Walnuts “&lt;br&gt;#define D_P 5.25&lt;br&gt;#define E “Rice “&lt;br&gt;#define E_P 1.05&lt;br&gt;#define F “Noodles “&lt;br&gt;#define F_P 0.35&lt;br&gt;#define G “Sugar “&lt;br&gt;#define G_P 0.92&lt;br&gt;#define H “Cake “&lt;br&gt;#define H_P 1.45&lt;br&gt;Changing a #define(s) should change Description and/or Cost/lb accordingly.&lt;br&gt;Programmer’s Block:&lt;br&gt;The programmer’s block must include the following, in your screenshot as well:&lt;br&gt;FULL NAME:&lt;br&gt;STUDENT ID:&lt;br&gt;LAB SECTION:&lt;br&gt;LAB DAY AND TIME:&lt;br&gt;DESCRIPTION:&lt;br&gt;Please note that this is an individual project and each student should submit&lt;br&gt;his/her project individually.&lt;br&gt;The printed hard copy of the project should be submitted to me in the first ten&lt;br&gt;minutes of your corresponding Lab. Sessions.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;初级的c语言入门知识，完成一个散装食品商店程序，考察点包括程序格式要求，&lt;br&gt;用户界面是否美观，c语言基础知识的应用，还有异常的处理等。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Req
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CCIT4020, HKU SPACE Community College</title>
    <link href="http://yoursite.com/2016/11/08/page32/"/>
    <id>http://yoursite.com/2016/11/08/page32/</id>
    <published>2016-11-07T20:09:46.000Z</published>
    <updated>2017-01-03T09:48:56.860Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;完成一个库存管理和记录系统，从inventory.txt文件中读取相关数据， 然后包括增删改查等相关功能，属于c语言的基础入门级别的题目&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;ICP Project 15-16&lt;br&gt;1 / 6&lt;br&gt;Introduction to Computer Programming (ICP)&lt;br&gt;CCIT4020, HKU SPACE Community College, 2015-2016 Semester 2&lt;br&gt;Course Project Guidelines: Inventory Management and Record System&lt;br&gt;1)  Introduction&lt;br&gt;Nowadays, an inventory management and record system is important to manage all related&lt;br&gt;inventories in a logistics corporation for shipping and delivery. In this project, a simple and&lt;br&gt;effective inventory management and record system is developed in order to record, search and&lt;br&gt;back up the data of various items in the company. To avoid any conflict between different data&lt;br&gt;types and any other programming bugs, Input data validation processes are necessary to be&lt;br&gt;employed and developed in the system.&lt;br&gt;1.1) File Format for data storage:&lt;br&gt;In this project, one data file “inventory.txt” is required to back up the data. The “inventory.txt”&lt;br&gt;file contains various data for each item (Name of item, Item number, Subject, Weight, Quantity,&lt;br&gt;Recipient, Final destination, and Delivery status). In this project, we assume that the maximum&lt;br&gt;numbers of item records are 50 and the maximum numbers of characters for name of item,&lt;br&gt;recipient, destination and delivery status) are 30.&lt;br&gt;The format and example of data stored in the data file “inventory.txt” are listed as follows:&lt;br&gt;Name of item #1&lt;br&gt;Item number #1&lt;br&gt;Subject #1&lt;br&gt;Weight #1&lt;br&gt;Quantity #1&lt;br&gt;Recipient #1&lt;br&gt;Final Destination #1&lt;br&gt;Delivery Status #1&lt;br&gt;Name of item #2&lt;br&gt;Item number #2&lt;br&gt;Subject #2&lt;br&gt;Weight #2&lt;br&gt;Quantity #2&lt;br&gt;Recipient #2&lt;br&gt;Final Destination #2&lt;br&gt;Delivery Status #2&lt;br&gt;Name of item #3&lt;br&gt;Item number #3&lt;br&gt;Subject #3&lt;br&gt;Weight #3&lt;br&gt;Quantity #3&lt;br&gt;Recipient #3&lt;br&gt;Final Destination #3&lt;br&gt;Delivery Status #3&lt;br&gt;.&lt;br&gt;.&lt;br&gt;.&lt;br&gt;ICP Project 15-16&lt;br&gt;2 / 6&lt;br&gt;The example of items records stored in the data file is listed as follows:&lt;br&gt;Net Wi-Fi Router&lt;br&gt;1001&lt;br&gt;Electronics&lt;br&gt;2.0 kg&lt;br&gt;1&lt;br&gt;Chan Tai Man&lt;br&gt;Kowloon Bay&lt;br&gt;Delivery&lt;br&gt;Fujo Apple Gift Set&lt;br&gt;Food&lt;br&gt;2552&lt;br&gt;1.2kg&lt;br&gt;1&lt;br&gt;Cheung Wai Ming&lt;br&gt;Yuen Long&lt;br&gt;Arrival&lt;br&gt;Koppo Men Jacket&lt;br&gt;Fashion&lt;br&gt;3003&lt;br&gt;0.5kg&lt;br&gt;2&lt;br&gt;Lee Siu Yu&lt;br&gt;Sha Tin&lt;br&gt;Warehouse&lt;br&gt;.&lt;br&gt;.&lt;br&gt;.&lt;br&gt;ICP Project 15-16&lt;br&gt;3 / 6&lt;br&gt;2)  Project Requirements&lt;br&gt;In this project, students are required to form groups in the same class (4 to max. 5 students per&lt;br&gt;group) to develop a C program (Standalone Console-Based Application) for the inventory&lt;br&gt;management and record system. The C program for this system must include two parts: (1) Basic&lt;br&gt;Functions (group part), and (2) Extra Functions (individual part).&lt;br&gt;The example of Basic Functions (group part) of the system is shown as follows:&lt;br&gt;2.1) Requirements for Basic Function (Group Part)&lt;br&gt;The following functions must be supported in the system:&lt;br&gt; Main Menu: in the main() function&lt;br&gt;o  Show menu page when the program is executed or selected option is completed.&lt;br&gt;o  After the main menu is shown, wait for user to input a number (or character) from&lt;br&gt;options above.&lt;br&gt;  Option ‘1’: Add new item record(s)&lt;br&gt;o  Add a new item in the system and store the information of such item in a data file&lt;br&gt;“inventory.txt”.&lt;br&gt;o  Record “Name of item”, “Item number”, “Subject”, “Weight”, “Quantity”, “Recipient”,&lt;br&gt;“Final destination” and “Delivery status”.&lt;br&gt;o  Ask user to add another new item (if Yes, repeat the step; if No, go back to menu page).&lt;br&gt;ICP Project 15-16&lt;br&gt;4 / 6&lt;br&gt;  Option ‘2’: Display item(s)&lt;br&gt;o  Load and display the items in the system from the corresponding data file&lt;br&gt;“inventory.txt”.&lt;br&gt;o  Display all the item information (Name of item, Item number, Subject, Weight, Quantity,&lt;br&gt;Recipient, Final destination, and Delivery status) line by line on screen.&lt;br&gt;  Option ‘3’: Modify item record(s)&lt;br&gt;o  Update the existing item record and store it to the corresponding data file.&lt;br&gt;o  Ask user to change another item record (if Yes, repeat the step; if No, go back to menu&lt;br&gt;page).&lt;br&gt;  Option ‘4’: Delete item record(s)&lt;br&gt;o  Delete the existing item record and update the records in the data file.&lt;br&gt;o  Ask user to remove another item record (if Yes, repeat the step; if No, go back to menu&lt;br&gt;page).&lt;br&gt;  Option ‘5’: Search item information&lt;br&gt;o  Search and display the item information you searched on screen from the corresponding&lt;br&gt;data file “invenotory.txt”.&lt;br&gt;o  Ask user to search another item record (if Yes, repeat the step; if No, go back to menu&lt;br&gt;page).&lt;br&gt;2.2) Requirements for Extra Function (Individual Part)&lt;br&gt;Each group member is required to develop an extra function (e.g. create a new Option ‘6’ or a new&lt;br&gt;function, etc.) and integrate to the system for this project. These extra functions can be contributed&lt;br&gt;and integrated to the system so as to perform various specific tasks or related purposes. There is no&lt;br&gt;constraint on the function features (except user login with password).&lt;br&gt;Input data&lt;br&gt;Add data for next item&lt;br&gt;ICP Project 15-16&lt;br&gt;5 / 6&lt;br&gt;3)  Submission&lt;br&gt;3.1) Softcopies&lt;br&gt;a) Programming Codes and Files:&lt;br&gt;Softcopies must be submitted to SOUL by a group representative before the deadline. (Group&lt;br&gt;representative is necessary to compress all files/folders into single file for submission)&lt;br&gt;o Save in a FOLDER named “icpClassNo_GroupNo_Basic”&lt;br&gt; Source (.c) files: All program files with the basic function only&lt;br&gt; Executable (.exe) file: Executable file “icpClassNo_GroupNo_Basic.exe”&lt;br&gt; Data files: Data is stored in txt (or dat) file&lt;br&gt;o Save in a FOLDER named “icpClassNo_GroupNo_Basic&amp;amp;Extra”&lt;br&gt; Source (.c) files: All program files with the basic and extra functions&lt;br&gt; Executable (.exe) file: Executable file “icpClassNo_TeamNo_BasExtra.exe”.&lt;br&gt; Data files: Data should be stored in txt (or dat) file.&lt;br&gt; A readme file can be attached in the folder to give details of the extra functions&lt;br&gt;&lt;br&gt;(Remark1: Two folders – Both 1) Basic function, and 2) Basic with Extra Functions are necessary&lt;br&gt;to submit for program comparison and verification)&lt;br&gt;(Remark2: Programming codes or statements must include comments for description or&lt;br&gt;explanation)&lt;br&gt;b) Project Presentation PowerPoint file: named icpClassNo_GroupNo.ppt (or .pptx),&lt;br&gt;The contents of the presentation PowerPoint includes:&lt;br&gt;-  Job distributions,&lt;br&gt;-  Overview of project,&lt;br&gt;-  Programming techniques used in the basic functions, and&lt;br&gt;-  Programming techniques used in the extra functions,&lt;br&gt;(Remarks: Full programming codes are not necessary to show on the PowerPoint slides.)&lt;br&gt;c) Project Submission Form (scanned file)&lt;br&gt;3.2) Project Presentation and Demonstration&lt;br&gt;Project Presentations will be held in Lesson 12. Each group has about 7 minutes including&lt;br&gt;presentation, demonstration, etc.&lt;br&gt;-  All group members must participate in the presentation.&lt;br&gt;-  The presentation must be well-prepared as the tight presentation schedule.&lt;br&gt;-  A presentation PowerPoint is needed during the presentation.&lt;br&gt;ICP Project 15-16&lt;br&gt;6 / 6&lt;br&gt;3.3) Hardcopies&lt;br&gt;The following materials must be submitted during the presentation.&lt;br&gt;-  Project Submission Form and Project Extra Function Forms for all members&lt;br&gt;-  Project Presentation PowerPoint (print with four slides per page and double-sided on&lt;br&gt;each A4 paper)&lt;br&gt;(Important Remark: Double-check the contents in your submission, if they are the most updated&lt;br&gt;versions.)&lt;br&gt;References:&lt;br&gt;Website for DHL&lt;br&gt;&lt;a href=&quot;http://www.dhl.com.hk/tc.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.dhl.com.hk/tc.html&lt;/a&gt;&lt;br&gt;Website for UPS&lt;br&gt;&lt;a href=&quot;https://www.ups.com/hk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ups.com/hk&lt;/a&gt;&lt;br&gt;Website for Taobao (delivery)&lt;br&gt;&lt;a href=&quot;http://world.taobao.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://world.taobao.com/&lt;/a&gt;&lt;br&gt;~ END ~&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;完成一个库存管理和记录系统，从inventory.txt文件中读取相关数据， 然后包括增删改查等相关功能，属于c语言的基础入门级别的题目&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requ
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：assign2</title>
    <link href="http://yoursite.com/2016/11/07/page31/"/>
    <id>http://yoursite.com/2016/11/07/page31/</id>
    <published>2016-11-07T14:04:34.000Z</published>
    <updated>2017-01-03T09:46:19.372Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;本题主要考试面向对象的类的设计思路，完成一个名字叫21点的纸牌游戏，分别设计了card类，deck类，hand类，player类，dealer类，game类完成各种功能，最后main集成驱动测试&lt;br&gt;额外要求是如果牌面相同的话在比一次，对代码风格也有要求。&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Grading: EVERY assignment in this course is graded by demoing your work for&lt;br&gt;10 minutes with a TA. You are required to meet with a TA within two weeks from&lt;br&gt;the due date to demo, and you receive an automatic 50 point deduction for&lt;br&gt;failure to do so. If you miss a scheduled appointment, you will be penalized 10&lt;br&gt;points for rescheduling within 1 day (24 hours), 25 points within 7 days (1 week),&lt;br&gt;and 50 points for anything outside of a week. Your job is to convince the TA that&lt;br&gt;your program works correctly, i.e. show your TA how to use/break your program☺&lt;br&gt;(90 pts) Implementation: Problem Statement&lt;br&gt;You will write a program to play blackjack using C++ classes. Blackjack is a card&lt;br&gt;game that has a dealer and 1 or more players who are trying to get a hand closest to 21&lt;br&gt;without going over. Aces can be 1 or 11, whichever is to your advantage, and all face&lt;br&gt;value cards (Jack, Queen and King) have a value of 10.&lt;br&gt;The players begin with a specific amount of money, and only the players can bet&lt;br&gt;against the dealer. First, everyone decides how much he/she wants to bet. Then,&lt;br&gt;everyone is dealt 2 cards face up, and the dealer gets one face up and one face down.&lt;br&gt;Each player decides whether to receive another card or not without going over 21. If&lt;br&gt;the player goes over 21 (or busts), then he/she immediately loses their bet from their&lt;br&gt;total playing money. After all players finish receiving cards, then the dealer turns over&lt;br&gt;the card that is facing down, and the dealer must receive a new card if the total is below&lt;br&gt;17 and stay/hold if the total is 17 or above.&lt;br&gt; The players with totals over 21 immediately lose their bet from their playing total.&lt;br&gt; If the dealer goes over 21, then the players with 21 and under all win their bet,&lt;br&gt;which is added to their playing total.&lt;br&gt; If the dealer is 21 or under, then the players with card totals less than the dealer&lt;br&gt;lose their bet from their playing total, and those players with card totals greater&lt;br&gt;than the dealer win their bet, which is added to their playing total.&lt;br&gt; Players who have the same card total as the dealer neither win nor lose, their&lt;br&gt;playing total remains unchanged.&lt;br&gt; Players who have a card total of 21, blackjack, win 1.5% their bet to their playing&lt;br&gt;total.&lt;br&gt;You will be required to have the following classes and members. However, you&lt;br&gt;may add more members and functions, based on your design. You will make .cpp&lt;br&gt;files for each class, .h, interface file. Make sure you include the correct .h files&lt;br&gt;with the .cpp files.&lt;br&gt;//card.h interface file&lt;br&gt;class card {&lt;br&gt;private:&lt;br&gt;int value; //1-13&lt;br&gt;char &lt;em&gt;suit; //4 each: club, spade, heart, diamond&lt;br&gt;public:&lt;br&gt;//must have constructors&lt;br&gt;//must have destructors&lt;br&gt;//must have accessor functions&lt;br&gt;//must have mutator functions&lt;br&gt;};&lt;br&gt;//deck.h interface file&lt;br&gt;class deck {&lt;br&gt;private:&lt;br&gt;card cards[52];&lt;br&gt;int num_cards;&lt;br&gt;public:&lt;br&gt;//must have constructors&lt;br&gt;//must have destructors&lt;br&gt;//must have accessor functions&lt;br&gt;//must have mutator functions&lt;br&gt;};&lt;br&gt;//hand.h interface file&lt;br&gt;class hand {&lt;br&gt;private:&lt;br&gt;card &lt;/em&gt;cards;&lt;br&gt;int num_cards;&lt;br&gt;public:&lt;br&gt;//must have constructors&lt;br&gt;//must have destructors&lt;br&gt;//must have accessor functions&lt;br&gt;//must have mutator functions&lt;br&gt;};&lt;br&gt;//player.h interface file&lt;br&gt;class player {&lt;br&gt;private:&lt;br&gt;hand p_hand;&lt;br&gt;int playing_total;&lt;br&gt;int card_total;&lt;br&gt;int bet;&lt;br&gt;public:&lt;br&gt;//must have constructors&lt;br&gt;//must have destructors&lt;br&gt;//must have accessor functions&lt;br&gt;//must have mutator functions&lt;br&gt;};&lt;br&gt;//dealer.h interface file&lt;br&gt;class dealer {&lt;br&gt;private:&lt;br&gt;hand d_hand;&lt;br&gt;int card_total;&lt;br&gt;public:&lt;br&gt;//must have constructors&lt;br&gt;//must have destructors&lt;br&gt;//must have accessor functions&lt;br&gt;//must have mutator functions&lt;br&gt;};&lt;br&gt;//game.h interface file&lt;br&gt;class game {&lt;br&gt;private:&lt;br&gt;deck cards;&lt;br&gt;player &lt;em&gt;players;&lt;br&gt;dealer game_dealer;&lt;br&gt;int num_players;&lt;br&gt;public:&lt;br&gt;//must have constructors&lt;br&gt;//must have destructors&lt;br&gt;//must have accessor functions&lt;br&gt;//must have mutator functions&lt;br&gt;};&lt;br&gt;Your program must be able to:&lt;br&gt; Setup a deck of 52 cards with spades, clubs, diamonds, and hearts of 2-10, Jack,&lt;br&gt;Queen, King, and Ace for each suit.&lt;br&gt; Shuffle the deck of cards before playing any game.&lt;br&gt; Determine how many players and the playing total for each.&lt;br&gt; Make sure that a player’s bet is less than or equal to the playing total.&lt;br&gt; Determine when a full deck has been dealt, and reshuffle.&lt;br&gt; You should not have any memory leaks in your program.&lt;br&gt;Extra Credit (10 pts):&lt;br&gt;In blackjack, if a player starts with doubles (cards with the same value), then the cards&lt;br&gt;can be split into different hands. The player is given two cards, one for each hand, and&lt;br&gt;the dealer now gets two cards for a different hand. After the first hand is played, then&lt;br&gt;the second hand is played between the dealer and the player who split.&lt;br&gt;(10 pts) Program Style/Comments&lt;br&gt;In your implementation, make sure that you include a program header in your program,&lt;br&gt;in addition to proper indentation/spacing and other comments! Below is an example&lt;br&gt;header to include. Make sure you review the style guidelines for this class, and begin&lt;br&gt;trying to follow them, i.e. don’t align everything on the left or put everything on one line!&lt;br&gt;&lt;a href=&quot;http://classes.engr.oregonstate.edu/eecs/spring2016/cs162-001/162_style_guideline.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://classes.engr.oregonstate.edu/eecs/spring2016/cs162-001/162_style_guideline.pdf&lt;/a&gt;&lt;br&gt;/&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt; Program: play_game.cpp
&lt;/strong&gt; Author: Your Name&lt;br&gt;&lt;strong&gt; Date: 04/20/2016
&lt;/strong&gt; Description:&lt;br&gt;&lt;strong&gt; Input:
&lt;/strong&gt; Output:&lt;br&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;/&lt;br&gt;Electronically submit your C++ program (.h, .cpp, and Makefile files, not your&lt;br&gt;executable!!!) and your test files as a tarred archive by the assignment due date, using&lt;br&gt;TEACH.&lt;br&gt;You must tar these files together using the following command:&lt;br&gt;tar –cvf assign2.tar card.h, card.cpp, deck.h, deck.cpp, hand.h,&lt;br&gt;hand.cpp, player.h, player.cpp, dealer.h, dealer.cpp, game.h, game.cpp&lt;br&gt;play_game.cpp Makefile&lt;br&gt;*&lt;/em&gt;NOTE: The easiest way to upload your program from ENGR to TEACH is to map a&lt;br&gt;network drive to your home directory on ENGR. Mac or Windows, See:&lt;br&gt;&lt;a href=&quot;http://engineering.oregonstate.edu/computing/fileaccess/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://engineering.oregonstate.edu/computing/fileaccess/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;本题主要考试面向对象的类的设计思路，完成一个名字叫21点的纸牌游戏，分别设计了card类，deck类，hand类，player类，dealer类，game类完成各种功能，最后m
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：Review Programming in C++</title>
    <link href="http://yoursite.com/2016/11/06/page30/"/>
    <id>http://yoursite.com/2016/11/06/page30/</id>
    <published>2016-11-06T15:14:24.000Z</published>
    <updated>2017-01-03T09:25:55.774Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;写一个统计城市欢迎度的管理系统，涉及到指针操作，从文件读取信息。增删改查求平均值&lt;br&gt;等等基本功能，还要自己创建makefile，在linux平台下运行，最后完成测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Grading: EVERY assignment in this course is graded by demoing your work for&lt;br&gt;10 minutes with a TA. You are required to meet with a TA within one week after&lt;br&gt;the due date to demo. You are penalized for failure to see a TA within the week or&lt;br&gt;missing a scheduled appointment. In either case, if you are within 1 day (24&lt;br&gt;hours) of the deadline, you lose 10 points. If you are within 7 days (1 week) of the&lt;br&gt;deadline, then you lose 25 points, anything outside of a week from the deadline&lt;br&gt;to demo is an automatic 50 point deduction. Your job is to convince the TA that your&lt;br&gt;program works correctly, i.e. show your TA how to use/break your program☺&lt;br&gt;During your time in programming, you will undoubtedly run into a situation where you&lt;br&gt;will need to go through information more than once or need to perform the same task&lt;br&gt;over and over. The way we as programmers accomplish this is through the use of&lt;br&gt;loops and functions.&lt;br&gt;(90 pts) Implementation: Problem Statement&lt;br&gt;You will write a program to compare state and county information. You must&lt;br&gt;have the following structs in your program.&lt;br&gt;struct county {&lt;br&gt;string name; //name of county&lt;br&gt;string &lt;em&gt;city; //name of cities in county&lt;br&gt;int cities; //number of cities in county&lt;br&gt;int population; //total population of county&lt;br&gt;float avg_income; //avg household income&lt;br&gt;float avg_house; //avg household price&lt;br&gt;};&lt;br&gt;struct state {&lt;br&gt;string name; //name of state&lt;br&gt;struct county &lt;/em&gt;c; //name of counties&lt;br&gt;int counties; //number of counties in state&lt;br&gt;int population; //total population of state&lt;br&gt;};&lt;br&gt;You will receive the number of states and filename from the user as command-line&lt;br&gt;arguments. The number supplied with the –s option is the number of states to be&lt;br&gt;created and the text following the –f option is the filename with the state/county&lt;br&gt;information: a.out –s 2 –f states1.txt&lt;br&gt;This would create a dynamic array of 2 states on the heap, and you would read the rest&lt;br&gt;of the information about the state and counties from a file. Each line in the file will&lt;br&gt;contain the information for each state and county in the following order:&lt;br&gt;State_name state_pop #_county&lt;br&gt;county_name county_pop county_income county_house #_cities city_name&lt;br&gt;Example:&lt;br&gt;Oregon 1000000 2&lt;br&gt;Benton 53000 100000 250000 1 Corvallis&lt;br&gt;Lane 80000 50000 150000 2 Eugene Springfield&lt;br&gt;South_Carolina 1000000 2&lt;br&gt;Anderson 80000 100000 80000 2 Anderson Pendleton&lt;br&gt;Pickens 50000 50000 20000 2 Clemson Pickens&lt;br&gt;Your program must define the following functions, with the exact prototypes:&lt;br&gt;bool is_valid_arguments(char &lt;em&gt;info[]);&lt;br&gt;state &lt;/em&gt; create_states(int);&lt;br&gt;void get_state_data(state &lt;em&gt;);&lt;br&gt;county &lt;/em&gt; create_counties(int);&lt;br&gt;void get_county_data(county &lt;em&gt;);&lt;br&gt;void delete_info(state &lt;/em&gt;);&lt;br&gt;In addition to these functions above, you need to determine the other functions you will&lt;br&gt;need to print information answering the following information:&lt;br&gt; the state with the largest population,&lt;br&gt; the county with the largest population,&lt;br&gt; the counties with an income above a specific amount, (You must get input from&lt;br&gt;the user for this!!!)&lt;br&gt; the average household cost for all counties in each state,&lt;br&gt; the states in sorted order by name,&lt;br&gt; the states in sorted order by population,&lt;br&gt; the counties within states sorted by population,&lt;br&gt; the counties within states sorted by name.&lt;br&gt;You need to separate your files into interface and implementation and create a Makefile&lt;br&gt;to handle the compilation. Create a state_facts.h, which has the struct type for states&lt;br&gt;and counties, as well as the function declarations for your program. Now, separate your&lt;br&gt;function definitions into a state_facts.cpp file and your main function into a&lt;br&gt;run_facts.cpp file. Now, create a makefile that will create a state_facts executable&lt;br&gt;game and clean your files.&lt;br&gt;Your program must be able to:&lt;br&gt; Print a usage message to the user when too few arguments are supplied or&lt;br&gt;when the options are not –s or -f. You do not need to recover from this, just&lt;br&gt;handle by printing a message.&lt;br&gt; Print an error message and recover, when the user doesn’t supply positive,&lt;br&gt;non-zero integer for the states value.&lt;br&gt; Print an error message and recover, when the player doesn’t supply a valid&lt;br&gt;filename to open.&lt;br&gt; Provide the stats for the states.&lt;br&gt; Continue to ask for new states and new filename. Make sure you do not have&lt;br&gt;a memory leak!!!!!&lt;br&gt;(10 pts) Program Style/Comments&lt;br&gt;In your implementation, make sure that you include a program header in your program,&lt;br&gt;in addition to proper indentation/spacing and other comments! Below is an example&lt;br&gt;header to include. Make sure you review the style guidelines for this class, and begin&lt;br&gt;trying to follow them, i.e. don’t align everything on the left or put everything on one line!&lt;br&gt;&lt;a href=&quot;http://classes.engr.oregonstate.edu/eecs/spring2016/cs162-001/162_style_guideline.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://classes.engr.oregonstate.edu/eecs/spring2016/cs162-001/162_style_guideline.pdf&lt;/a&gt;&lt;br&gt;/&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt; Program: run_stats.cpp
&lt;/strong&gt; Author: Your Name&lt;br&gt;&lt;strong&gt; Date: 04/08/2016
&lt;/strong&gt; Description:&lt;br&gt;&lt;strong&gt; Input:
&lt;/strong&gt; Output:&lt;br&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;/&lt;br&gt;Electronically submit your C++ program (.h, .cpp, and Makefile files, not your&lt;br&gt;executable!!!) and your test files as a tarred archive by the assignment due date, using&lt;br&gt;TEACH.&lt;br&gt;You must tar these files together using the following command:&lt;br&gt;tar –cvf assign1.tar facts.h facts.cpp run_facts.cpp Makefile test.txt&lt;br&gt;**NOTE: The easiest way to upload your program from ENGR to TEACH is to map a&lt;br&gt;network drive to your home directory on ENGR. Mac or Windows, See:&lt;br&gt;&lt;a href=&quot;http://engineering.oregonstate.edu/computing/fileaccess/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://engineering.oregonstate.edu/computing/fileaccess/&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;写一个统计城市欢迎度的管理系统，涉及到指针操作，从文件读取信息。增删改查求平均值&lt;br&gt;等等基本功能，还要自己创建makefile，在linux平台下运行，最后完成测试&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：Assignment</title>
    <link href="http://yoursite.com/2016/11/06/page29/"/>
    <id>http://yoursite.com/2016/11/06/page29/</id>
    <published>2016-11-06T00:26:44.000Z</published>
    <updated>2017-01-03T09:24:18.899Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c++实现一个动态数组，不能使用stl的vector， 动态数组需要实现自己的内存扩展，constructor和destructor， 然后还有题目要求的&lt;br&gt;tail，head， sort等等函数。最后在main里面完成自己实现的函数的单元测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;P a g e | 1&lt;br&gt;CMPSC 122 – Intermediate Programming&lt;br&gt;Assignment #4&lt;br&gt;Spring 2016&lt;br&gt;Due Date: Monday, March 28, 2016&lt;br&gt;Total Points: 100&lt;br&gt;Implement a generic (template) class called MyArray. A generic class is a general version of a class; it&lt;br&gt;is a homogenous data structure that handles multiple data types. MyArray will be similar to C++&lt;br&gt;arrays but will not be constrained to a fixed size. The array size will grow dynamically when the user&lt;br&gt;inserts an element to a full array. The class should not use vectors. Instead, you should use&lt;br&gt;dynamic memory allocation (a dynamic array).&lt;br&gt;The class should use three member variables:&lt;br&gt;-  myarray: the dynamic array&lt;br&gt;-  size: the current size of the array&lt;br&gt;-  used: the number of elements currently used in the array&lt;br&gt;The class should have the following functionalities:&lt;br&gt;? A default constructor that initializes the size of the array to 5.&lt;br&gt;? A default destructor that frees the dynamic memory that was allocated.&lt;br&gt;? int length( ) a method that returns an integer value indicating the number of elements&lt;br&gt;currently used in the array.&lt;br&gt;? void insertHead(Item i) a method that inserts a new item making it the first element in the&lt;br&gt;array. If the array is full, then a new dynamic array of double the size should replace the&lt;br&gt;existing array.&lt;br&gt;? void insertTail(Item i) a method that inserts a new item making it the last element in the&lt;br&gt;array. If the array is full, then a new dynamic array of double the size should replace the&lt;br&gt;existing array.&lt;br&gt;? void deleteHead( ) deletes the first element in the array.&lt;br&gt;? void deleteTail( ) deletes the last element in the array.&lt;br&gt;? void sortAscending( ) sorts the elements of the array in ascending order. Use bubbleSort to&lt;br&gt;do that.&lt;br&gt;? void sortDescending( ) sorts the elements of the array in descending order. Use&lt;br&gt;insertionSort to do that.&lt;br&gt;? C++ allows the overloading of the [ ] operator. This feature makes it possible to access&lt;br&gt;an element in a MyArray object in an array-like behavior. Overload this operator and&lt;br&gt;make sure to have boundary checks using assertions. If the user tries to access an&lt;br&gt;element outside the range of the array or at a location that is not used yet then an error&lt;br&gt;message should be displayed on the screen.&lt;br&gt;For example, the following code:&lt;br&gt;P a g e | 2&lt;br&gt;MyArray&lt;int&gt; a1;&lt;br&gt;cout &amp;lt;&amp;lt; “Number of elements in a1= “ &amp;lt;&amp;lt; a1.length() &amp;lt;&amp;lt; endl;&lt;br&gt;a1.insertTail(35);&lt;br&gt;a1.insertTail(45);&lt;br&gt;a1.insertHead(55);&lt;br&gt;a1.deleteTail();&lt;br&gt;for(int i =0; i &amp;lt; a1.length(); i++)&lt;br&gt;cout &amp;lt;&amp;lt; a1[i] &amp;lt;&amp;lt; endl;&lt;br&gt;Will result in:&lt;br&gt;Number of elements in a1= 0&lt;br&gt;55&lt;br&gt;35&lt;br&gt;If we try any of the two instructions the result should be an assertion error:&lt;br&gt;cout &amp;lt;&amp;lt; a1[4]; //Subscript uninitialized.&lt;br&gt;cout &amp;lt;&amp;lt; a1[14]; //Subscript out of range.&lt;br&gt;Write a main( ) method that provides a menu driven interface that allows the user to test whether&lt;br&gt;each member function of myArray is working properly. The menu should provide the following&lt;br&gt;functionalities:&lt;br&gt;o Create a new array: allows the user to create an array of one of the following types: bool, char,&lt;br&gt;double, float, int, string&lt;br&gt;o Get Length: the current number of elements used in the array&lt;br&gt;o Insert a new element at the head of the array&lt;br&gt;o Insert a new element at the tail of the array&lt;br&gt;o Delete the first element&lt;br&gt;o Delete the last element&lt;br&gt;o Sort the elements in ascending order&lt;br&gt;o Sort the elements in descending order&lt;br&gt;o Print all the elements in the array&lt;br&gt;o Quit the program&lt;br&gt;What to hand in&lt;br&gt;Please submit your C++ source file electronically through Angel.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/int&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c++实现一个动态数组，不能使用stl的vector， 动态数组需要实现自己的内存扩展，constructor和destructor， 然后还有题目要求的&lt;br&gt;tail，he
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：ECE 275 ­ Project 3</title>
    <link href="http://yoursite.com/2016/11/05/page28/"/>
    <id>http://yoursite.com/2016/11/05/page28/</id>
    <published>2016-11-04T21:24:54.000Z</published>
    <updated>2017-01-03T09:22:46.548Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c++模拟一个汽车运动模型，文件输入运行轨迹，车辆情况等等。根据一些数学和物理的公式，计算最后的汽车运动情况，同时考虑到c++的类的设计，要求类设计完好。&lt;br&gt;control类，driver类，read类，write类等等功能分离使得思路更加清晰代码明了&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Usage&lt;br&gt;Usage: catcar controlInputs stateOutputs&lt;br&gt;Requirements Summary&lt;br&gt;Create a C++ program that reads control inputs for a self­driving car from an input file. The program will simulate the car’s&lt;br&gt;state over the time horizon given by the control inputs, and write the results to an output file. The major problem is: the input&lt;br&gt;file was written in such a way that the control inputs are stored out of order!&lt;br&gt;Assignment Name&lt;br&gt;The assignment name for this assignment is: ​catcar&lt;br&gt;1. Kinematic Model Simulation&lt;br&gt;In this project, you will create a program that controls an autonomous vehicle from an input control file. The only problem is&lt;br&gt;that the input controls are jumbled, since a function that operated on the linked list that stored them was badly designed: they&lt;br&gt;were stored in order in a queue, but the queue was designed by a Visual Basic programmer who doesn’t understand memory.&lt;br&gt;They printed the nodes out by order of memory address of the list nodes, instead of by the node order prescribed by the next&lt;br&gt;pointers.&lt;br&gt;So you need to put them back in the right order before proceeding. This program will read in time value at which this&lt;br&gt;command should be executed, then the commanded speed, and tire angle. The duration of the command is the difference&lt;br&gt;between this command’s time value, and the next time value (when the nodes are in order), at a maximum of 201 ms. If there&lt;br&gt;are any durations longer than 201 ms, the input file should be declared invalid, and no simulation should take place.&lt;br&gt;With this sequence of commands, you should save the vehicle’s state at each time step. During the execution of control&lt;br&gt;commands, this program will record the vehicle’s state as it moves (or stands still), and save the output states to a file.&lt;br&gt;2. File Format&lt;br&gt;2.1 controlInputs&lt;br&gt;For this assignment, the input text file will consist of control information, each line contains sample time (in seconds),&lt;br&gt;commanded vehicle velocity (m/s), and tire angle rate (radians/s), with elements separated by whitespace (even the first&lt;br&gt;number could be padded by a whitespace in the front). All values should be stored as doubles.&lt;br&gt;0.06 5 0.523&lt;br&gt;0.02 20 ­0.523&lt;br&gt;0.07 8 0&lt;br&gt;0.00 0 0&lt;br&gt;In this example, at time 0.06 the vehicle should take in as its input command a velocity of 5, with a tire­angle rate of 0.523,&lt;br&gt;for 0.01 seconds. The duration of 0.01 is determined by looking at the next time step (after the vector is confirmed to be&lt;br&gt;sorted), and taking the difference (0.07 ­  0.06).&lt;br&gt;Clearly the above example is an extreme case of driving aggressively. Your program should run regardless of the unlikely&lt;br&gt;control inputs, as long as the below conditions are met:&lt;br&gt;­ The rst element of the sorted list must be at exactly time 0.&lt;br&gt;­ Commanded tire angle rate must be between [?­0.5236, 0.5236] radians/sec (i.e., / 6 radians/sec). ±π&lt;br&gt;­ Commanded velocity must be between [0, 30] m/s;&lt;br&gt;­ Time values must be non­negative; and&lt;br&gt;­ Duration between sorted input objects must be between [5, 201] ms.&lt;br&gt;If any of these are violated for any input value in the file, then the ​controlInputs file is deemed invalid, and an empty&lt;br&gt;output file is written. If at any time a line fails to parse, then the file should be declared invalid. This policy is for safety: you&lt;br&gt;wouldn’t want to start controlling an autonomous car if you accidentally passed in the wrong file, and it started somehow&lt;br&gt;parsing lines!&lt;br&gt;2.2 outputFile&lt;br&gt;This assignment should output a file with information on the state values of the vehicle throughout its journey. The format for&lt;br&gt;this file is one called csv (comma separated values), and is common for inputting data into MATLAB. Each output entry is as&lt;br&gt;follows:&lt;br&gt;t,x1,x2,x3,x4\n&lt;br&gt;Where t is the time at which this state value was measured, and the values in x are given by the kinematic equation (1). The&lt;br&gt;precision for each value should be whatever is the default when using C++ iostream methods.&lt;br&gt;If the control inputs are determined to be invalid, you should create an empty file with the name provided from the command&lt;br&gt;line.&lt;br&gt;3. Vehicle Model&lt;br&gt;You are developing a vehicle simulator, which describes the kinematic motion of a front­steered, two­wheel drive vehicle.&lt;br&gt;The vehicle you are simulating is visually depicted below. The equations of motion for this vehicle are provided in (1).&lt;br&gt;x&lt;br&gt;​&lt;br&gt;1 ​ = ​u&lt;br&gt;​&lt;br&gt;1 ​ cos(​x&lt;br&gt;​&lt;br&gt;3​ ) cos(​x&lt;br&gt;​&lt;br&gt;4​ )&lt;br&gt;(1)&lt;br&gt;x&lt;br&gt;​&lt;br&gt;2 ​ = ​u&lt;br&gt;​&lt;br&gt;1 ​ cos(​x&lt;br&gt;​&lt;br&gt;3​ ) sin(​x&lt;br&gt;​&lt;br&gt;4​ )&lt;br&gt;x&lt;br&gt;​&lt;br&gt;3 ​ = ​u&lt;br&gt;​&lt;br&gt;2&lt;br&gt;x&lt;br&gt;​&lt;br&gt;4 ​ = ​u&lt;br&gt;​&lt;br&gt;1 ​ (1/L) sin(​x&lt;br&gt;​&lt;br&gt;3​ )&lt;br&gt;Where ​x&lt;br&gt;​&lt;br&gt;1 is translational forward motion, ​x&lt;br&gt;​&lt;br&gt;2 is translational left/right motion, x&lt;br&gt;​&lt;br&gt;3 is the tire angle, and ​x&lt;br&gt;​&lt;br&gt;4 is the heading of the&lt;br&gt;&lt;br&gt;vehicle. For control inputs, ​u&lt;br&gt;​&lt;br&gt;1 represents vehicle velocity, and ​u&lt;br&gt;​&lt;br&gt;2 represents angular rate of change for the tire angle. The&lt;br&gt;&lt;br&gt;wheelbase L is defined in the Vehicle.h header file.&lt;br&gt;Using a simple discretization of these differential equations with a duration ​t&lt;br&gt;​&lt;br&gt;, we can use the following equations for motion:&lt;br&gt;x&lt;br&gt;​&lt;br&gt;1​ (​t&lt;br&gt;​&lt;br&gt;+∆​ t​ )​   ​ = ​x&lt;br&gt;​&lt;br&gt;1​ (​t&lt;br&gt;​&lt;br&gt;) + ∆​ t​  ​u&lt;br&gt;​&lt;br&gt;1​ (​t&lt;br&gt;​&lt;br&gt;)​  ​ cos(​x&lt;br&gt;​&lt;br&gt;3​ (​t&lt;br&gt;​&lt;br&gt;)) cos(​x&lt;br&gt;​&lt;br&gt;4​ (​t&lt;br&gt;​&lt;br&gt;))  (2)&lt;br&gt;x&lt;br&gt;​&lt;br&gt;2 ​ (​t&lt;br&gt;​&lt;br&gt;+∆​ t​ ) = ​x&lt;br&gt;​&lt;br&gt;2 ​ (​t&lt;br&gt;​&lt;br&gt;) +​&lt;br&gt;​&lt;br&gt;∆​ t​  ​u&lt;br&gt;​&lt;br&gt;1​ (​t&lt;br&gt;​&lt;br&gt;)​  ​ cos(​x&lt;br&gt;​&lt;br&gt;3​ (​t&lt;br&gt;​&lt;br&gt;)) sin(​x&lt;br&gt;​&lt;br&gt;4​ (​t&lt;br&gt;​&lt;br&gt;))&lt;br&gt;x&lt;br&gt;​&lt;br&gt;3 ​ (​t&lt;br&gt;​&lt;br&gt;+∆​ t​ )​  ​ = ​x&lt;br&gt;​&lt;br&gt;3 ​ (​t&lt;br&gt;​&lt;br&gt;) + ​&lt;br&gt;​&lt;br&gt;∆​ t ​ u&lt;br&gt;​&lt;br&gt;2​ (​t&lt;br&gt;​&lt;br&gt;)&lt;br&gt;x&lt;br&gt;​&lt;br&gt;4 ​ (​t&lt;br&gt;​&lt;br&gt;+∆​ t​ ) = ​x&lt;br&gt;​&lt;br&gt;4 ​ (​t&lt;br&gt;​&lt;br&gt;) + ​&lt;br&gt;​&lt;br&gt;∆​ t ​ u&lt;br&gt;​&lt;br&gt;1 ​ (​t&lt;br&gt;​&lt;br&gt;) (1/L) sin(​x&lt;br&gt;​&lt;br&gt;3​ (​t&lt;br&gt;​&lt;br&gt;))&lt;br&gt;The value for ​x&lt;br&gt;​&lt;br&gt;3 (tire angle) must always be between [?­0.5236, 0.5236] radians/sec (i.e.,&lt;br&gt;/ 6 radians/sec). If a value is                             ±π&lt;br&gt;commanded outside this range, then ​x&lt;br&gt;​&lt;br&gt;3 should saturate using the above range. Ex: If the tire angle rate is commanded to be&lt;br&gt;&lt;br&gt;the value 0.7156, the tire angle rate should equal the maximum value of 0.5236.&lt;br&gt;The heading should always be between [0, 2 ). If the heading is a negative value, the heading should be converted into the               π&lt;br&gt;range [0, 2 ) by repeatedly adding 2  . Ex: If the heading is ­.5 , the heading can be converted to ­0.5 +2  = 1.5 . π π π π π π&lt;br&gt;Defined values are present for these ranges inside of ​State.h&lt;br&gt;4. Class designs&lt;br&gt;The following class definitions must be used for the indicated classes. You may (if you wish) create your own classes to do&lt;br&gt;other tasks. The below classes are prescribed in whole (or in part):&lt;br&gt;Input​, ​State​, ​Vehicle​ (must use exact prescribed class definitions)&lt;br&gt;DataSource​, ​DataSink​, ​Director​ (are at your discretion, except for the sort method prescribed).&lt;br&gt;4.1 Classes that must use prescribed definitions&lt;br&gt;Please use the exact interfaces for Vehicle, State, and Input, or your alpha release may not compile. These are the only classes&lt;br&gt;for which the design is fixed.&lt;br&gt;4.1.1 Input&lt;br&gt;The ​Input class holds the values for the u variables used in the kinematic model. Its interface is included on Piazza as a&lt;br&gt;resource for this Project.&lt;br&gt;4.1.2 State&lt;br&gt;The ​State class is similar to Input, and its interface is included on Piazza as a resource for this Project. However, it does&lt;br&gt;ensure that tire angle values and heading values stay within the designated ranges if the setters for the class are called.&lt;br&gt;4.2 Vehicle&lt;br&gt;The ​Vehicle class executes a control input for the designated duration. The interface is included on Piazza as a resource for&lt;br&gt;this Project.&lt;br&gt;The ​Vehicle keeps its own state, receives a control input, and updates its state. The initial state value for the ​Vehicle is&lt;br&gt;x&lt;br&gt;​&lt;br&gt;1 = 0, x&lt;br&gt;​&lt;br&gt;2&lt;br&gt;​&lt;br&gt;=0, ​x&lt;br&gt;​&lt;br&gt;3 = 0, and ​x&lt;br&gt;​&lt;br&gt;4 = 0, e.g., (0, 0) position, tire angle of 0, and heading of 0. The ​Vehicle class assumes that any&lt;br&gt;&lt;br&gt;&lt;br&gt;invalid input values have been removed, so it does not do any error checking. The class does not permit anyone to update its&lt;br&gt;state, except by providing an ​Input​ object through the ​stateUpdate​ method prescribed in the header file.&lt;br&gt;4.3 Classes left largely to your design discretion&lt;br&gt;Anything you want to add to the interface for ​DataSource​, ​DataSink​, or ​Director​ is up to you.&lt;br&gt;The ​DataSource class keeps a vector of ​Input objects (control inputs), in order. Likewise, the ​DataSink class keeps a&lt;br&gt;vector of ​State​ objects (state outputs), in order.&lt;br&gt;The ​Director​ is used to pass ​Input​ values along to the ​Vehicle​.&lt;br&gt;Hint&lt;br&gt;​&lt;br&gt;: The ​bool data type is defined in C++, so it won’t work if you try to include the headers from previous projects. Use,&lt;br&gt;instead, the builtin type from C++ for bool functionality.&lt;br&gt;5. Recommended Functional Decomposition&lt;br&gt;In C++, global functions are a sign of a bad design. Rather, you provide methods inside the scope of a class. If you use global&lt;br&gt;functions for this assignment, you will receive significant design deductions. Just like in C programs, your main function&lt;br&gt;should be small. If yours includes lots of logic, rather than depending on the methods of classes, you will receive significant&lt;br&gt;design deductions.&lt;br&gt;5.1 Reading Control Inputs&lt;br&gt;Define a class method (not a global function) that reads all the control inputs from a provided filename. As you read them in,&lt;br&gt;don’t worry about how they’re sorted. The inputs will be stored in a vector in the class. I think you can figure out which class&lt;br&gt;this should be.&lt;br&gt;5.2 Sorting Control Inputs&lt;br&gt;Puts the control inputs in order of their timestamp. The interface for the sort function should be:&lt;br&gt;void​ sort ();       ​// performs qsort&lt;br&gt;If your algorithm does not perform quicksort, you will receive a deduction. Insertion and bubble sort are each unacceptable.&lt;br&gt;You should write your own sort routine, not use the sort routines in STL or any other library. You are, of course, welcome to&lt;br&gt;use other implementations to confirm that your qsort implementation is working, as part of your own tests. The inputs will be&lt;br&gt;already be stored in a vector in the class. I think you can figure out which class this should be.&lt;br&gt;5.2.1 Validating Control Inputs&lt;br&gt;This method should be part of the ​DataSource​ class. The interface for this method should be:&lt;br&gt;// should be called only after the vector is sorted&lt;br&gt;// returns true if the vector in Input objects is valid&lt;br&gt;bool ​validate ();&lt;br&gt;The vector of ​Input​ objects is invalid if any of the criteria from Section 2.1 are discovered.&lt;br&gt;5.3 Writing State Outputs&lt;br&gt;Define a class method (not a global function) that writes a vector of ​Output objects to a file of the provided filename. I&lt;br&gt;think you can figure out which class this should be.&lt;br&gt;5.4 Driving the Car&lt;br&gt;Once you have an (ordered) set of control inputs, you need a ​Director to coordinate the consumption of inputs, and save&lt;br&gt;each output. The ​Director will take the next Input (stored and sorted by the ​DataSource​) to the vehicle, fetch that&lt;br&gt;Output​, and store it in the output vector in the ​DataSink​. When the last ​Input is consumed, a duration of 200 ms should&lt;br&gt;be used. After simulating this ​Input​, the simulation is ended. In order to do this, the ​Director will “contain” a ​Vehicle&lt;br&gt;object, and decide how to interact with it.&lt;br&gt;Part of the assignment is coming up with and writing the pseudocode for this algorithm, in order to stage your design.&lt;br&gt;5.5 What goes in main, then?&lt;br&gt;In your main function, you should instantiate your classes, check your arguments and return the usage statement. Put all the&lt;br&gt;logic and error handling for file I/O, initialization of the ​Vehicle​, etc., in your methods as defined in your other files and in&lt;br&gt;the order that makes sense. You want your main to be very simple, so that if you want to reuse your code, you can do so&lt;br&gt;without a main function.&lt;br&gt;Generally, part of assignments going forward include coming up with and writing the pseudocode for this algorithm, in order&lt;br&gt;that your design can be performed in stages. To bootstrap this process, we provide as an example how to sketch an algorithm&lt;br&gt;is pseudocode below:&lt;br&gt;check usage&lt;br&gt;open input file, and output file&lt;br&gt;execute director&lt;br&gt;  while inputs&lt;br&gt;    execute input(s)&lt;br&gt;    save output(s)&lt;br&gt;write and close output file, input file&lt;br&gt;6. Alpha Submission&lt;br&gt;Your alpha assignment is to implement the Vehicle class methods, and turn in your ​Vehicle.cpp file to the dropbox called&lt;br&gt;Project 3 (alpha) on D2L. We will use your file with our own main function and test files, to check the behavior of each of&lt;br&gt;the ​Vehicle methods we prescribe. Use the same ​vehicle.h ​file given above and provided from the website, or be in&lt;br&gt;danger of your alpha not compiling.&lt;br&gt;As a note, you will have to complete your implementation of ​Input and ​State in order to test your alpha on your own.&lt;br&gt;Submit only your ​Vehicle.cpp ­­ ​do not submit implementations for Input and Output&lt;br&gt;​&lt;br&gt;, we will use our own. We have&lt;br&gt;already included ​Input.h and ​State.h in our ​vehicle.h interface definition, but you may need to include other&lt;br&gt;headers for standard C++ functionality in your cpp file. We do not recommend including headers for other custom classes in&lt;br&gt;your cpp file, since you will not be submitting those headers or their implementation.&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c++模拟一个汽车运动模型，文件输入运行轨迹，车辆情况等等。根据一些数学和物理的公式，计算最后的汽车运动情况，同时考虑到c++的类的设计，要求类设计完好。&lt;br&gt;control
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：FinalProject-SuperString.v3</title>
    <link href="http://yoursite.com/2016/11/04/page27/"/>
    <id>http://yoursite.com/2016/11/04/page27/</id>
    <published>2016-11-04T10:34:24.000Z</published>
    <updated>2017-01-03T09:19:06.729Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;自己实现一个类似stl的string库的superstring，对string功能进行扩展，包括自己实现 ==, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=.等操作符的重载，构造函数，find函数，trim函数，&lt;br&gt;insert，replace，还有类型转换等等函数的实现，难度不大，但是工作量很大。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;SET-252 C Programming #2&lt;br&gt;Homework:    SuperString – Final Project ( 30% of your final grade )&lt;br&gt;&lt;br&gt;&lt;br&gt;Warning:    You fail the course if you fail the final project.&lt;br&gt;Warning:    Your final grade for the course cannot be higher than your final project grade.&lt;br&gt;Warning:    You cannot consult with any student that has already completed this project.&lt;br&gt;Warning:    You cannot view, use or reference any code for this project written by students that have taken this course in the past.&lt;br&gt;&lt;br&gt;Step 1&lt;br&gt;Implement the following class header file (i.e. write the cpp file).&lt;br&gt;You may add any other properties and/or methods that you need.  You might want to check with me before adding them just to make sure you’re on the right track.&lt;br&gt;Write a main function that will test all the different methods.  Make sure your main function is easy to read and understand.  I recommend you use regions and procedures to break up the logic.  You can easily comment out a call to previously made procedures so you can test only the current procedure that you are working on.&lt;br&gt;You may use any string functions you want (e.g. strlen, strstr, etc).&lt;br&gt;You may not use the built-in String class.&lt;br&gt;In addition to the methods listed below, overload the following operators with all reasonable parameters (i.e. char, const char &lt;em&gt;, CSuperString &amp;amp;): ==, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=.&lt;br&gt;NONE of the class methods other than the constructors or the assignment operators ( = and += ) should change m_pstrSuperString.&lt;br&gt;You must assign the value back to the class instance to make it permanent.  For example:&lt;br&gt;ssBuffer = ssBuffer.ToUpperCase( );&lt;br&gt;Minus one letter grade for any memory leak.  Minus two letter grades if there are a lot of memory leaks.&lt;br&gt;Minus one letter grade if replace with substrings doesn’t work correctly.&lt;br&gt;Minus one letter grade if self assignment doesn’t work correctly (e.g. ssBuffer = ssBuffer.ToUpperCase( ); ).&lt;br&gt;Minus one letter grade if you don’t solve the double call problem.  The following should display correctly:&lt;br&gt;printf( “Left( 2 ): %s, Left( 4 ): %s\n”, ssBuffer.Left( 2 ), ssBuffer.Left( 4 ) );&lt;br&gt;Splitting the code up into two lines is not the solution.&lt;br&gt;Add the following procedure to your tests and make sure it executes without errors.&lt;br&gt;&lt;br&gt;void MuahahahTest1( )&lt;br&gt;{&lt;br&gt;CSuperString ssTest;&lt;br&gt;cout &amp;lt;&amp;lt; “Muahahah Test #1: “ &amp;lt;&amp;lt; ssTest &amp;lt;&amp;lt; endl;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;Add the following procedure to your tests and make sure it executes without errors.&lt;br&gt;&lt;br&gt;void MuahahahTest2( )&lt;br&gt;{&lt;br&gt;CSuperString ssTest = “I Love Star Wars and I Love Star Trek”;&lt;br&gt;&lt;br&gt;ssTest = ssTest.Replace( “Love”,”Really Love Love” );&lt;br&gt;&lt;br&gt;cout &amp;lt;&amp;lt; “Muahahah Test #2: “ &amp;lt;&amp;lt; ssTest &amp;lt;&amp;lt; endl;&lt;br&gt;    }&lt;br&gt;I recommend you start with just the following methods, get those working and code, test and run additional methods one at a time: constructor, initialize, assignment operator, deep copy, to string and print.&lt;br&gt;Next, I’d recommend you get all the other constructors done.&lt;br&gt;After that, I’d recommend you get all the “to &lt;data type=&quot;&quot;&gt;” methods done.&lt;br&gt;&lt;br&gt;// ——————————————————————————–&lt;br&gt;// Class: CSuperString&lt;br&gt;// ——————————————————————————–&lt;br&gt;class CSuperString&lt;br&gt;{&lt;br&gt;&lt;br&gt;    private:&lt;br&gt;        char&lt;/data&gt;&lt;/em&gt; m_pstrSuperString;&lt;br&gt;&lt;br&gt;    public:&lt;br&gt;        // Constructors&lt;br&gt;        CSuperString( );&lt;br&gt;        // Parameterized/Copy constructors&lt;br&gt;        // CSuperString ssBuffer( “I Love Star Trek” );&lt;br&gt;        // CSuperString ssBuffer( 3.14159f );&lt;br&gt;        CSuperString( const char &lt;em&gt;pstrStringToCopy );&lt;br&gt;        CSuperString( const bool blnBooleanToCopy );&lt;br&gt;        CSuperString( const char chrLetterToCopy );&lt;br&gt;        CSuperString( const short shtShortToCopy );&lt;br&gt;        CSuperString( const int intIntegerToCopy );&lt;br&gt;        CSuperString( const long lngLongToCopy );&lt;br&gt;        CSuperString( const float sngFloatToCopy );&lt;br&gt;        CSuperString( const double dblDoubleToCopy );&lt;br&gt;        CSuperString( const CSuperString &amp;amp;ssStringToCopy );&lt;br&gt;&lt;br&gt;        // Destructor&lt;br&gt;        virtual ~CSuperString( );&lt;br&gt;&lt;br&gt;        long Length( ) const;&lt;br&gt;&lt;br&gt;        // Assignment Operators&lt;br&gt;        void operator = ( const char &lt;/em&gt;pstrStringToCopy );&lt;br&gt;        void operator = ( const char chrLetterToCopy );&lt;br&gt;        void operator = ( const CSuperString &amp;amp;ssStringToCopy );&lt;br&gt;        // Extra credit for numeric parameters&lt;br&gt;&lt;br&gt;        // Concatenate operator&lt;br&gt;        void operator += ( const char &lt;em&gt;pstrStringToAppend );&lt;br&gt;        void operator += ( const char chrCharacterToAppend );&lt;br&gt;        void operator += ( const CSuperString &amp;amp;ssStringToAppend );&lt;br&gt;        // Extra credit for numeric parameters&lt;br&gt;&lt;br&gt;        friend CSuperString operator + ( const CSuperString &amp;amp;ssLeft,&lt;br&gt;                                const CSuperString &amp;amp;ssRight );&lt;br&gt;        friend CSuperString operator + ( const char &lt;/em&gt; pstrLeftSide,&lt;br&gt;                                const CSuperString &amp;amp;ssRightString );&lt;br&gt;        friend CSuperString operator + ( const CSuperString &amp;amp;ssLeftString,&lt;br&gt;                                const char &lt;em&gt; pstrRightSide );&lt;br&gt;&lt;br&gt;        long FindFirstIndexOf ( const char chrLetterToFind );&lt;br&gt;        long FindFirstIndexOf ( const char chrLetterToFind, long lngStartIndex );&lt;br&gt;        long FindLastIndexOf ( const char chrLetterToFind );&lt;br&gt;&lt;br&gt;        long FindFirstIndexOf ( const char &lt;/em&gt;pstrSubStringToFind );&lt;br&gt;        long FindFirstIndexOf ( const char &lt;em&gt;pstrSubStringToFind, long lngStartIndex );&lt;br&gt;        long FindLastIndexOf ( const char &lt;/em&gt;pstrSubStringToFind );&lt;br&gt;&lt;br&gt;        // Do not change original string.  For example:&lt;br&gt;        // cout &amp;lt;&amp;lt; ssBuffer.ToString( ) &amp;lt;&amp;lt; endl;        // I Love Star Trek&lt;br&gt;        // cout &amp;lt;&amp;lt; ssBuffer.ToUpperCase( ) &amp;lt;&amp;lt; endl;    // I LOVE STAR TREK&lt;br&gt;        // cout &amp;lt;&amp;lt; ssBuffer.ToString( ) &amp;lt;&amp;lt; endl;        // I Love Star Trek&lt;br&gt;        const char&lt;em&gt; ToUpperCase( );&lt;br&gt;        const char&lt;/em&gt; ToLowerCase( );&lt;br&gt;        const char&lt;em&gt; TrimLeft( );&lt;br&gt;        const char&lt;/em&gt; TrimRight( );&lt;br&gt;        const char&lt;em&gt; Trim( );&lt;br&gt;        const char&lt;/em&gt; Reverse( );&lt;br&gt;&lt;br&gt;        const char&lt;em&gt; Left ( long lngCharactersToCopy );&lt;br&gt;        const char&lt;/em&gt; Right ( long lngCharactersToCopy );&lt;br&gt;        const char&lt;em&gt; Substring ( long lngStart, long lngSubStringLength );&lt;br&gt;&lt;br&gt;        const char&lt;/em&gt; Replace ( char chrLetterToFind, char chrReplace );&lt;br&gt;        // Hard&lt;br&gt;        const char&lt;em&gt; Replace ( const char &lt;/em&gt;pstrFind, const char&lt;em&gt; pstrReplace );&lt;br&gt;        const char&lt;/em&gt; Insert ( const char chrLetterToInsert, long lngIndex );&lt;br&gt;        const char&lt;em&gt; Insert ( const char &lt;/em&gt;pstrSubString, long lngIndex );&lt;br&gt;&lt;br&gt;        // Subscript operator&lt;br&gt;        char&amp;amp; operator [ ] ( long lngIndex );&lt;br&gt;        const char&amp;amp; operator [ ] ( long lngIndex ) const;&lt;br&gt;&lt;br&gt;        const char* ToString ( );&lt;br&gt;        bool ToBoolean ( );&lt;br&gt;        short ToShort ( );&lt;br&gt;        int ToInteger ( );&lt;br&gt;        long ToLong ( );&lt;br&gt;        float ToFloat ( );&lt;br&gt;        double ToDouble ( );&lt;br&gt;&lt;br&gt;        // cin &amp;gt;&amp;gt; ssBuffer;&lt;br&gt;        // cout &amp;lt;&amp;lt; ssBuffer;&lt;br&gt;        friend ostream&amp;amp; operator &amp;lt;&amp;lt; ( ostream &amp;amp;osOut, const CSuperString &amp;amp;ssOutput );&lt;br&gt;        friend istream&amp;amp; operator &amp;gt;&amp;gt; ( istream &amp;amp;isIn, CSuperString &amp;amp;ssInput );&lt;br&gt;&lt;br&gt;        // Don’t forget the comparison operators!!!&lt;br&gt;};&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;自己实现一个类似stl的string库的superstring，对string功能进行扩展，包括自己实现 ==, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=.等操
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：COMP1040_HW2</title>
    <link href="http://yoursite.com/2016/11/03/page26/"/>
    <id>http://yoursite.com/2016/11/03/page26/</id>
    <published>2016-11-03T04:24:58.000Z</published>
    <updated>2017-01-03T09:15:46.141Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;一个c++的小练习题，练习class的使用。实现一个Point类和circle类，包括构造函数还要一些基本函数的方法，&lt;br&gt;计算圆的面积，最后在main函数创建对象完成测试。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;Define a class called Point.&lt;br&gt;The Point class should contain a constructor which takes float x and float y as parameters.&lt;br&gt;Save these arguments as class variables.&lt;br&gt;Give the class appropriate getters and setters.&lt;br&gt;Define a class called Circle.&lt;br&gt;The Circle class should contain a constructor which takes Point center and float radius as&lt;br&gt;parameters.&lt;br&gt;Save these arguments as class variables.&lt;br&gt;Give the class appropriate getters and setters.&lt;br&gt;The class should have a toString method which should return the contents of the class as a String in&lt;br&gt;the form: Circle at x:50, y:25, radius:20.&lt;br&gt;The Circle class should have an additional method called calculateArea() which returns the area of&lt;br&gt;the circle.&lt;br&gt;Create a Circle object and test it a number of times by changing the radius of the object and&lt;br&gt;calculating the area.&lt;br&gt;For example:&lt;br&gt;Circle at x:50.0, y:25.0, radius:20.0&lt;br&gt;Area: 1256.6371&lt;br&gt;Circle at x:50.0, y:25.0, radius:70.0&lt;br&gt;Area: 15393.805&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;一个c++的小练习题，练习class的使用。实现一个Point类和circle类，包括构造函数还要一些基本函数的方法，&lt;br&gt;计算圆的面积，最后在main函数创建对象完成测试。
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写：CS2401 STL Container</title>
    <link href="http://yoursite.com/2016/11/02/page25/"/>
    <id>http://yoursite.com/2016/11/02/page25/</id>
    <published>2016-11-02T07:25:28.000Z</published>
    <updated>2016-11-03T08:20:05.177Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;STL容器的Lab作业，基础用法，并不难，只不过要过测试集，细节方面还是要注意的。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;The purpose of this lab is to gain some familiarity with an STL Container, and the use of an external iterator. For this lab you will NOT be creating any classes of your own. In fact you can do the whole lab in the main, although I think that you will see that it is highly advisable to have at least one non-member function since there is a task that is repeated.&lt;br&gt;Begin by copying the file names.txt to your working directory. This file has a long list of first names, all taken from some of my classes. Briefly open it and look at it, or just skim through it with more names.txt&lt;br&gt;&lt;br&gt;At the top of your program #includeas well as iostream, string, and fstream. Declare a multiset that is capable of holding strings.&lt;br&gt;Fill the multiset with all the names in the file. (Since there are no spaces in the names you can use &amp;gt;&amp;gt; or getline.)&lt;br&gt;Now declare an iterator that is appropriate for traversing the multiset. Set it to the beginning of the multiset full of names, and walk through the list, outputting each name it finds. (There are a lot of them, so you may want to separate them with spaces instead of putting one on each line.)&lt;br&gt;Run and test this program. Your name should be somewhere in the list. (Note that the names are now in alphabetical order.)&lt;br&gt;Here is the place where you want to pass your STL container to a non-member function, since we are doing something that is basically the same three times in a row. If you do you should pass the container by const and reference, since it is large. You will probably want one additional parameter.&lt;br&gt;&lt;br&gt;Declare two iterators.&lt;br&gt;Move one of them through the list to the first name that begins with ‘M’. Since you know it is returning a string, you will know that (it).at(0) will return the first character in that string.&lt;br&gt;Now set the second iterator equal to the first. Use it to count how many M names there are in the list. Print this number out.&lt;br&gt;Using the second iterator, print out all the M names in reverse alphabetical order. (Remember that these are bidirectional iterators, so you –it works to go backwards.)&lt;br&gt;Now do the above three steps for all the ‘C’ names and then for all the ‘Q’ names.&lt;br&gt;If I had asked for ‘Y’ (I didn’t) the output would look like:&lt;br&gt;There are 3 Y names in the list&lt;br&gt;They are:Yujia Yuanhang Yingjie&lt;br&gt;This program has no user interaction. When you have it working, simply start a script file, run the program once, and close the script file.&lt;br&gt;Submit your source code and the script file to Blackboard.&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;STL容器的Lab作业，基础用法，并不难，只不过要过测试集，细节方面还是要注意的。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;The pur
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Java代写：CMSC132 Six Degrees of Kevin Bacon</title>
    <link href="http://yoursite.com/2016/11/01/page24/"/>
    <id>http://yoursite.com/2016/11/01/page24/</id>
    <published>2016-11-01T05:12:24.000Z</published>
    <updated>2016-11-03T08:18:34.588Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;这次需要代写的Java编程作业，考察Graph的知识点，读文件构造Graph，然后按条件用BFS搜索，并最终输出结果。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;n this project, you write a program that will help you play the “Six Degrees of Kevin Bacon” game. This game is played on a graph of movies and actors/actresses who starred in them. The Bacon Number is defined as follows: Kevin Bacon has a Bacon Number of 0; people who co-starred in a movie with Kevin Bacon have a Bacon Number of 1; people who co-starred in a movie with someone who has a Bacon Number of 1 in turn have a Bacon Number of 2; and so on. Given any actor/actress, the goal of the game is to establish their Bacon Number by a sequence of movies and co-stars. As shown in Figure 1, Bill Murray has a Kevin Bacon number of 1, because co-starred in “Wild Things”, while Cameron Diaz has a Kevin Bacon Number of 2, because she she co-starred with Bill Murray in “Charlie’s Angels”.&lt;br&gt;For example, using the “action” data set given below, we can show that “Al Pacino” has a Bacon Number&lt;br&gt;of 3 as follows:&lt;br&gt;&lt;br&gt;Pacino, Al&lt;br&gt;   Heat (1995)&lt;br&gt;Rosales Jr., Thomas&lt;br&gt;   Lost World: Jurassic Park, The (1997)&lt;br&gt;Richards, Ariana&lt;br&gt;   Tremors (1990)&lt;br&gt;Bacon, Kevin&lt;br&gt;Kevin Bacon (0) starred in Tremors with Richards, Ariana (1) who starred in Lost World: Jurassic Park, The (1997) with Rosales Jr., Thomas (2) who starred in Heat (1995) with Pacino, Al (3). If we use the “all cast” data set given below, we can show that “Al Pacino” has a Bacon Number of 1 as follows:&lt;br&gt;&lt;br&gt;Pacino, Al&lt;br&gt;   Boffo! Tinseltown’s Bombs and Blockbusters (2006)&lt;br&gt;Bacon, Kevin&lt;br&gt;Kevin Bacon (0) starred in Boffo! Tinseltown’s Bombs and Blockbusters (2006) with Pacino, Al (1). Inter- estingly this works way in the past as well:&lt;br&gt;&lt;br&gt;De Rosselli, Rex&lt;br&gt;   Lion’s Claws, The (1918)&lt;br&gt;Brinley, Charles&lt;br&gt;   Adventure in Sahara (1938)&lt;br&gt;Lawrence, Marc (I)&lt;br&gt;   Big Easy, The (1987)&lt;br&gt;Goodman, John (I)&lt;br&gt;   Death Sentence (2007)&lt;br&gt;Bacon, Kevin&lt;br&gt;Turns out that Rex De Rosselli died in 1941 and yet he has a Bacon Number of just 4. Actually Rex really has a Bacon Number of 3 but we need to use a much bigger data set “cast.all.txt” to show this:&lt;br&gt;&lt;br&gt;De Rosselli, Rex&lt;br&gt;   Dangerous Adventure, A (1922)&lt;br&gt;McCullough, Philo&lt;br&gt;   Chamber of Horrors (1966)&lt;br&gt;Danova, Cesare&lt;br&gt;   Animal House (1978)&lt;br&gt;Bacon, Kevin&lt;br&gt;We have included two data sets suitable for the program in the archive above (the data sets are courtesy of Robert Sedgewick):&lt;br&gt;&lt;br&gt;action06.txt (4.4 MB, only action movies)&lt;br&gt;cast.all.txt (64 MB, all movies from the 2014 IMDB)&lt;br&gt;The format of these data sets is rather simple: Each line is a movie, and each movie consists of several fields separated by the “/“ character. The first field is the name of the movie itself, all the following fields are the names of actors and actresses starring in the movie. For example:&lt;br&gt;&lt;br&gt;Heat (1995)/Daniels, Max/Perry, Manny/Marzan, Rick/Pacino, Al, …&lt;br&gt;Heat After Dark (1996)/Kitami, Toshiyuki/Sugata,…&lt;br&gt;Heated Vengeance (1985)/Dye, Cameron/Walker, Robert (III), …&lt;br&gt;Reading this data is not complicated, but we hand you the parsing code anyway so you can focus on the search algorithm instead.&lt;br&gt;In order to find the smallest Bacon Number for an actor we proceed as follows: First we identify the vertices for both Kevin Bacon and the actor in question (you already have that code). Then we start a breadth-first search at the vertex for Kevin Bacon; as we do this we keep track of the “previous vertex” that got us to the one we’re currently investigating. Once we find the vertex for the other actor, we are done: We just have to print out the path that got us here. This implementation of BFS is the only thing you have to write for this problem!&lt;br&gt;You will implement following functions in the given project:&lt;br&gt;&lt;br&gt;1.Degree of separation from Kevin Bacon:&lt;br&gt;2.Degree of separation between any two actors/actresses:&lt;br&gt;3.Search actor/actress/movie:&lt;br&gt;4.List cast of a movie or movies of an actor/actress:&lt;br&gt;5.Exit&lt;br&gt;Select:&lt;br&gt;Here is what each menu item does:&lt;br&gt;&lt;br&gt;Finds the Kevin Bacon number of an actor/actress&lt;br&gt;Find the shortest distance between any two actors/actresses.&lt;br&gt;Actors with same name has a Roman number after their names. You can enter the name and search the exact name in the database. For example, Emma Watson’s name appeared as “Watson, Emma (II)” in the movie database.&lt;br&gt;If input is a movies, it lists all the case. If the input is an actor/actress, it lists all the movies he/she&lt;br&gt;starred in.&lt;br&gt;terminate the program.&lt;br&gt;The “Graph” class, “Bag” class are fully implemented for you. The Graph class represents an undirected graph of vertices named 0 through V - 1. It supports the following two primary operations: add an edge to the graph, iterate over all of the vertices adjacent to a vertex. It also provides methods for returning the number of vertices V and the number of edges E. Parallel edges and self-loops are permitted. This implementation uses an adjacency-lists representation, which is a vertex-indexed array of Bag objects. All operations take constant time (in the worst case) except iterating over the vertices adjacent to a given vertex, which takes time proportional to the number of such vertices.&lt;br&gt;You will have add the mapping relationships between vertex symbols (name of a movie, actor, acres) and vertex number in “SymbolGraph” class. For example: in Graph 2, vertex 0 and vertex 5 can represent movies and other vertices represent actors/actresses. You also have to implement to methods to find the shortest path between two given vertices. All edges have the weight of 1. Therefore, you can also use BFS to find the shortest distance between two vertices.&lt;br&gt;Before you are sure your program is running correctly, test your code with a smaller database base. Start with a file that only has 5-10 movies and actors/actresses. If you think your program is working, then try with “action06.txt”, (4.4 MB, only action movies). To try “cast.all.txt”, 64 MB, all movies from the 2014 IMDB, 300,000 movies, 900,000 actors/actresses, you have to allocate larger memory for your project. Google it for instructions to do that. If you run your program from coo and line you specify memory size in your command line. Following command allocate 2gb memory for JVM to run KevinBacon.&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;这次需要代写的Java编程作业，考察Graph的知识点，读文件构造Graph，然后按条件用BFS搜索，并最终输出结果。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python代写：CP164 Stacks</title>
    <link href="http://yoursite.com/2016/10/30/page23/"/>
    <id>http://yoursite.com/2016/10/30/page23/</id>
    <published>2016-10-30T01:32:24.000Z</published>
    <updated>2016-11-03T08:16:13.928Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;这次需要代写的是一个关于Stack的Lab作业，由于是Lab作业，工作量并不大，都是基本的Stack操作。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;sing Versus Extending an ADT&lt;br&gt;&lt;br&gt;Note: In this and future labs we make a distinction between using an ADT and extending an ADT. You must be clear on this distinction:&lt;br&gt;&lt;br&gt;Using an ADT&lt;br&gt;&lt;br&gt;When asked to use an ADT write a program that is implementation independent, i.e. the program uses only ADT methods (such as those for a stack) and works for either the array or linked implementation of a data structure. Do not change any code in the ADT implementation files such as stack_array.py.&lt;br&gt;&lt;br&gt;Extending an ADT&lt;br&gt;&lt;br&gt;When asked to extend an ADT you are going to add new methods to an ADT, meaning that you are going to add code to one or both of the array or linked implementation of a data structure, such as stack_array.py.&lt;br&gt;&lt;br&gt;The Stack ADT (Abstract Data Type)&lt;br&gt;&lt;br&gt;A stack is a data structure that follows LIFO (Last In, First Out) rules. Data is added to the top of a stack and removed from the top of a stack. The Stack ADT provides methods for manipulating data in a stack.&lt;br&gt;A reminder of some important points of ADT use are:&lt;br&gt;&lt;br&gt;No matter what the underlying implementation of the stack programs should access a stack only through these methods.&lt;br&gt;As a corollary to the first point, the stack can be implemented in any number of ways so long as any given implementation follows the ADT function requirements. The implementation must invisible to the program using the Stack ADT.&lt;br&gt;A stack may store any type of data, although all the data it stores should be of the same type.&lt;br&gt;The following code imports a stack class and the Food class then initializes a stack:&lt;br&gt;&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;from stack_array import Stack&lt;br&gt;from food import Food&lt;br&gt;&lt;br&gt;s = Stack()&lt;br&gt; …&lt;br&gt;The line:&lt;br&gt;&lt;br&gt;1&lt;br&gt;from stack_array import Stack&lt;br&gt;imports the Stack class from the library file stack_array.py. This library file can be replaced by any other file that implements the Stack ADT methods.&lt;br&gt;The line:&lt;br&gt;&lt;br&gt;1&lt;br&gt;from food import Food&lt;br&gt;gives access to the methods in the food.py library file as above.&lt;br&gt;The line:&lt;br&gt;&lt;br&gt;1&lt;br&gt;s = Stack()&lt;br&gt;creates a stack named s. The stack is now ready to accept data.&lt;br&gt;&lt;br&gt;Project References&lt;br&gt;&lt;br&gt;As we work through the term we will be creating a number of different data structures and adding more functionality to the Food library already written. Making sure that each new project has the latest version of a data structure or Food library is difficult to do if we are reduced to copying and pasting our pydev modules into each new project. Fortunately, Eclipse provides a much better mechanism to reference code. Setting up Project References allows you to link one Pydev project to another, and to use the code from one project in another with the import and from … import * statements already shown. Nothing needs to be changed in your source code.&lt;br&gt;To make a reference from one project to another in Eclipse, right click on a project name in the Navigator pane. From the resulting pop-up menu click on Properties and then on Project References in the resulting dialog box.&lt;br&gt;Click on the check box of all projects that you wish to reference from the current project. In this example the project album is already selected, and the project data_structures will be added as a reference. Once this is done all of the classes in both album and data_structures will be available through import statements.&lt;br&gt;A few things to keep in mind when using project references:&lt;br&gt;&lt;br&gt;All referenced projects must be open when attempting to run a program.&lt;br&gt;Submit all referenced projects as part of your Eclipse archive (.zip) file when submitting exercises or the markers will not be able to run your programs. You may select multiple projects to include in an Eclipse archive file.&lt;br&gt;Do not use the same Pydev module names in two different referenced projects or Eclipse will not know which one an import statement is supposed to be referring to.&lt;br&gt;Project references go one way only. If the project stacks references the project data_structures, then data_structures should not reference stacks. Circular references are a very bad idea.&lt;br&gt;Upon occasion referenced projects may become ‘out of sync’ with the project that references them. To fix this, right-click on the project and choose Refresh to update Eclipse from the file system.&lt;br&gt;Array-based Stacks&lt;br&gt;&lt;br&gt;The file stack_array.py is a text file containing the basic outline of the array-based Stack class. Copy this code into the Pydev module stack_array.py in your login_data_structures project (where login is your Network login). Thus, a student with the Network login barn4520 should name their projects barn4520_Food and barn4520_data_structures.) The Lab Instructor will walk you through this library and discuss its inner workings.&lt;br&gt;&lt;br&gt;Tasks&lt;br&gt;&lt;br&gt;(If you were unable to complete Lab 1 correctly, you may use these files: food.py, food_utilities.py, and foods.txt as the basis for your lab. These files will not be available until after the labs for the previous week are completed.)&lt;br&gt;For the appropriate tasks you may download and use the Food class definition in food.py from Lab 1.&lt;br&gt;For all of your data structures (stacks, queues, BSTs, etc.), put your code into libraries in your Pydev project login_data_structures.&lt;br&gt;&lt;br&gt;For the stack_array library complete the implementations of the is_empty, pop, and peek methods. These methods extend the Stack ADT.&lt;br&gt;Write and test the following function:&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;def array_to_stack(s, a):&lt;br&gt;    “””&lt;br&gt;    ——————————————————-&lt;br&gt;    Pushes contents of a onto s.&lt;br&gt;    Use: array_to_stack(s, a)&lt;br&gt;    ——————————————————-&lt;br&gt;    Preconditions:&lt;br&gt;        s - a Stack object (Stack)&lt;br&gt;        a - a Python list (list)&lt;br&gt;    Postconditions:&lt;br&gt;        The contents of a are moved into s, a is empty.&lt;br&gt;    ——————————————————-&lt;br&gt;    “””&lt;br&gt;Add this function to a Pydev module named utilities in your login_data_structures project so that you have easy access to it later.&lt;br&gt;&lt;br&gt;Write and test the following function:&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;def stack_to_array(s, a):&lt;br&gt;    “””&lt;br&gt;    ——————————————————-&lt;br&gt;    Pops contents of s into a.&lt;br&gt;    Use: stack_to_array(s, a)&lt;br&gt;    ——————————————————-&lt;br&gt;    Preconditions:&lt;br&gt;        s - a Stack object (Stack)&lt;br&gt;        a - a Python list (list)&lt;br&gt;    Postconditions:&lt;br&gt;        Contents of s are moved into a, s is empty.&lt;br&gt;    ——————————————————-&lt;br&gt;    “””&lt;br&gt;Add this function to the Pydev module named utilities in your login_data_structures project.&lt;br&gt;&lt;br&gt;Write and test the following function:&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6&lt;br&gt;7&lt;br&gt;8&lt;br&gt;9&lt;br&gt;10&lt;br&gt;11&lt;br&gt;12&lt;br&gt;13&lt;br&gt;14&lt;br&gt;15&lt;br&gt;16&lt;br&gt;17&lt;br&gt;18&lt;br&gt;19&lt;br&gt;20&lt;br&gt;def stack_test(a):&lt;br&gt;    “””&lt;br&gt;    ——————————————————-&lt;br&gt;    Tests&lt;br&gt;    Use: stack_test(a)&lt;br&gt;    ——————————————————-&lt;br&gt;    Preconditions:&lt;br&gt;        a - list of data (list of ?)&lt;br&gt;    Postconditions:&lt;br&gt;        the methods of Stack are tested for both empty and&lt;br&gt;        non-empty stacks using the data in a:&lt;br&gt;        is_empty, push, pop, peek&lt;br&gt;    ——————————————————-&lt;br&gt;    “””&lt;br&gt;    s = Stack()&lt;br&gt;&lt;br&gt;    # tests for the stack methods go here&lt;br&gt;    # print the results of the method calls and verify by hand&lt;br&gt;&lt;br&gt;    return&lt;br&gt;Add this function to the Pydev module named utilities in your login_data_structures project.&lt;br&gt;Use a list of integers to test your stack code.&lt;br&gt;&lt;br&gt;Re-use stack_test, but this time pass it a list of Food data. (Use the data in foods.txt).&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;这次需要代写的是一个关于Stack的Lab作业，由于是Lab作业，工作量并不大，都是基本的Stack操作。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>为什么你需要编程作业代写帮助？</title>
    <link href="http://yoursite.com/2016/10/28/page22/"/>
    <id>http://yoursite.com/2016/10/28/page22/</id>
    <published>2016-10-27T18:22:24.000Z</published>
    <updated>2016-11-03T08:11:41.662Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;为什么你需要编程作业代写帮助？&lt;br&gt;&lt;br&gt;计算机编程一直都不是一个简单的领域，即使是对于那些痴迷于计算机编程的同学，乃至大神们，也很难掌握所有的理论和概念。但是，教授、讲师们不可能延长课时，让同学们有充分时间去领悟其中的精髓，甚至是精通计算机编程。&lt;br&gt;那有什么办法可以让同学们熟练掌握计算机编程呢？7*24的图书馆学习吗？当然不是！俗话说的好，“火车跑得快，全靠车头带”，同学们需要的是一名专业的工程师，在前方带领大家。&lt;br&gt;&lt;br&gt;为什么你需要一名专业的工程师指导？&lt;br&gt;&lt;br&gt;同学们寻求作业代写帮助往往有下面几个原因：没有足够的时间编程，理论概念太多需要时间梳理，不知道如何调试，无法修复Bug等等。其实这些原因并不特别，在我们工程师的日常工作中，这些也都是司空见惯的事情：项目明天要上线，技术调研需要时间整理汇总，生产环境不让调试，程序有Bug等等。当我们工程师自己解决不了的时候，也是去询问更资深的工程师，甚至专家。在他们帮忙解决问题、敲代码调试的时候，我们工程师也是坐在旁边观摩学习的。&lt;br&gt;&lt;br&gt;专业工程师指导的好处有哪些？&lt;br&gt;&lt;br&gt;首先，可以随时方便的获得在线帮助，尽可能专业地回答你相关领域的问题，包括理论问题、作业讲解、例题辅导，代码调试等等，甚至可以发给你参考材料的网址，省去了你在图书馆埋头的时间。&lt;br&gt;其次，专业的工程师都不会轻易放弃。对于专业的工程师来说，解决难题就是一种挑战，没有理由放弃任何难题。讲解的程序通常都是高品质的代码，结合了工程师多年的一线经验，会让你感受到醍醐灌顶，茅塞顿开的畅快。&lt;br&gt;最后，专业的工程师能快速理解需求，为每名同学量身定制最实惠的价格！&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;为什么你需要编程作业代写帮助？&lt;br&gt;&lt;br&gt;计算机编程一直都不是一个简单的领域，即使是对于那些
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
