<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生Computer Science编程作业代写</title>
  <subtitle>专业 高效 原创</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-19T09:59:54.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>csyoyo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>留学生Computer Science编程作业代写</title>
    <link href="http://yoursite.com/2111/01/11/mainpage/"/>
    <id>http://yoursite.com/2111/01/11/mainpage/</id>
    <published>2111-01-11T07:55:30.000Z</published>
    <updated>2016-09-19T09:59:54.153Z</updated>
    
    <content type="html">&lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队成员有的擅长java，有的擅长python，有的擅长数据结构，有的擅长机器学习，&lt;br&gt;  有的擅长C/C++，有的擅长ios/android。通过自己设计的任务分发系统，我们可以在15分钟内迅速准确评估时间和难度，完成之后还有互相之间的code review。&lt;br&gt;  相比与代写机构的黑心，个人代写的不规范(我们也是个人代写发展而来)，我们团队经过不断的调整进步，具备了代写机构规范的流程优势，&lt;br&gt;  并且价格合理，具备了个人代写的一对一，并且熟练了解代写流程规范。&lt;/p&gt;
&lt;h2 id=&quot;服务内容&quot;&gt;&lt;a href=&quot;#服务内容&quot; class=&quot;headerlink&quot; title=&quot;服务内容&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;服务内容&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  代写美国、加拿大、英国、澳洲或者其他国家的Computer Science编程作业，范围包括&lt;font color=&quot;red&quot;&gt;Assignment、Homework、Lab、Project、Final甚至App&lt;/font&gt;。&lt;br&gt;    我不会给你看不懂的高逼格code，我的编程风格都是模仿你的slides和notes，为你量身打造，&lt;font color=&quot;red&quot;&gt;绝无超纲代码&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;特别擅长各种疑难作业&lt;/font&gt;，做过大量Game Design、Operating System、Database System, Web Design，得分几乎全A(90%)。&lt;/p&gt;
&lt;h2 id=&quot;擅长范围&quot;&gt;&lt;a href=&quot;#擅长范围&quot; class=&quot;headerlink&quot; title=&quot;擅长范围&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;擅长范围&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  我们擅长范围包括但不限于：&lt;br&gt;    C C++ Java Python Php Android Ios&lt;br&gt;    Js Jsp Qt MFC J2ee Sql Matlab Ssh&lt;br&gt;    Assignment/Project/Lab/作业/编程/辅导&lt;br&gt;    Data structure/数据结构/机器学习/定制/制作&lt;br&gt;    Linux/Windows/Mac socket Algorithom/算法&lt;br&gt;    网站设计 Web开发 Operating system/操作系统&lt;br&gt;    Computer Science Everything/程序设计/app/&lt;/p&gt;
&lt;h2 id=&quot;质量保证&quot;&gt;&lt;a href=&quot;#质量保证&quot; class=&quot;headerlink&quot; title=&quot;质量保证&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;质量保证&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  开发之前会详细问你的开发语言、系统环境、软件版本、测试方式(本地测试、服务器自动测试)、是否需要documention、deadline(精确到小时)&lt;br&gt;    沟通好时间后，我们不会临着deadline给你code。一般都是提前足够的时间给客户反馈一个版本的code，如果有问题需要反馈修改也有充足的时间。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;除了code会免费提供给客户一个运行说明word，即使客户不知道如何运行，根据说明word也可以运行验证code&lt;/font&gt;。&lt;br&gt;    带checker/tester的必全过，带得分点的必全做，能顺手做掉的bonus也帮你做。&lt;br&gt;    小作业24小时内完成，大作业24-72小时，绝不浪费你的slip day。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;代码肯定是手写原创，不违反honor code，我给你的代码属于reference&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;免费提供售后服务，包括代码运行，讲解答疑&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&quot;价格优势&quot;&gt;&lt;a href=&quot;#价格优势&quot; class=&quot;headerlink&quot; title=&quot;价格优势&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;价格优势&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  价格通常在$100 USD以上，只有部分Lab可能低于这个价格。&lt;br&gt;    真正的&lt;font color=&quot;red&quot;&gt;无中介费用&lt;/font&gt;，绝不漫天要价，欢迎你货比三家，支持PayPal/支付宝/微信支付。&lt;br&gt;    通常先收取一半定金，写好之后验收code之后付尾款。&lt;br&gt;    我给你的不止是一个答案，还有我作为工程师的经验，编程方法和技巧。&lt;/p&gt;
&lt;h2 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;联系方式&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  邮箱 : cscoderman@gmail.com (请附带作业要求)&lt;br&gt;    微信 : cscoderman&lt;br&gt;    联系时，请简单或详细地说明你的要求+微信昵称(如大二，Algorithm and Data Structure)，便于我们快速报价与沟通。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++代写： Computer Networks Fall 2016</title>
    <link href="http://yoursite.com/2016/12/24/page74/"/>
    <id>http://yoursite.com/2016/12/24/page74/</id>
    <published>2016-12-24T10:24:42.000Z</published>
    <updated>2017-01-11T09:19:33.941Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用UDP和TCP套接字，完成一个简单的“黑客”游戏，有客户端和服务端，服务端生成密码，客户端猜测并且发送给&lt;br&gt;服务端验证，需要运用到了网络知识和c++知识&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE422 Computer Networks Fall 2016&lt;br&gt;Laboratory 1: Introduction to Socket Programming&lt;br&gt;Due: 23:59 Monday, Oct 3&lt;br&gt;1 Goal&lt;br&gt;Gain experience with socket programming by implementing a simple “hacker” game using&lt;br&gt;both UDP and TCP sockets. In this game, one participant tries to guess a four-digit password&lt;br&gt;known to the other participant, receiving feedback on each guess as described below.&lt;br&gt;2 Overview&lt;br&gt;In this lab, you will implement a networking version of the hacking mini game, which will&lt;br&gt;comprise of two C++ programs, one client and one server. This lab will help you to gain&lt;br&gt;experience with socket programming using Berkeley socket interface. In order to focus more&lt;br&gt;on the details of socket programming part, the game and most of the command parsing are&lt;br&gt;provided as a skeleton code.&lt;br&gt;This lab is worth for 60 points. This lab is due no later than 23:59 Monday, Oct 3. No late&lt;br&gt;submission will be accepted.&lt;br&gt;3 Specification&lt;br&gt;In this lab, you are required to implement a client and a server program for the ”hacker”&lt;br&gt;game. The server program and client program will interact by exchanging messages to&lt;br&gt;simulate the game play. A simple message/packet format is provided in the file: message.h.&lt;br&gt;The server and client program will handshake through TCP and the gaming interaction will&lt;br&gt;use UDP.&lt;br&gt;3.1 “Hacker” Game&lt;br&gt;The game will display a list of possible passwords (formatted in a way to mimic what is seen&lt;br&gt;in the Fallout game series). The user will then enter a guess for which one they believe the&lt;br&gt;password to be. The game will report back the “likeness” of the guess (how many correct&lt;br&gt;letters are in the correct position).&lt;br&gt;1&lt;br&gt;For example, suppose the password is ”FULL” and the displayed text, containing all of the&lt;br&gt;possible passwords, is:&lt;br&gt;ROBCO INDUSTRIES (TM) TERMALINK PROTOCOL&lt;br&gt;ENTER PASSWORD NOW&lt;br&gt;&lt;br&gt;The default number of attempts is set to 4.&lt;br&gt;A demo of the ”hacking” game play can be found at: [Demo Play]&lt;br&gt;-In the demo, click the power button in the right lower corner then click on the phase that&lt;br&gt;you would like to guess as the password.&lt;br&gt;3.2 The Server Program&lt;br&gt;Example invocation: ./server&lt;br&gt;The server program will create a TCP socket and will then wait for an incoming TCP&lt;br&gt;connection. This TCP socket’s port will be assigned by the operating system and will be&lt;br&gt;printed to the console. We assume that the client knows this TCP port number, because the&lt;br&gt;client is started after the server. When the server receives an incoming TCP connection, it&lt;br&gt;creates a UDP socket, whose port is also assigned by the OS. Via the TCP socket, the server&lt;br&gt;program returns a packet to the client containing the UDP port number. This can be done&lt;br&gt;using the UDP Cntr MSG type found in message.h.&lt;br&gt;Once the UDP connection is established, the server program initializes a variable of type&lt;br&gt;HackerGame. The initialization of this variable generates the server password, a list of&lt;br&gt;possible passwords, a string to act as the display board for the game, and the number&lt;br&gt;of attempts left. These are accessible through functions in the HackerGame class. We&lt;br&gt;recommend that you look over HackerGame.h. Guesses from the client can be evaluated by&lt;br&gt;2&lt;br&gt;using the TestEntry() function. The server keeps receiving and testing guesses from the&lt;br&gt;client until either the number of attempts has been exhausted or the password is guessed&lt;br&gt;correctly. For each guess, the server sends a packet containing the “Likeness” of the guess&lt;br&gt;to the client using the UDP socket. Once the game is over, either by guessing the password&lt;br&gt;correctly or running out of attempts, the server must notify the client using the UDP socket,&lt;br&gt;after which the server closes both the TCP and UDP sockets.&lt;br&gt;3.3 The Client Program&lt;br&gt;Example invocation: ./client -h lenny.cse.msu.edu -p 48192&lt;br&gt;The client program is required to accept the following arguments.&lt;br&gt;• -h is the server address (domain name).&lt;br&gt;• -p is the TCP port number on which the server listens for an incoming connection.&lt;br&gt;The client resolves the server address by using gethostbyname() and connects to the server&lt;br&gt;over TCP. The client then receives a packet from the server containing the UDP port number.&lt;br&gt;Using the UDP port number, the client sends a confirmation message to the server, letting&lt;br&gt;it know that it can send the first game message, using the UDP socket. The client receives a&lt;br&gt;packet containing the game display text and prints it to console. The client then takes input&lt;br&gt;from the user for the a guess at the password and sends the guess to the server program via&lt;br&gt;the UDP socket. For each guess the client should receive a response containing the likeness&lt;br&gt;of the guess and how many attempts are left. These are to be printed to console.&lt;br&gt;The client should monitor the content of each game message for ending conditions. Specif-&lt;br&gt;ically, if AttemptsLeft = 0 or IsGameWon = true, then the client should print to console&lt;br&gt;either “Terminal Locked Out!” or”Access Granted!”, respectively. The client then closes&lt;br&gt;both the TCP and UDP sockets.&lt;br&gt;3.4 Packet Format: message.h&lt;br&gt;There are two different types of packets for this lab; both are defined in message.h.&lt;br&gt;1. UDP Cntr MSG: which contains only one field: int port&lt;br&gt;2. Game MSG: which contains:&lt;br&gt;(a) char Display[1000]&lt;br&gt;(b) int AttemptsLeft&lt;br&gt;(c) bool IsGameWon&lt;br&gt;(d) int Likeness&lt;br&gt;3&lt;br&gt;(e) char Entry[10]&lt;br&gt;String type variables cannot be used in these packets due to how they utilize memory. For&lt;br&gt;information to be correctly sent in packets, the packet most know the starting address of the&lt;br&gt;variable and how large it is. Hence why we use arrays of chars.&lt;br&gt;You may want to still use strings in your client and server programs, however. Following are&lt;br&gt;two examples of copying content between the two variable types.&lt;br&gt;Copying char array to a string:&lt;br&gt;char Word1[10] = “test”;&lt;br&gt;string Word2(Word1); //Word2 now contains “test”&lt;br&gt;Copying a string to a char array:&lt;br&gt;string Word2 = “test”;&lt;br&gt;char Word1[10];&lt;br&gt;strcpy(Word1, Word2.c str()); // Word1 now contains “test”&lt;br&gt;4 Deliverables&lt;br&gt;You will submit your lab using the web based handin utility. Don’t use the command-line&lt;br&gt;based handin facility. Please submit all files in your project directory. If you start your lab&lt;br&gt;with the skeleton code, submit all files, even if the file is not modified.&lt;br&gt;This lab is due no later than 23:59 Monday, Oct 3. No late submission will be accepted.&lt;br&gt;The compilation must be done using a makefile. The code should compile on multiple&lt;br&gt;machines (can use lenny, carl, bart, etc). Please do not do your debugging on the servers&lt;br&gt;(arctic or black). You will not be awarded any points if your submission does not compile&lt;br&gt;using a makefile. A sample makefile will be provided. It will only have to be changed if you&lt;br&gt;add more files to your solution. Please test your programs before handing them in.&lt;br&gt;A README file is required including your name, PID, and machines that you tested on.&lt;br&gt;You will run your server and client programs and paste the output in your README file.&lt;br&gt;A sample README file is also included in the skeleton code. You are also encouraged to&lt;br&gt;include explanations about parts of your code that may not work in the README file.&lt;br&gt;5 Example&lt;br&gt;Follows is an example of output from the client and server. Your output may differ.&lt;br&gt;1. Invoke the server&lt;br&gt;4&lt;br&gt;Server:&lt;br&gt;&amp;gt;./server&lt;br&gt;Creating TCP Socket…&lt;br&gt;TCP socket has port number: 53401&lt;br&gt;2. Invoke the client. The client connects to the server using the TCP connection infor-&lt;br&gt;mation that you provide via the command line.&lt;br&gt;Client:&lt;br&gt;&amp;gt;./client -h lenny.cse.msu.edu -p 53401&lt;br&gt;Client is running…&lt;br&gt;remote host: lenny.cse.msu.edu, remote TCP port: 53401&lt;br&gt;Connected to Server!&lt;br&gt;3. Server accepts the TCP connection from the client and sends the UDP port information&lt;br&gt;using the TCP connection.&lt;br&gt;Server:&lt;br&gt;A new client is connected to the server!&lt;br&gt;Creating UDP Socket…&lt;br&gt;UDP socket has port number: 32471&lt;br&gt;Sending UDP port number to client using TCP connection…&lt;br&gt;4. Client uses the message from the TCP connection to establish an UDP port.&lt;br&gt;Client:&lt;br&gt;Reading TCP socket for UDP set up info…&lt;br&gt;UDP port on Server: 32471&lt;br&gt;Server IP: 35.9.23.42&lt;br&gt;Establishing UDP Connection…&lt;br&gt;5. Once the UDP connection is established, the server starts the game and accepts guesses&lt;br&gt;from the client until either the password is guessed or the number of attempts is&lt;br&gt;exhausted. Optionally the server can display the password for debugging purposes.&lt;br&gt;Server:&lt;br&gt;Password: FOUR&lt;br&gt;Starting game…&lt;br&gt;Entry: term&lt;br&gt;Likeness: 0&lt;br&gt;Entry: ball&lt;br&gt;Likeness: 0&lt;br&gt;Entry: year&lt;br&gt;Likeness: 1&lt;br&gt;Entry: four&lt;br&gt;Likeness: 4&lt;br&gt;Access Granted!&lt;br&gt;Closing TCP and UDP sockets…&lt;br&gt;5&lt;br&gt;Client:&lt;br&gt;Receiving first game message…&lt;br&gt;ROBCO INDUSTRIES (TM) TERMALINK PROTOCOL&lt;br&gt;Entry: term&lt;br&gt;Likeness: 0&lt;br&gt;Attempts left: 3&lt;br&gt;Entry: ball&lt;br&gt;Likeness: 0&lt;br&gt;Attempts left: 2&lt;br&gt;Entry: year&lt;br&gt;Likeness: 1&lt;br&gt;Attempts left: 1&lt;br&gt;Entry: four&lt;br&gt;Access Granted!&lt;br&gt;Closing TCP and UDP sockets…&lt;br&gt;6 Grading&lt;br&gt;You will not be awarded any points if your submission does not compile.&lt;br&gt;Please feel free to mail TA Glen Simon simongle AT msu.edu for questions or clarifications.&lt;br&gt;Additional notes and FAQ willl be posted on the website as well.&lt;br&gt;7&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用UDP和TCP套接字，完成一个简单的“黑客”游戏，有客户端和服务端，服务端生成密码，客户端猜测并且发送给&lt;br&gt;服务端验证，需要运用到了网络知识和c++知识&lt;br&gt;&lt;br&gt;&lt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Network" scheme="http://yoursite.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Assignment 1, prepared by Chris Trathen</title>
    <link href="http://yoursite.com/2016/12/23/page72/"/>
    <id>http://yoursite.com/2016/12/23/page72/</id>
    <published>2016-12-23T07:28:43.000Z</published>
    <updated>2017-01-11T08:38:44.445Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105 CW1  1&lt;br&gt;CSE105 Introduction to Programming in Java, 2016&lt;br&gt;Assignment 1, prepared by Chris Trathen&lt;br&gt;Instruction&lt;br&gt;(1) There are 5 questions for the first assignment. Each question is worth 20 marks. The&lt;br&gt;assignment is worth 15% of the total mark for CSE105.&lt;br&gt;(2) Plagiarism will be very closely monitored. You should be very cautious when you discuss&lt;br&gt;with classmates. Two similar answers will all get zeros marks or more serious consequences.&lt;br&gt;After the marking, some of the students will be interviewed to confirm their independence in the&lt;br&gt;completion of the assignments.&lt;br&gt;(3) The deadline for submission of Assignment 1 is: 6:00pm, October 16, 2016 Sunday. You&lt;br&gt;should pack all of your code with WinRAR, using your student ID as the file name and then&lt;br&gt;upload it to ICE. The uploading link will be automatically stopped after 6:00pm.&lt;br&gt;Question 1&lt;br&gt;The factorial function of a positive integer n is the product of all the integers from 1 to n. For&lt;br&gt;example, the factorial of 5 is 1x2x3x4x5 = 120. This is usually expressed as 5!=120. By&lt;br&gt;definition 0!=1. Write a program that calculates the factorial n!.&lt;br&gt;Write a program that accepts as input a number between 0 and 20 and calculates the factorial of&lt;br&gt;that number.&lt;br&gt;Question 2&lt;br&gt;Write a program that prints a table of temperature conversion from Celsius to Fahrenheit. For&lt;br&gt;example:&lt;br&gt;Celsius  Fahrenheit&lt;br&gt;100  212&lt;br&gt;5  41&lt;br&gt;…………&lt;br&gt;-5  23&lt;br&gt;The exact range of data used is your choice. This is example only.&lt;br&gt;Use the formula F = C &lt;em&gt; 9 / 5 + 32&lt;br&gt;Perform the calculation using floating point arithmetic, but display the results as the closest&lt;br&gt;integer.&lt;br&gt;CSE105 CW1  2&lt;br&gt;Question 3&lt;br&gt;Write a program that analyses a triangle. Input the length of 3 sides of a triangle from the&lt;br&gt;keyboard.&lt;br&gt;Firstly, reject any input that does not represent a triangle.&lt;br&gt;Then determine whether the triangle is:&lt;br&gt; Equilateral - all sides the same length&lt;br&gt; Isosceles - two sides the same length&lt;br&gt; Scalene - no sides the same length&lt;br&gt;CSE105 CW1  3&lt;br&gt;Question 4&lt;br&gt;A leap year is a year with 366 days. A leap year has the 29 th February. A year is a leap year if it is&lt;br&gt;divisible by 4 except for the century years (divisible by 100). Century years are only leap years if they are&lt;br&gt;divisible by 400. Write a program that accepts a year and determines if it is a leap year.&lt;br&gt;Use a separate method to test if a year is a leap year.&lt;br&gt;The following information will help when you test your program. The leap years 1800 to 2400:&lt;br&gt;1804  1904  2004  2104  2204  2304&lt;br&gt;1808  1908  2008  2108  2208  2308&lt;br&gt;1812  1912  2012  2112  2212  2312&lt;br&gt;1816  1916  2016  2116  2216  2316&lt;br&gt;1820  1920  2020  2120  2220  2320&lt;br&gt;1824  1924  2024  2124  2224  2324&lt;br&gt;1828  1928  2028  2128  2228  2328&lt;br&gt;1832  1932  2032  2132  2232  2332&lt;br&gt;1836  1936  2036  2136  2236  2336&lt;br&gt;1840  1940  2040  2140  2240  2340&lt;br&gt;1844  1944  2044  2144  2244  2344&lt;br&gt;1848  1948  2048  2148  2248  2348&lt;br&gt;1852  1952  2052  2152  2252  2352&lt;br&gt;1856  1956  2056  2156  2256  2356&lt;br&gt;1860  1960  2060  2160  2260  2360&lt;br&gt;1864  1964  2064  2164  2264  2364&lt;br&gt;1868  1968  2068  2168  2268  2368&lt;br&gt;1872  1972  2072  2172  2272  2372&lt;br&gt;1876  1976  2076  2176  2276  2376&lt;br&gt;1880  1980  2080  2180  2280  2380&lt;br&gt;1884  1984  2084  2184  2284  2384&lt;br&gt;1888  1988  2088  2188  2288  2388&lt;br&gt;1892  1992  2092  2192  2292  2392&lt;br&gt;1896  1996  2096  2196  2296  2396&lt;br&gt;2000&lt;br&gt;2400&lt;br&gt;CSE105 CW1  4&lt;br&gt;Question 5&lt;br&gt;Write Java program to check if a number is Armstrong number.&lt;br&gt;An Armstrong number of 3 digit is a number for which sum of cube of its digits are equal to the&lt;br&gt;number.&lt;br&gt;Examples:&lt;br&gt;371 is an Armstrong number because 3&lt;/em&gt;3&lt;em&gt;3 + 7&lt;/em&gt;7&lt;em&gt;7 + 1&lt;/em&gt;1&lt;em&gt;1 = 371.&lt;br&gt;123 is not an Armstrong number because 1&lt;/em&gt;1&lt;em&gt;1 + 2&lt;/em&gt;2&lt;em&gt;2 + 3&lt;/em&gt;3*3 = 36.&lt;br&gt;This assignment is individual work. Plagiarism (e.g. copying materials from other&lt;br&gt;sources without proper acknowledgement) is a serious academic offence. Plagiarism&lt;br&gt;will not be tolerated and will be dealt with in accordance with the University Code of&lt;br&gt;Practice on Assessment.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Assignment 1, prepared by Chris Trathen</title>
    <link href="http://yoursite.com/2016/12/23/page73/"/>
    <id>http://yoursite.com/2016/12/23/page73/</id>
    <published>2016-12-23T07:28:43.000Z</published>
    <updated>2017-01-11T08:38:44.445Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105 CW1  1&lt;br&gt;CSE105 Introduction to Programming in Java, 2016&lt;br&gt;Assignment 1, prepared by Chris Trathen&lt;br&gt;Instruction&lt;br&gt;(1) There are 5 questions for the first assignment. Each question is worth 20 marks. The&lt;br&gt;assignment is worth 15% of the total mark for CSE105.&lt;br&gt;(2) Plagiarism will be very closely monitored. You should be very cautious when you discuss&lt;br&gt;with classmates. Two similar answers will all get zeros marks or more serious consequences.&lt;br&gt;After the marking, some of the students will be interviewed to confirm their independence in the&lt;br&gt;completion of the assignments.&lt;br&gt;(3) The deadline for submission of Assignment 1 is: 6:00pm, October 16, 2016 Sunday. You&lt;br&gt;should pack all of your code with WinRAR, using your student ID as the file name and then&lt;br&gt;upload it to ICE. The uploading link will be automatically stopped after 6:00pm.&lt;br&gt;Question 1&lt;br&gt;The factorial function of a positive integer n is the product of all the integers from 1 to n. For&lt;br&gt;example, the factorial of 5 is 1x2x3x4x5 = 120. This is usually expressed as 5!=120. By&lt;br&gt;definition 0!=1. Write a program that calculates the factorial n!.&lt;br&gt;Write a program that accepts as input a number between 0 and 20 and calculates the factorial of&lt;br&gt;that number.&lt;br&gt;Question 2&lt;br&gt;Write a program that prints a table of temperature conversion from Celsius to Fahrenheit. For&lt;br&gt;example:&lt;br&gt;Celsius  Fahrenheit&lt;br&gt;100  212&lt;br&gt;5  41&lt;br&gt;…………&lt;br&gt;-5  23&lt;br&gt;The exact range of data used is your choice. This is example only.&lt;br&gt;Use the formula F = C &lt;em&gt; 9 / 5 + 32&lt;br&gt;Perform the calculation using floating point arithmetic, but display the results as the closest&lt;br&gt;integer.&lt;br&gt;CSE105 CW1  2&lt;br&gt;Question 3&lt;br&gt;Write a program that analyses a triangle. Input the length of 3 sides of a triangle from the&lt;br&gt;keyboard.&lt;br&gt;Firstly, reject any input that does not represent a triangle.&lt;br&gt;Then determine whether the triangle is:&lt;br&gt; Equilateral - all sides the same length&lt;br&gt; Isosceles - two sides the same length&lt;br&gt; Scalene - no sides the same length&lt;br&gt;CSE105 CW1  3&lt;br&gt;Question 4&lt;br&gt;A leap year is a year with 366 days. A leap year has the 29 th February. A year is a leap year if it is&lt;br&gt;divisible by 4 except for the century years (divisible by 100). Century years are only leap years if they are&lt;br&gt;divisible by 400. Write a program that accepts a year and determines if it is a leap year.&lt;br&gt;Use a separate method to test if a year is a leap year.&lt;br&gt;The following information will help when you test your program. The leap years 1800 to 2400:&lt;br&gt;1804  1904  2004  2104  2204  2304&lt;br&gt;1808  1908  2008  2108  2208  2308&lt;br&gt;1812  1912  2012  2112  2212  2312&lt;br&gt;1816  1916  2016  2116  2216  2316&lt;br&gt;1820  1920  2020  2120  2220  2320&lt;br&gt;1824  1924  2024  2124  2224  2324&lt;br&gt;1828  1928  2028  2128  2228  2328&lt;br&gt;1832  1932  2032  2132  2232  2332&lt;br&gt;1836  1936  2036  2136  2236  2336&lt;br&gt;1840  1940  2040  2140  2240  2340&lt;br&gt;1844  1944  2044  2144  2244  2344&lt;br&gt;1848  1948  2048  2148  2248  2348&lt;br&gt;1852  1952  2052  2152  2252  2352&lt;br&gt;1856  1956  2056  2156  2256  2356&lt;br&gt;1860  1960  2060  2160  2260  2360&lt;br&gt;1864  1964  2064  2164  2264  2364&lt;br&gt;1868  1968  2068  2168  2268  2368&lt;br&gt;1872  1972  2072  2172  2272  2372&lt;br&gt;1876  1976  2076  2176  2276  2376&lt;br&gt;1880  1980  2080  2180  2280  2380&lt;br&gt;1884  1984  2084  2184  2284  2384&lt;br&gt;1888  1988  2088  2188  2288  2388&lt;br&gt;1892  1992  2092  2192  2292  2392&lt;br&gt;1896  1996  2096  2196  2296  2396&lt;br&gt;2000&lt;br&gt;2400&lt;br&gt;CSE105 CW1  4&lt;br&gt;Question 5&lt;br&gt;Write Java program to check if a number is Armstrong number.&lt;br&gt;An Armstrong number of 3 digit is a number for which sum of cube of its digits are equal to the&lt;br&gt;number.&lt;br&gt;Examples:&lt;br&gt;371 is an Armstrong number because 3&lt;/em&gt;3&lt;em&gt;3 + 7&lt;/em&gt;7&lt;em&gt;7 + 1&lt;/em&gt;1&lt;em&gt;1 = 371.&lt;br&gt;123 is not an Armstrong number because 1&lt;/em&gt;1&lt;em&gt;1 + 2&lt;/em&gt;2&lt;em&gt;2 + 3&lt;/em&gt;3*3 = 36.&lt;br&gt;This assignment is individual work. Plagiarism (e.g. copying materials from other&lt;br&gt;sources without proper acknowledgement) is a serious academic offence. Plagiarism&lt;br&gt;will not be tolerated and will be dealt with in accordance with the University Code of&lt;br&gt;Practice on Assessment.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： FIT9131 Programming Foundations</title>
    <link href="http://yoursite.com/2016/12/21/page71/"/>
    <id>http://yoursite.com/2016/12/21/page71/</id>
    <published>2016-12-21T08:23:43.000Z</published>
    <updated>2017-01-11T08:29:12.376Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Java的入门级基础，用java完成菜单管理系统，按题目要求使用 ArrayList，loop等方法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;FIT9131 Programming Foundations&lt;br&gt;Week 6 Exercises&lt;br&gt;1&lt;br&gt;Homework checklist&lt;br&gt;To be up to date you should have completed the following:&lt;br&gt;  Tutorial exercises from weeks 1– 5.&lt;br&gt;  The complete code for the LuckyNumberGenerator class and the Player class for&lt;br&gt;your assignment.&lt;br&gt;  Read Chapters 1-4 of the text book, Objects First with Java, Barnes &amp;amp; Kölling.&lt;br&gt;REMINDER :&lt;br&gt;You MUST ATTEND your tutorial next week, WEEK 7, to organise your&lt;br&gt;interview for Assignment 1 with your own tutor. If no interviews are&lt;br&gt;scheduled, no marks will be awarded to your assignment.&lt;br&gt;If you are an off-campus student, the interview appointments will be&lt;br&gt;made via emails.&lt;br&gt;You should show your assignment work to your tutor this week for&lt;br&gt;feedback/comments.&lt;br&gt;Exercises to work on in the tutorial&lt;br&gt;1. Create a class in BlueJ called Week6Q1, then add a method in it called&lt;br&gt;displayMenu() that prints the following menu to the screen and asks the user to&lt;br&gt;choose one of the options presented, as follows:&lt;br&gt;A. Option #A&lt;br&gt;B. Option #B&lt;br&gt;C. Option #C&lt;br&gt;D. Option #D&lt;br&gt;X. Exit!&lt;br&gt;Please enter your choice:&lt;br&gt;The method should do nothing else other than printing the menu.&lt;br&gt;2&lt;br&gt;2. Add a method to the Week6Q1 class in Q.1, and name it start(). In this method, make&lt;br&gt;a single call to displayMenu(), then use a Scanner object to accept an input from&lt;br&gt;the user. When the user enters an option (A/B/C/D/X) from the menu, in upper or lower&lt;br&gt;case, the program should print an appropriate message indicating which option has been&lt;br&gt;selected (e.g. “Option #A was selected”). There is no need to actually perform&lt;br&gt;any real action, apart from the printed message.&lt;br&gt;If the user enters an option other than those on the menu, an error message should be&lt;br&gt;printed.&lt;br&gt;Run the start() method several times to check that you have it working as required.&lt;br&gt;Hint : you need to use the if/switch statements in your code&lt;br&gt;3. Modify the start() method, this time adding in a loop so that the menu is displayed&lt;br&gt;repeatedly, until the last option is selected. When the last option is selected, exit the&lt;br&gt;start() method (ie. stop the loop).&lt;br&gt;Hint : you need to use a combination of the if/switch and for/while statements in&lt;br&gt;your code&lt;br&gt;The following exercises are from the text book. These will test and re-enforce your&lt;br&gt;understanding of the concepts covered in the week 5/6 lectures.&lt;br&gt;4. 4.1 (explore MusicOrganizer class the music-organizer-v1 project)&lt;br&gt;5. 4.2–4.11, 4.13 (using ArrayList methods)&lt;br&gt;6. 4.20-4.21 (for-each loop).&lt;br&gt;7. 4.30 &amp;amp; 4.32 (while loop)&lt;br&gt;Homework for this week&lt;br&gt;Finish the tutorial exercises for week 6.&lt;br&gt;Work on (and hopefully finish) the code for the Game class for your assignment.&lt;br&gt;Read chapter 6 (sections 6.1-6.5, and optionally 6.6-6.10) of the text book, Objects First with&lt;br&gt;Java, Barnes &amp;amp; Kölling&lt;br&gt;Read chapter 7 (sections 7.1-7.4) of the text book, Objects First with Java, Barnes &amp;amp; Kölling&lt;br&gt;- Do exercises 7.2-7.3, 7.7-7.8 (fixed-size Arrays)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Java的入门级基础，用java完成菜单管理系统，按题目要求使用 ArrayList，loop等方法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/stron
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Task 2 Latin Squares</title>
    <link href="http://yoursite.com/2016/12/20/page70/"/>
    <id>http://yoursite.com/2016/12/20/page70/</id>
    <published>2016-12-20T08:44:56.000Z</published>
    <updated>2017-01-11T08:25:21.166Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;检查一个二维数组是不是Latin square ，是否符合Latin square的规则，二维数组也是用户通过界面输入&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;INFO1103 Introduction to Programming, Semester 2, 2016&lt;br&gt;1&lt;br&gt;Task 2 Latin Squares&lt;br&gt;Submission deadline: 5pm on Saturday, 3 rd September (Week 6)&lt;br&gt;Submission: Submit your LatinSquares.java file via the online system PASTA.&lt;br&gt;Weight: 5 marks = 5% of your final mark.&lt;br&gt;This assessment must be completed individually.&lt;br&gt;Write a program called LatinSquares.java that checks if an n x n matrix is a Latin square. Your&lt;br&gt;program should be in the package squares and should be based off the skeleton code available on&lt;br&gt;PASTA.&lt;br&gt;A n x n matrix is a Latin square if every row and column contains the numbers 1, 2, 3,… n, exactly once. For&lt;br&gt;example:&lt;br&gt;A Latin square of size 3:&lt;br&gt;3  2  1&lt;br&gt;1  3  2&lt;br&gt;2  1  3&lt;br&gt;A Latin square of size 5:&lt;br&gt;1 2 3 4 5&lt;br&gt;2 3 5 1 4&lt;br&gt;3 5 4 2 1&lt;br&gt;4  1 2 5 3&lt;br&gt;5  4 1 3 2&lt;br&gt;The name “Latin square” was inspired by the work of the Swiss mathematician Leonhard Euler, who used&lt;br&gt;Latin characters as symbols. Other symbols can be used instead of Latin characters, e.g. integer numbers, as&lt;br&gt;in this assignment. Latin squares are used for experimental design in statistics, for error correcting codes in&lt;br&gt;telecommunication systems and are also related to the Sudoku puzzles. See the Wikipedia page on Latin&lt;br&gt;Squares for more information (&lt;a href=&quot;http://en.wikipedia.org/wiki/Latin_square&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://en.wikipedia.org/wiki/Latin_square&lt;/a&gt;).&lt;br&gt;Download the LatinSquares.java skeleton code from PASTA. This skeleton code contains a template&lt;br&gt;for your submission. You must not modify the existing method headers as we use them to test your code,&lt;br&gt;however you may add any additional methods you believe are necessary.&lt;br&gt;Your task is to write the methods readSize, readSquare, validColumn, validRow, and&lt;br&gt;validLatinSquare as described in the skeleton code. Your complete program will include the given&lt;br&gt;skeleton code and the methods that you will write.&lt;br&gt;Your code will be tested at the method level, which means each method will be tested individually, not just&lt;br&gt;by running the main method. This means you need to make sure that each method works exactly as the&lt;br&gt;documentation in the skeleton code describes.&lt;br&gt;See below for some example outputs of the main method being run. The text in  black is required output, and&lt;br&gt;the text in  green is user input.&lt;br&gt;&lt;br&gt;INFO1103 Introduction to Programming, Semester 2, 2016&lt;br&gt;2&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;3&lt;br&gt;Please enter 9 numbers:&lt;br&gt;1 2 3 2 3 1 3 1 2&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|2|3|1|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|3|1|2|&lt;br&gt;+‐+‐+‐+&lt;br&gt;It’s a Latin square!&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;3&lt;br&gt;Please enter 9 numbers:&lt;br&gt;0 2 1 1 0 2 2 1 0&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+‐+&lt;br&gt;|0|2|1|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|0|2|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|2|1|0|&lt;br&gt;+‐+‐+‐+&lt;br&gt;Not a Latin square!&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;2&lt;br&gt;Please enter 4 numbers:&lt;br&gt;1 2 3 4&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+&lt;br&gt;|1|2|&lt;br&gt;+‐+‐+&lt;br&gt;|3|4|&lt;br&gt;+‐+‐+&lt;br&gt;Not a Latin square!&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;3&lt;br&gt;Please enter 9 numbers:&lt;br&gt;1 2 3 1 2 3 1 2 3&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;Not a Latin square!&lt;br&gt;Assumptions&lt;br&gt;You can make the following assumptions for this task:&lt;br&gt;  Your code will only be given sensible input (e.g. ? ? 0).&lt;br&gt;  Any inputs will be given as integers only; you do not need to worry about invalid inputs like floating&lt;br&gt;point numbers or Strings.&lt;br&gt;How to Submit in PASTA&lt;br&gt;Writing your code&lt;br&gt;1. In Eclipse, create a project “info1103_task2”. In this project, create a package “squares”, and then a&lt;br&gt;class “LatinSquares” within the package.&lt;br&gt;2.  Download the skeleton code from PASTA and either import the class or paste the code into the class&lt;br&gt;“LatinSquares.java”.&lt;br&gt;3. Write the required methods. You may not change any method headers in the skeleton code! Your&lt;br&gt;program consists of the provided skeleton code and the methods that you wrote. Compile and run&lt;br&gt;your program and make sure that it produces the same output as the example output. When you are&lt;br&gt;happy with your program, you need to submit it on PASTA.&lt;br&gt;&lt;br&gt;INFO1103 Introduction to Programming, Semester 2, 2016&lt;br&gt;3&lt;br&gt;Submitting in PASTA&lt;br&gt;1. Log in to PASTA (&lt;a href=&quot;http://info1103.it.usyd.edu.au/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://info1103.it.usyd.edu.au/&lt;/a&gt;) with your Unikey login and password.&lt;br&gt;Note: If you are off-campus, you will need to establish a VPN connection to access PASTA. This means&lt;br&gt;installing a program called “VPN client” on your computer and running it every time when you use PASTA&lt;br&gt;off-campus. Instructions how to do this are available here:&lt;br&gt;&lt;a href=&quot;http://staff.ask.sydney.edu.au/app/answers/detail/a_id/519/~/how-do-i-download-and-install-the-vpn-client-to-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://staff.ask.sydney.edu.au/app/answers/detail/a_id/519/~/how-do-i-download-and-install-the-vpn-client-to-&lt;/a&gt;&lt;br&gt;access-the-university-network%3F&lt;br&gt;If you have problems with VPN, try synchronising your password:&lt;br&gt;&lt;a href=&quot;https://www.auth.usyd.edu.au/extro/pwresync/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.auth.usyd.edu.au/extro/pwresync/&lt;/a&gt;&lt;br&gt;If this doesn’t work, contact the ICT helpdesk: &lt;a href=&quot;http://sydney.edu.au/ict/student/contact/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sydney.edu.au/ict/student/contact/&lt;/a&gt;&lt;br&gt;2. Find Task 2 and press “Submit”. Then press “Choose File” and attach the LatinSquares.java&lt;br&gt;file, then press “I accept” (after reading the University policy on academic honesty).&lt;br&gt;3. If you see a message indicating that your code is queued for testing under Task 2, this means that&lt;br&gt;your code has been uploaded successfully.&lt;br&gt;4. If you see a red error box, you need to fix any problems indicated before your submission will be&lt;br&gt;accepted.&lt;br&gt;5. Once your program has been tested, the page will tell you to refresh for results, so refresh the page.&lt;br&gt;You should see green, red and grey boxes. Each box corresponds to a test; a red box indicates that&lt;br&gt;your program has failed the respective test, a green box indicates that your program has passed the&lt;br&gt;test, and a grey box indicates that the test is hidden (you will not see the result of the test until after&lt;br&gt;the due date).&lt;br&gt;6. If you have red boxes, you can see which tests were not passed by clicking on the task name. Correct&lt;br&gt;the errors (go to Eclipse, re-write your code and test it carefully) and then submit again in PASTA.&lt;br&gt;7.  For further help on using PASTA, check the INFO1103 User Manual, or post a question on Piazza.&lt;br&gt;Marking&lt;br&gt;Your mark is the percentage of the tests that you have passed, e.g. for Task 2: all 20 tests passed, the&lt;br&gt;mark is 100% of 5 marks = 5 marks, 10 tests passed, the mark is 50% of 5 marks = 2.5 marks.&lt;br&gt;You can submit as many times as you want. Please make sure that your program compiles and runs&lt;br&gt;before you submit it in PASTA. Your last submission will be the one that will be marked.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;检查一个二维数组是不是Latin square ，是否符合Latin square的规则，二维数组也是用户通过界面输入&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requireme
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#代写： Exemption exam for ECS 102 - Java</title>
    <link href="http://yoursite.com/2016/12/19/page68/"/>
    <id>http://yoursite.com/2016/12/19/page68/</id>
    <published>2016-12-19T03:07:34.000Z</published>
    <updated>2017-01-11T08:20:34.224Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java的基础知识考试，考察了基本的java语法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Exemption exam for ECS 102 - Java&lt;br&gt;&lt;br&gt;&lt;br&gt;   The goal of this exam is to give recognition for programming you already know, so you can fulfill a requirement and move on to learning something new.  If you already know C don’t plan on taking ECS102 to learn C.  You already know some fundamentals of programming, and you can learn the syntax of Java in a weekend if you need it.&lt;br&gt;   This is a closed book exam.  You are writing code without running it.  Please answer the questions in this Word document, immediately below the question.  Use as much space as you need. If you do not remember the exact syntax of a statement, make your best guess and continue.  If you don’t know how to do a part of a problem, do as much of it as you can, writing a note about what you don’t know how to do.  Send solutions to mjbaruch@syr.edu.  Use “ecs102 exemption exam” as the Subject to make sure I see it and process it promptly.&lt;br&gt;&lt;br&gt;Your name:&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;  Your SU ID#:&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;Campus email: &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;___&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;Major:&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;ECS102 section&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;How did you learn programming? &lt;strong&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;Have you taken the Computer Science AP exam?  If so, what did you get? &lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1.  Write a method, convert, that converts a length from metric to British measure or from British to metric measure.  You may not assume any global variables.  There should be a parameter conv_type where the user can tell the method which kind of conversion to do (British to metric or metric to British).  There should be a parameter orig_length, the length in the original unit.  The return value should be the length in the new units.&lt;br&gt;&lt;br&gt;British lengths are in inches.&lt;br&gt;Metric lengths are in centimeters.&lt;br&gt;You may use the values of 2.54 cm is 1 inch and&lt;br&gt; 0.39 inches is 1 cm.&lt;br&gt;If conv_type is ‘B’ or ‘b’ then the conversion is from British to metric.&lt;br&gt;If conv_type is ‘M’ or ‘m’ then the conversion is from metric to British.&lt;br&gt;If conv_type is any other character, then Invalid Conversion is printed and -1 should be the returned function(method) value.&lt;br&gt;&lt;br&gt;For example, if we have&lt;br&gt;    bl = 10.0;&lt;br&gt;    ml = 0.0;&lt;br&gt;Then after the call ml=convert(‘B’, bl);&lt;br&gt;we should have&lt;br&gt;    ml is 25.4&lt;br&gt;    bl is 10.0&lt;br&gt;because 10 inches is equal to 25.4 cm.&lt;br&gt;2. a) I have an array with ten thousand numbers, in ascending order.  I want to find the index (subscript) of a particular number, if it is in the array.  Is it better for me to use a binary search or a linear search?  Why?&lt;br&gt;&lt;br&gt;&lt;br&gt;b) I have an array with ten thousand numbers that is unordered.  I want to find the index (subscript) of a particular number if it is in the array.  Is it better for me to use a binary search or a linear search?  Why?&lt;br&gt;&lt;br&gt;&lt;br&gt;3.  Consider the following code:&lt;br&gt;&lt;br&gt;public static int mystery( int n )&lt;br&gt;{&lt;br&gt;    if ( n = = 1)&lt;br&gt;        return 1;&lt;br&gt;    else&lt;br&gt;        return (2 * mystery(n-1) + n);&lt;br&gt;}&lt;br&gt;&lt;br&gt;Fill in values in the table below:&lt;br&gt;&lt;br&gt;n    mystery(n)&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;4.  Assume you have access to the method&lt;br&gt;public static int myrand( );&lt;br&gt;that returns a random integer in the range 0 to 100,000 with uniform probability.  (That is, every whole number is equally likely to come up.)  You do not have to write this method, and you should not use a built in random method.  Use myrand for this problem.&lt;br&gt;&lt;br&gt;You are given the code segment:&lt;br&gt;&lt;br&gt;char[] cards=new char[15];&lt;br&gt;int i;&lt;br&gt;for (i=0; i&lt;15; 18=&quot;&quot; i++)=&quot;&quot; cards[i]=&quot;Z&quot; ;=&quot;&quot; write=&quot;&quot; a=&quot;&quot; code=&quot;&quot; segment=&quot;&quot; (several=&quot;&quot; lines=&quot;&quot; of=&quot;&quot; code)=&quot;&quot; to=&quot;&quot; follow=&quot;&quot; this=&quot;&quot; that=&quot;&quot; will=&quot;&quot; change=&quot;&quot; the=&quot;&quot; values=&quot;&quot; two=&quot;&quot; distinct,=&quot;&quot; randomly=&quot;&quot; chosen=&quot;&quot; cards=&quot;&quot; &#39;a&#39;.=&quot;&quot; make=&quot;&quot; sure=&quot;&quot; are=&quot;&quot; not=&quot;&quot; same=&quot;&quot; card!=&quot;&quot; declare=&quot;&quot; any=&quot;&quot; variables=&quot;&quot; you=&quot;&quot; use.=&quot;&quot; 5.=&quot;&quot; reads=&quot;&quot; an=&quot;&quot; integer=&quot;&quot; and=&quot;&quot; prints=&quot;&quot; “odd”=&quot;&quot; or=&quot;&quot; “even”=&quot;&quot; show=&quot;&quot; number=&quot;&quot; is=&quot;&quot; odd=&quot;&quot; even.=&quot;&quot; 6.=&quot;&quot; read=&quot;&quot; string=&quot;&quot; from=&quot;&quot; keyboard=&quot;&quot; print=&quot;&quot; occurrences=&quot;&quot; letter=&quot;&quot; e=&quot;&quot; (upper=&quot;&quot; case=&quot;&quot; lower=&quot;&quot; case.)=&quot;&quot; 7.=&quot;&quot; class=&quot;&quot; shirt=&quot;&quot; has=&quot;&quot; following=&quot;&quot; fields:=&quot;&quot; int=&quot;&quot; size;=&quot;&quot; color;=&quot;&quot; if=&quot;&quot; sh=&quot;&quot; i=&quot;&quot; want=&quot;&quot; system.out.print(sh)=&quot;&quot; size:=&quot;&quot; color:=&quot;&quot; blue=&quot;&quot; (if=&quot;&quot; size=&quot;&quot; shirt)=&quot;&quot; method=&quot;&quot; tostring.=&quot;&quot; 8.=&quot;&quot; given=&quot;&quot; class:=&quot;&quot; public=&quot;&quot; station=&quot;&quot; {=&quot;&quot; private=&quot;&quot; double=&quot;&quot; onthedial;=&quot;&quot; callletters;=&quot;&quot; station(double=&quot;&quot; otd,=&quot;&quot; cl)=&quot;&quot; onthedial=&quot;otd;&quot; callletters=&quot;cl;&quot; }=&quot;&quot; for=&quot;&quot; main=&quot;&quot; creates=&quot;&quot; array=&quot;&quot; stations=&quot;&quot; with=&quot;&quot; values:=&quot;&quot; call=&quot;&quot; letters=&quot;&quot; on=&quot;&quot; dial=&quot;&quot; wrvo=&quot;&quot; 89.9=&quot;&quot; wcny=&quot;&quot; 91.3=&quot;&quot; waer=&quot;&quot; 88.3=&quot;&quot; 9.=&quot;&quot; static=&quot;&quot; findlargest(double[]=&quot;&quot; d)=&quot;&quot; return=&quot;&quot; index=&quot;&quot; largest=&quot;&quot; in=&quot;&quot; d.=&quot;&quot; &lt;=&quot;&quot; font=&quot;&quot;&gt;&lt;/15;&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java的基础知识考试，考察了基本的java语法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Exemption exam f
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#代写： Assignment 1 – Calculator</title>
    <link href="http://yoursite.com/2016/12/18/page67/"/>
    <id>http://yoursite.com/2016/12/18/page67/</id>
    <published>2016-12-18T01:04:51.000Z</published>
    <updated>2017-01-11T08:14:16.591Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用c# Web Form完成一个简单的计算器功能，要求有几个按钮和窗口，任务1是能实现简单的加减乘除计算，任务2是&lt;br&gt;二进制和十进制之间的转化，任务3是计算二进制位数&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;INFS3204/7204 Assignment 1 – Calculator&lt;br&gt;The goal of this assignment is to explore the basics of ASP.NET Web&lt;br&gt;Applications and C# programming language. All assignments will have to&lt;br&gt;be developed with Microsoft Visual Studio 2015 using C# as the&lt;br&gt;programming language. No other languages will be accepted. This&lt;br&gt;assignment contributes to 10% of your overall grade. You must&lt;br&gt;demonstrate this assignment to your lab tutors during your scheduled lab&lt;br&gt;session in week 5. Note that you also need to submit your code on&lt;br&gt;BlackBoard before 11:59pm Sunday 28/08/2016.&lt;br&gt;This assignment is divided into 3 tasks:&lt;br&gt;• Creating an ASP.Net Web Application using Web Form (2 Marks)&lt;br&gt;• Performing basic calculator operations and converting the result from base-10&lt;br&gt;to base-2 (5 Marks)&lt;br&gt;• Counting the number of digits in base-2 number (3 Marks)&lt;br&gt;Please Note INFS7204 students will have to complete all three tasks,&lt;br&gt;while INFS3204 students only need to complete the first two with 3&lt;br&gt;Marks for Task 1 and 7 Marks for Task 2.&lt;br&gt;• Preparation&lt;br&gt;• Before attempting to do this assignment, you should have a basic&lt;br&gt;knowledge of how to use Microsoft Visual Studio 2015 to create&lt;br&gt;ASP.NET Web Forms, as well as a basic knowledge of&lt;br&gt;programming with C#. Please note that you need to choose .NET&lt;br&gt;Framework 4.6 for your assignments. You also need to have&lt;br&gt;Windows 7 (or later versions) installed on your computer.&lt;br&gt;• Hints: Please be advised that the design and implementation of this&lt;br&gt;assignment is totally up to you. However, you may need to ensure&lt;br&gt;that you are familiar with the concept of ‘Recursive Functions’ and&lt;br&gt;defining ‘Global Variables’ to implement some parts of this&lt;br&gt;assignment.&lt;br&gt;• Microsoft Visual Studio 2015 Free Download: If you would like&lt;br&gt;to install the Microsoft Visual Studio 2015 on your own computer,&lt;br&gt;as a student, you can download it for free from the following links:&lt;br&gt;&lt;a href=&quot;https://www.dreamspark.com/Student/Default.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.dreamspark.com/Student/Default.aspx&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://beta.visualstudio.com/download-visual-studio-vs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://beta.visualstudio.com/download-visual-studio-vs/&lt;/a&gt;&lt;br&gt;Task 1: Creating an ASP.NET Web Application (2 Marks)&lt;br&gt;Create a Calculator Web Application with Web Form, which consists of&lt;br&gt;the following elements:&lt;br&gt;• Two TextBoxes for the user’s inputs&lt;br&gt;• A DropDownList for the user’s choice of operation&lt;br&gt;• Two Labels that indicate the result’s base system (i.e. base-10 or&lt;br&gt;base-2)&lt;br&gt;• Four TextBoxes for displaying the calculating results and counting&lt;br&gt;results.&lt;br&gt;• Two Buttons to submit the form and get the result&lt;br&gt;Your final application should look like the example below. However, you&lt;br&gt;may decide to design and implement this application more interestingly.&lt;br&gt;Please note that you are not required to validate the user’s input for this&lt;br&gt;assignment.&lt;br&gt;Task 2: Performing basic calculator operations and&lt;br&gt;converting the result from base-10 to base-2 (5 Marks)&lt;br&gt;In order to complete this task, you need to implement the basic calculator&lt;br&gt;operations (i.e. +, -, *, /). When user enters two numbers and clicks on the&lt;br&gt;Calculate button, the result of the operation should be displayed in the&lt;br&gt;base-10 output TextBox. Additionally, the result needs to be converted&lt;br&gt;from base-10 to base-2 system and be displayed in the base-2 output&lt;br&gt;TextBox.&lt;br&gt;For example, if user inputs 34+56, it calculates 34+56=90, the base-2&lt;br&gt;conversion number of 90 is 1011010. Please see the following picture:&lt;br&gt;Task 3: Counting the number of digits in base-2 number (3&lt;br&gt;Marks)&lt;br&gt;In this task, you need to count the number of “0”s and “1”s in the base-2&lt;br&gt;calculation result. When the calculation of Task 2 is done and user clicks&lt;br&gt;on the Count button, the number of “0”s and “1”s need to be displayed in&lt;br&gt;two output TextBoxs.&lt;br&gt;For example, as you can see in the following picture, the number of “0”s&lt;br&gt;in 1011010 is 3, and the number of “1”s in 1011010 is 4.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用c# Web Form完成一个简单的计算器功能，要求有几个按钮和窗口，任务1是能实现简单的加减乘除计算，任务2是&lt;br&gt;二进制和十进制之间的转化，任务3是计算二进制位
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： AP Assignment 1 s2 2016</title>
    <link href="http://yoursite.com/2016/12/16/page66/"/>
    <id>http://yoursite.com/2016/12/16/page66/</id>
    <published>2016-12-15T23:06:55.000Z</published>
    <updated>2017-01-11T07:55:16.124Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java实现一个旅行售票管理系统，这个题主要考察学生的java基础知识，编程逻辑能力，类的设计和OOP知识，&lt;br&gt;功能点比较多，细节点也比较多。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;COSC1290/1295 Advanced Programming / Java for C Programmers&lt;br&gt;School of CS and IT, RMIT University&lt;br&gt;Assignment 1 – Semester 2 2016 – UPDATED&lt;br&gt;Due date: 5.00pm, September 12, 2016&lt;br&gt;Introduction&lt;br&gt;You are required to implement a basic Java program using Java SE 7.0 or above.&lt;br&gt;This assignment is designed to help you:&lt;br&gt;1. Test your knowledge of basic Java concepts;&lt;br&gt;2.  Evaluate your ability to design programming logic;&lt;br&gt;3. Practise your knowledge of class design and OO constructs in Java;&lt;br&gt;4. Practise error handling in Java;&lt;br&gt;5. Develop a reasonable sized application in Java.&lt;br&gt;This is an individual assignment and worth 15% towards your final grade..&lt;br&gt;Academic Integrity (more)&lt;br&gt;The submitted assignment must be your own work. No marks will be awarded for any parts&lt;br&gt;which are not created by you.&lt;br&gt;Plagiarism is treated very seriously at RMIT. Plagiarism includes copying code directly from&lt;br&gt;other students, internet or other resources without proper reference. Sometimes, students&lt;br&gt;study and work on assignments together and submit similar files: this may be regarded as&lt;br&gt;plagiarism.&lt;br&gt;Please note that you should always create your own assignment even if you have very similar&lt;br&gt;ideas. Plagiarism-detection tools will be used for all submissions. Severe penalties may be&lt;br&gt;applied in cases of plagiarism, including loss of all marks or, in repeat cases, expulsion from&lt;br&gt;the course.&lt;br&gt;At any point, but especially during the scheduled lab-demonstrations, you may be required to&lt;br&gt;show and explain your design and code to any of the teaching staff.&lt;br&gt;General Implementation Details&lt;br&gt; All input data should be read from the standard input and all output data should be&lt;br&gt;printed to the standard output. There is no need to use files all.&lt;br&gt; If the input is formatted incorrectly the execution should stop immediately and an&lt;br&gt;appropriate error message should be displayed.&lt;br&gt; Marks will be allocated to your class design. You are required to modularise classes&lt;br&gt;properly—i.e., to use multiple methods as appropriate. No method should be longer&lt;br&gt;than 50 lines.&lt;br&gt; Marks will be allocated to proper documentation and coding layout and style. Your&lt;br&gt;coding style should be consistent with standard Java coding conventions&lt;br&gt;(&lt;a href=&quot;https://google.github.io/styleguide/javaguide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://google.github.io/styleguide/javaguide.html&lt;/a&gt;)&lt;br&gt; Your programs will be marked on RMIT UNIX machines using Java SE 7.0. Make&lt;br&gt;sure you test your program on these machines before you submit.&lt;br&gt; Further hints, tips and details, including submission instructions, will be made via&lt;br&gt;Blackboard and in lectures.&lt;br&gt;Overall Specification&lt;br&gt;You will implement an electronic ticket for public transport, called MyTi (My Ticket).&lt;br&gt; A MyTi can be “charged” by adding credit to it: initially, a MyTi has zero credit; a MyTi&lt;br&gt;can hold up to $100 of credit.&lt;br&gt; Any attempt to add credit that goes above the limit causes an error message and for the&lt;br&gt;charge to fail.&lt;br&gt; Amounts to be credited to a MyTi must be integer dollar amounts in precise multiples of&lt;br&gt;$5.00.&lt;br&gt; Travel Passes can be bought using a MyTi ticket: a pass can be for either “2 Hours” or&lt;br&gt;“All Day”, and can be for either “Zone 1” or “Zone 1 and 2”.&lt;br&gt; Prices are as follows:&lt;br&gt;o 2 Hour Zone 1 pass: $3.50&lt;br&gt;o 2 Hour Zone 1+2 pass: $5.00&lt;br&gt;o All Day Zone 1 pass: $6.90&lt;br&gt;o All Day Zone 1+2 pass: $9.80&lt;br&gt; If you attempt to purchase a travel pass without sufficient credit on your MyTi ticket then&lt;br&gt;the attempt fails: no ticket is issued and there is no charge to your ticket.&lt;br&gt;Your system must handle multiple MyTi tickets, each with its own unique id—the id will be&lt;br&gt;used to identify which MyTi ticket is being used / charged / etc.&lt;br&gt;Journeys and Travel Passes&lt;br&gt;The MyTi system is designed to automatically combine multiple Journeys in a day by one&lt;br&gt;User into the cheapest Travel Pass that covers those Journeys. For example, if a User travels&lt;br&gt;twice inside 2 hours, then a 2 Hour pass is purchased. However, if the user travels again later&lt;br&gt;in the day, the 2 Hour pass may be turned into an All Day pass if that is cheaper than 2 2-&lt;br&gt;Hour passes.&lt;br&gt;Each time the user asks for a new Journey, the previously purchased Travel Pass should be&lt;br&gt;checked:&lt;br&gt;1. If the current Travel Pass is an All Day and we are in the day and the pass covers the&lt;br&gt;journey zones, then a new Travel Pass does not need to be purchased;&lt;br&gt;2. If the new Journey fits inside the 2 Hours of the current Travel Pass, then a new&lt;br&gt;Travel Pass does not need to be purchased;&lt;br&gt;3. If the current Travel Pass is a 2 Hour and the new Journey is outside that time, then a&lt;br&gt;new 2 Hour Pass needs to be purchased.&lt;br&gt;TravelPass objects should store the information needed for all decisions described above&lt;br&gt;(e.g. whether to add a new Journey into an existing TravelPass).&lt;br&gt;To purchase a Travel Pass take a Journey, the system user must be prompted for:&lt;br&gt;-  The id of the MyTi card is to be charged to be used;&lt;br&gt;-  the day of travel, the start time and the end time;&lt;br&gt;-  the starting Station and end Station of the journey.&lt;br&gt;BONUS: The above means that users may spend more on Travel Passes than they needed to:&lt;br&gt;e.g., they may end up buying multiple 2-hour travel passes instead of one All Day pass. A&lt;br&gt;bonus task is implement logic that always results in the cheapest Travel Pass options:&lt;br&gt;1. IF the new Travel Pass means that all that day’s Passes would add up to cost more&lt;br&gt;than a All Day Pass—then all the Passes for that day are replaced by a single All Day&lt;br&gt;Pass; in this case the MyTi card is charged the difference between what has already&lt;br&gt;been paid that day, and what an All Day Pass would cost.&lt;br&gt;2. You have to do similar thinking about when different Journeys are in different Zones!&lt;br&gt;I’ll leave that to you to think about &lt;br&gt;If you try to purchase a Journey that requires a new Travel Pass, or an upgrade from 2 Hour&lt;br&gt;to All Day, and there is not enough credit left on their MyTi card, then the purchase of that&lt;br&gt;Journey must fail (with an Exception), and the user told they need to recharge their card.&lt;br&gt;Users&lt;br&gt;A MyTi ticket can be associated with one unique User. The MyTi ticket needs to store details&lt;br&gt;of its user, such as name and email address. A User needs to have access to their MyTi card.&lt;br&gt;Day and Times&lt;br&gt;To make things easier (and to run demos in less than real time!) you will type in the day and&lt;br&gt;times of Journeys (rather than using a System call to get them automatically). Using a “24&lt;br&gt;hour” time representation should make it easy to determine the length of Journeys. Note that&lt;br&gt;a Journey fits inside a 2 Hour pass if it ends before the end of the 2 Hour period. An All Day&lt;br&gt;pass covers all journeys that start inside that day and runs from midnight to 23:59pm.&lt;br&gt;Stations&lt;br&gt;Stations have a unique name and each Station can tell which Zone it is in.&lt;br&gt;Admin Functions&lt;br&gt;You also need to implement the following system administration functions:&lt;br&gt;-  On request, print all TravelPasses purchased on all MyTi cards. This list should&lt;br&gt;ordered by card id. For each TravelPass, list the Journeys that were in it;&lt;br&gt;-  Print usage statistics for all Stations: i.e., how many journeys started at each Station,&lt;br&gt;how many finished at each Station;&lt;br&gt;-  Create a new User: this requires input of a new id (the operation fails if it is already in&lt;br&gt;use), name, type (Adult, Junior, Senior), and email address.&lt;br&gt;Program Development&lt;br&gt;When implementing large programs, especially using object-oriented style, it is highly&lt;br&gt;recommended that you build your program incrementally.&lt;br&gt;This assignment proposes a specific incremental implementation process: this is designed to&lt;br&gt;both help you think about building large programs, and to help ensure good progress! You are&lt;br&gt;not strictly required to follow the structure below, but it will help you manage complexity.&lt;br&gt;Part A (1 mark): Extend existing code&lt;br&gt;Sample code implementing the outline of menu-based main program will be made available.&lt;br&gt;1. Design the TravelPass class to contain all data and operations it needs (e.g. the Zone&lt;br&gt;and Duration; Day and Start/End times);&lt;br&gt;2. Define Exceptions to handle problems/errors. These may include: trying to&lt;br&gt;purchase a pass without having enough funds; recharging by an invalid amount;&lt;br&gt;invalid menu options or inputs, etc.&lt;br&gt;Part B (1 mark): Class Design&lt;br&gt;Define all the classes and interfaces needed for the described system. In particular, you&lt;br&gt;should try to encapsulate all the appropriate data and operations that a class needs. This may&lt;br&gt;mean some classes refer to each other (e.g., the way Account refers to Customer).&lt;br&gt;At this point, you may just want to think about the data and operations and just write the&lt;br&gt;definitions, not all the code.&lt;br&gt;You will be submitting or demonstrating your class design in tutes or labs before the&lt;br&gt;due date. Details will be announced in lectures and on Blackboard.&lt;br&gt;Part C (3 marks): Main Program&lt;br&gt;Your main program should be in a class called MyTiSystem. (Of course, any class can&lt;br&gt;contain a main(); this is useful for testing that class.) The main program contains a menu that&lt;br&gt;offers the following options in a loop:&lt;br&gt;1. Buy a Travel Pass using a MyTi card&lt;br&gt;2. Recharge a MyTi card&lt;br&gt;3. Show remaining credit for a MyTi card&lt;br&gt;4. Purchase a Journey using a MyTi card&lt;br&gt;5. Print all Journeys made using all MyTi cards&lt;br&gt;6. Show Station statistics&lt;br&gt;7. Add a new User&lt;br&gt;8. Quit&lt;br&gt;Since we managing multiple MyTi cards, we have to enter a card’s id to know which MyTi&lt;br&gt;ticket to charge for a travel pass.&lt;br&gt;Part D (4 marks): Implement Core Functionality&lt;br&gt;Implement the core functionality of the MyTi system described above, except for the&lt;br&gt;complex decision-making around deciding whether a journey fits inside an existing&lt;br&gt;Travel Pass—i.e. in this version, just have the system buy a 2 Hour Travel Pass for each&lt;br&gt;Journey. You should be able to implement the rest of the MyTi functionality described above,&lt;br&gt;and run and test your system&lt;br&gt;Part E (1 marks): Include Multiple Journeys in Travel Passes&lt;br&gt;Implement the logic that decides whether a new Journey fits inside an existing Travel Pass or&lt;br&gt;whether the user needs to buy a new Travel Pass for that Journey.&lt;br&gt;Demos (1 mark each – 2 marks total)&lt;br&gt;You are required to demonstrate your progress and final solution to the teaching staff twice.&lt;br&gt;Details will be made available during lectures and on Blackboard.&lt;br&gt;Other (3 marks)&lt;br&gt;Marks will be awarded for coding style, documentation/comments, code layout and clarity,&lt;br&gt;meaningful error and other messages, proper error handling, choice of data structures and&lt;br&gt;other design decisions. You are encouraged to discuss such issues with your tutors and lab&lt;br&gt;assistants, or with the coding mentors.&lt;br&gt;Bonus (1.5 marks each)&lt;br&gt; Implement logic, or “business rules”, for combining Travel Passes so that the user is&lt;br&gt;charged the cheapest Travel Pass that fits their day of travel. You are welcome to discuss&lt;br&gt;the logic and different conditions via Blackboard Discussion boards; however, every&lt;br&gt;student must implement the final Java solution by themselves.&lt;br&gt; There will be another bonus task announced later on for students that would like to&lt;br&gt;challenge themselves further.&lt;br&gt;Test Data&lt;br&gt;Your program MUST include the following test items: just create them in your main program&lt;br&gt;and use them to populate your data structures that keep track of all such items. These will be&lt;br&gt;used to test/mark your program so it’s crucial that you enter them. You may add further Users&lt;br&gt;and Stations if you wish, but you must add at least the ones below.&lt;br&gt; Users (id, type, name, email)&lt;br&gt;o lc, Lawrence Cavedon, lawrence.cavedon@rmit.edu.au&lt;br&gt; Stations (name, zone)&lt;br&gt;o Central, 1&lt;br&gt;o Flagstaff, 1&lt;br&gt;o Richmond, 1&lt;br&gt;o Lilydale, 2&lt;br&gt;o Epping, 2&lt;br&gt;Sample Test Runs&lt;br&gt;Sample runs demonstrating behaviour of the system will be provided on Blackboard.&lt;br&gt;Submission&lt;br&gt;Assignment submission will be via Blackboard, by 5.00pm, Monday September 12 2016.&lt;br&gt;You can submit your assignment as many times as you want before the due date. Each&lt;br&gt;submission will overwrite any previous submissions.&lt;br&gt;1. You need to submit a class diagram (in pdf, gif or jpeg format).&lt;br&gt;2. You are required to submit your .java files weekly via Blackboard. Your progress will&lt;br&gt;be taken into consideration in marking. Further details will follow.&lt;br&gt;3. You must include a README file. This should describe how to run your program,&lt;br&gt;what extra functionality you implemented, any standard functionality you know does&lt;br&gt;not work, and any problems or assumptions. If the tutors have any problem running&lt;br&gt;your program and the README does not help then you will lose marks.&lt;br&gt;4. There will also be demos for this assignment. You will be asked to demonstrate your&lt;br&gt;progress and/or explain your design. Details of the demo will be announced on&lt;br&gt;Blackboard and in lectures.&lt;br&gt;5. For the code submission, you must include only the source files in your submission&lt;br&gt;(do not submit any *.class files!). Your code must on under RMIT UNIX machines.&lt;br&gt;6. Late final submissions will incur a penalty of 10% per day. Submissions made 5 days&lt;br&gt;after the due date will receive no marks.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java实现一个旅行售票管理系统，这个题主要考察学生的java基础知识，编程逻辑能力，类的设计和OOP知识，&lt;br&gt;功能点比较多，细节点也比较多。&lt;br&gt;&lt;br&gt;&lt;st
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python代写： ass4</title>
    <link href="http://yoursite.com/2016/12/15/page65/"/>
    <id>http://yoursite.com/2016/12/15/page65/</id>
    <published>2016-12-15T03:56:57.000Z</published>
    <updated>2017-01-11T07:51:13.084Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用python实现二叉搜索数的功能，在原来的模板基础上，增加题目要求写的方法，实现功能并且最后完成测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;You may begin this assignment with the sample BST code.&lt;br&gt;Add the following functionality to the code:&lt;br&gt;1.  Modify the code so that each node stores not only a number (which is used as the sort value (or “key”) of the node), but also a string containing the name of a person.  So, the root node of a BST may contain for its data:  [40, “Wendy”], the left child of the root may be [18, “Carol”].   Modify all functions that this change affects.&lt;br&gt;2.  Add a function called “changeLeaves” which changes the person’s name contained in the leaf nodes to “Leif”.    Recall that a leaf node is one that has no children.  Your function should take one parameter, the root of a BST, and it should return the root of the (changed) tree.&lt;br&gt;3. Add a function called “countNodes” that counts the number of nodes that contain names starting with “w” or “W”.  Your function should take one parameter, the head of a BST and it should return the number of nodes matching the given condition.&lt;br&gt;4. Add a function called “printReverse” that prints all the nodes in reverse order.  That is, the node with the largest numerical value is printed first and the node with the smallest numerical value is printed last.  Your function should take as a parameter the root of a BST and it should return nothing.&lt;br&gt;5. Write a function that will convince the TA that your code works.  Be sure to explain what you are showing.  You should cover special cases such as empty trees.&lt;br&gt;What to Submit&lt;br&gt;Submit a single file containing your entire program.  DO NOT ZIP THE FILE. You do not need to include the data file.  We will test your program on a different grid.&lt;br&gt;Be sure you document your program appropriately.  Each function should include a header comment explaining what the function does, what the parameters are and what it returns.&lt;br&gt;Marking&lt;br&gt;The assignment will be marked using a rubric.  Rubrics provide a guide to the TAs however they are not all inclusive.  We may deduct marks for unanticipated errors.&lt;br&gt;I do not give extensions on assignments.   A 24 hour extension is available to everyone but comes with a 2 mark penalty.  Please do not ask for another extension unless you have a very, very good reason.&lt;br&gt;Academic Integrity&lt;br&gt;Please refer to the notes on Academic Integrity.  It is ok (and encouraged) to talk about solutions with your friends but please do your own work.  It is also ok to take snippits of code from the internet as long as the code does not solve the entire problem.  If you use snippits of code, please document it in your comments by adding a URL indicating where the code came from.&lt;br&gt;&lt;br&gt;“””&lt;br&gt;This module implements binary search trees.&lt;br&gt;The tree elements may be of any type.  Duplicates are not allowed.&lt;br&gt;&lt;br&gt;Example for CISC 121&lt;br&gt;&lt;br&gt;“””&lt;br&gt;&lt;br&gt;# A BST node is a dict with three elements:&lt;br&gt;# 1. data: the value in the node&lt;br&gt;# 2. left: a reference to the left subtree&lt;br&gt;# 3. right: a reference to the right subtree&lt;br&gt;&lt;br&gt;# Prints an indented display of the tree – useful for debugging.&lt;br&gt;# The output will look kind of like a sideways version of a drawing&lt;br&gt;# of the tree.&lt;br&gt;def display(tree, indent=0):&lt;br&gt;    if tree == None: # empty&lt;br&gt;        pass&lt;br&gt;    else:&lt;br&gt;        # right tree first (so it’s on the right when you tilt your&lt;br&gt;        # head to the left to look at the display)&lt;br&gt;        display(tree[‘right’],indent+1)&lt;br&gt;        print(“    “ * indent + str(tree[‘data’]))&lt;br&gt;        # now the left tree&lt;br&gt;        display(tree[‘left’],indent+1)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;# adds a value to a BST and returns a pointer to the modified BST&lt;br&gt;def add(tree, value):&lt;br&gt;    if tree == None:&lt;br&gt;        return {‘data’:value, ‘left’:None, ‘right’:None}&lt;br&gt;    elif value &amp;lt; tree[‘data’]:&lt;br&gt;        tree[‘left’] = add(tree[‘left’],value)&lt;br&gt;        return tree&lt;br&gt;    elif value &amp;gt; tree[‘data’]:&lt;br&gt;        tree[‘right’] = add(tree[‘right’],value)&lt;br&gt;        return tree&lt;br&gt;    else: # value == tree[‘data’]&lt;br&gt;        return tree # ignore duplicate&lt;br&gt;&lt;br&gt;def printValues(tree):&lt;br&gt;    if tree == None:&lt;br&gt;        return&lt;br&gt;    printValues(tree[‘left’])&lt;br&gt;    print(tree[‘data’])&lt;br&gt;    printValues(tree[‘right’])&lt;br&gt;&lt;br&gt;def main():&lt;br&gt;    myTree = None  #create an empty tree&lt;br&gt;    #Create a tree with the nodes [20, 2, 25, 14, 1, 23, 75, 93, 74]&lt;br&gt;    #Note that the add function always returns the root of the BST!&lt;br&gt;    myTree = add(myTree, 20)&lt;br&gt;    myTree = add(myTree, 2)&lt;br&gt;    myTree = add(myTree, 25)&lt;br&gt;    myTree = add(myTree, 14)&lt;br&gt;    myTree = add(myTree, 1)&lt;br&gt;    myTree = add(myTree, 23)&lt;br&gt;    myTree = add(myTree, 75)&lt;br&gt;    myTree = add(myTree, 93)&lt;br&gt;    myTree = add(myTree, 74)&lt;br&gt;&lt;br&gt;    display(myTree, 0)&lt;br&gt;    printValues(myTree)&lt;br&gt;&lt;br&gt;&lt;br&gt;main()&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用python实现二叉搜索数的功能，在原来的模板基础上，增加题目要求写的方法，实现功能并且最后完成测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/stro
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： CS  162 Intro  to  Programming  III</title>
    <link href="http://yoursite.com/2016/12/14/page64/"/>
    <id>http://yoursite.com/2016/12/14/page64/</id>
    <published>2016-12-14T03:26:52.000Z</published>
    <updated>2017-01-11T07:48:03.917Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;根据给的类图，实现一个优先级队列，完成类接口和重写hashCode函数，实现displayTodoList ，displayOrdered ，addTask ，removeTask ，&lt;br&gt;alterTaskPriority 等等方法的实现&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;1.0 System Analysis&lt;br&gt;The class diagrams for this project is as following:&lt;br&gt;&lt;br&gt;&lt;br&gt;2.0 System Design&lt;br&gt;Task class used to store a task information. It’s implements the Comparable Interface and rewrite the equals and hashCode function.&lt;br&gt;&lt;br&gt;This program give each task an id. We access the task by id and do the operation.&lt;br&gt;&lt;br&gt;Todo class provide the following operations:&lt;br&gt;Function displayTodoList display a list of all tasks on screen.&lt;br&gt;Function displayOrdered display a list of all tasks orderd by priority and due today on screen.&lt;br&gt;Function addTask add a task to the list.&lt;br&gt;Function removeTask remove an item from the list.&lt;br&gt;Function alterTaskPriority alter the priority of a task.&lt;br&gt;Function alterTaskDue alter the due of a task.&lt;br&gt;Function readFromFile read a list of tasks from a text file and load the data into field taskList.&lt;br&gt;Function writeIntoFile storage all the tasks into a file.&lt;br&gt;3.0 Test Plan&lt;br&gt;Case1: display all the tasks&lt;br&gt;    1| read the chapter1 of algorithm| 0| todo&lt;br&gt;    2| clean the table| 2| done&lt;br&gt;    3| make lunch| 1| todo&lt;br&gt;&lt;br&gt;Case2: display all the tasks ordered by priority&lt;br&gt;    2| clean the table| 2| done&lt;br&gt;    3| make lunch| 1| todo&lt;br&gt;    1| read the chapter1 of algorithm| 0| todo&lt;br&gt;&lt;br&gt;Case3: add a task : clean the floor&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| make lunch| 1| todo&lt;br&gt;    3| read the chapter1 of algorithm| 0| todo&lt;br&gt;    4| clean the floor| 0| todo&lt;br&gt;&lt;br&gt;Case4: remove a task, id: 2&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| read the chapter1 of algorithm| 0| todo&lt;br&gt;    3| clean the floor| 0| todo&lt;br&gt;&lt;br&gt;Case5: alter a task’s priority, id: 3 priority: 4&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| read the chapter1 of algorithm| 0| todo&lt;br&gt;    3| clean the floor| 4| todo&lt;br&gt;&lt;br&gt;Case6: alter a task’s due, id: 3 due done&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| read the chapter1 of algorithm| 0| todo&lt;br&gt;    3| clean the floor| 4| done&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;根据给的类图，实现一个优先级队列，完成类接口和重写hashCode函数，实现displayTodoList ，displayOrdered ，addTask ，remo
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： CS  162 Intro  to  Programming  II</title>
    <link href="http://yoursite.com/2016/12/11/page63/"/>
    <id>http://yoursite.com/2016/12/11/page63/</id>
    <published>2016-12-11T13:20:53.000Z</published>
    <updated>2017-01-11T07:43:40.755Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;c++的入门题，练习vector的使用方法，push_back(),pop_back(), []. clear()等等方法的联系使用,最后在描述和vector和array的区别&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS  162&lt;br&gt;Intro  to  Programming  II&lt;br&gt;Vectors&lt;br&gt;1&lt;br&gt;Vectors&lt;br&gt;– A container from the Standard Template Library&lt;br&gt;– Holds a set of elements, like an array&lt;br&gt;– Flexible number of elements - can grow and&lt;br&gt;shrink&lt;br&gt;•  Similar  to  a  dynamic  array&lt;br&gt;• Must include vector header file to use vectors&lt;br&gt;#include &lt;vector&gt;&lt;br&gt;Vectors&lt;br&gt;• Can hold values of any type&lt;br&gt;– Type is specified when a vector is defined&lt;br&gt;vector&lt;int&gt; scores;&lt;br&gt;vector&lt;double&gt; volumes;&lt;br&gt;• Can use [] to access elements&lt;br&gt;• scores[3]&lt;br&gt;• volumes[0]&lt;br&gt;Defining  Vectors&lt;br&gt;• Define a vector of integers (starts with 0&lt;br&gt;elements)&lt;br&gt;vector&lt;int&gt; scores;&lt;br&gt;• Define int vector with initial size 30 elements&lt;br&gt;vector&lt;int&gt; scores(30);&lt;br&gt;• Define 20-element int vector and initialize all&lt;br&gt;elements to 0&lt;br&gt;vector&lt;int&gt; scores(20, 0);&lt;br&gt;• Define int vector initialized to size and contents&lt;br&gt;of vector finals&lt;br&gt;vector&lt;int&gt; scores(finals);&lt;br&gt;Growing a Vector’s Size&lt;br&gt;• Use push_back member function to add&lt;br&gt;an element to a full array or to an array&lt;br&gt;that had no defined size&lt;br&gt;// Add a new element holding a 75&lt;br&gt;scores.push_back(75);&lt;br&gt;• Use size member function to determine&lt;br&gt;number of elements currently in a vector&lt;br&gt;howbig = scores.size();&lt;br&gt;Removing Vector Elements&lt;br&gt;• Use pop_back member function to&lt;br&gt;remove last element from vector&lt;br&gt;scores.pop_back();&lt;br&gt;• To remove all contents of vector, use&lt;br&gt;clear member function&lt;br&gt;scores.clear();&lt;br&gt;• To determine if vector is empty, use empty&lt;br&gt;member function&lt;br&gt;while (!scores.empty()) …&lt;br&gt;Vector  Func&lt;ons 1=&quot;&quot; 2=&quot;&quot; 5=&quot;&quot; 7=&quot;&quot; 8=&quot;&quot; 9=&quot;&quot; 567=&quot;&quot; • useful=&quot;&quot; vector=&quot;&quot; func&lt;ons:=&quot;&quot; • capacity()=&quot;&quot; :=&quot;&quot; returns=&quot;&quot; the=&quot;&quot; capacity=&quot;&quot; of=&quot;&quot; • reserve=&quot;&quot; (n)=&quot;&quot; reallocates=&quot;&quot; storage=&quot;&quot; to=&quot;&quot; increase=&quot;&quot; be=&quot;&quot; n.=&quot;&quot; if=&quot;&quot; n=&quot;&quot; is=&quot;&quot; &lt;=&quot;&quot; than=&quot;&quot; current=&quot;&quot; capacity,=&quot;&quot; it=&quot;&quot; does=&quot;&quot; nothing.=&quot;&quot; • push_back(val)=&quot;&quot; adds=&quot;&quot; val=&quot;&quot; end=&quot;&quot; • pop_back()=&quot;&quot; last=&quot;&quot; element=&quot;&quot; more=&quot;&quot; on=&quot;&quot; page=&quot;&quot; expensive=&quot;&quot; opera&lt;ons=&quot;&quot; • add=&quot;&quot; an=&quot;&quot; into=&quot;&quot; middle=&quot;&quot; a=&quot;&quot; (not=&quot;&quot; at=&quot;&quot; end)=&quot;&quot; • eg.=&quot;&quot; add=&quot;&quot; posi&lt;on=&quot;&quot; i=&quot;&quot; • all=&quot;&quot; elements=&quot;&quot; index=&quot;&quot; and=&quot;&quot; higher=&quot;&quot; are=&quot;&quot; moved=&quot;&quot; down=&quot;&quot; by=&quot;&quot; one=&quot;&quot; insert=&quot;&quot; • remove=&quot;&quot; from=&quot;&quot; ater=&quot;&quot; removed=&quot;&quot; up=&quot;&quot; remove=&quot;&quot; arrays=&quot;&quot; or=&quot;&quot; vectors=&quot;&quot; • vectors=&quot;&quot; great=&quot;&quot; you=&quot;&quot; need=&quot;&quot; flexibility=&quot;&quot; dynamically=&quot;&quot; resize=&quot;&quot; array=&quot;&quot; • arrays=&quot;&quot; efficient=&quot;&quot; vectors.=&quot;&quot; • use=&quot;&quot; really=&quot;&quot; care=&quot;&quot; about=&quot;&quot; speed=&quot;&quot; • do=&quot;&quot; not=&quot;&quot; use=&quot;&quot; just=&quot;&quot; because=&quot;&quot; container=&quot;&quot; with=&quot;&quot; built=&quot;&quot; in=&quot;&quot; func&lt;ons=&quot;&quot; “easier”=&quot;&quot; code.=&quot;&quot; font=&quot;&quot;&gt;&lt;/ons&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/double&gt;&lt;/int&gt;&lt;/vector&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;c++的入门题，练习vector的使用方法，push_back(),pop_back(), []. clear()等等方法的联系使用,最后在描述和vector和arra
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： Final  Project,  Part  1</title>
    <link href="http://yoursite.com/2016/12/10/page62/"/>
    <id>http://yoursite.com/2016/12/10/page62/</id>
    <published>2016-12-10T14:24:23.000Z</published>
    <updated>2017-01-11T07:41:22.324Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C++完成一个互动的小游戏，需要按要求设计抽象类Game，Actor，Swan，Player等等类。对面向对象设计思想要求比较高，&lt;br&gt;游戏规则简单介绍一下，玩家上下左右逃生到出口，然后有苹果可以吃，也会碰到魔鬼被吃掉，赢的条件是安全逃到门口&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Final  Project,  Part  1&lt;br&gt;Read the last page first!&lt;br&gt;Grading: You will NOT be demonstrating your final project! This means you must spend&lt;br&gt;more time on the reflections, design and test documents. The grader will not be able to ask&lt;br&gt;you questions. If the grader has a question that is not answered in your supplied&lt;br&gt;documentation then you will likely lose points.&lt;br&gt;You will create a program that will enable the user to move through a maze. The maze&lt;br&gt;will contain locked doors that require keys to be opened. Guarding the maze are roving&lt;br&gt;killer swans. The player isn’t completely defenseless as swans aren’t able to harm a&lt;br&gt;player who has recently consumed an apple. To escape the maze, the player must&lt;br&gt;navigate through the maze, swans, and doors until they reach a ladder. Each maze level&lt;br&gt;contains one ladder that takes the player to the next level of the maze until the final level&lt;br&gt;is reached. On the final level there is an exit instead of a ladder.&lt;br&gt;Baba Yaga is back! She has captured the player. Her soulless minion didn’t lock the&lt;br&gt;door correctly so the player can try to escape. She uses killer swans as the guards. Each&lt;br&gt;level starts with one swan. Baba Yaga knows the player has left the cell but can only&lt;br&gt;summon one new swan at a time. For every 30 steps the player takes, a new swan will&lt;br&gt;randomly appear on the current level.&lt;br&gt;The player will also encounter apples lying around the maze. The player can pick up and&lt;br&gt;carry up to two apples at a time. As long as the player has an apple in their inventory,&lt;br&gt;they may stop and eat it in order to render them invulnerable to swans for the next 15&lt;br&gt;steps.&lt;br&gt;Your code will implement this game as follows:&lt;br&gt;You will start your game with a single command line argument. This will be an integer&lt;br&gt;value that indicates the number of levels. The floor files will be named floor_# where #&lt;br&gt;indicates which floor it holds. Your program will always start reading with the first floor.&lt;br&gt;An example of running the game with a maze that has 3 floors:&lt;br&gt;./maze 3 (assumes name of first floor is: floor_1)&lt;br&gt;The maze is defined by a set of text files, each of which contains a single level.&lt;br&gt;Whenever the game starts or the player reaches a new level, that data must be read from&lt;br&gt;the appropriate text file. The first line of each file will have two integer values which&lt;br&gt;describe the number of rows and columns for that level. You must use this to create a&lt;br&gt;dynamic array of that size and then read in the data for the level. Perform input&lt;br&gt;validation on all characters in the file as you read them. Do not load the file and inform&lt;br&gt;the user there is a problem.&lt;br&gt;The following characters or symbols describe objects in the levels:&lt;br&gt;‘#’- walls&lt;br&gt;‘D’- door&lt;br&gt;‘L’- Ladder&lt;br&gt;‘P’- Player&lt;br&gt;‘S’- Swan (the starting location of the first swan)&lt;br&gt;‘K’ Key&lt;br&gt;‘A’- Apple&lt;br&gt;‘E’- Starting location for each level&lt;br&gt;‘X’- Exit(one way out)&lt;br&gt;‘ ‘- empty space (blank character)&lt;br&gt;You must concatenate the file name with the new floor number. You will not use an&lt;br&gt;array of filenames? HINT: This will require string streams.&lt;br&gt;You must display that level to the user. Then you will accept the following commands&lt;br&gt;from the user:&lt;br&gt;‘w’ move up&lt;br&gt;‘a’ move left&lt;br&gt;‘s’ move down&lt;br&gt;‘d’ move right&lt;br&gt;‘e’ eat apple&lt;br&gt;‘u’ use ladder&lt;br&gt;‘q’ quit&lt;br&gt;Each input from the user must be validated before any action takes place. After each&lt;br&gt;command, you will update the array, then print the current status of the game to the&lt;br&gt;screen. Each command is one “step” which you will use to coordinate movement and&lt;br&gt;summoning of the swans.&lt;br&gt;You will update the position of the player and all swans after every move entered by the&lt;br&gt;player. The K (key) and A (apple) symbols will be removed from the maze after the&lt;br&gt;player picks them up. The D (door) is removed once the player enters that space with a&lt;br&gt;key. To move between floors, the player must get to the space with the ladder. On the&lt;br&gt;final level the player must reach the X to exit the maze and make their escape.&lt;br&gt;The position of each Actor (Swan or Player) will not be stored in the array. It will be&lt;br&gt;stored in the Player or Swan object. When you read in the initial floor array the ‘S’&lt;br&gt;should be changed to a blank character. When you display the floor after each move you&lt;br&gt;will print the array, adding a ‘P’ or ‘S’ as appropriate for each Actor.&lt;br&gt;Movement- To move around a level the players must use the ‘W’, ‘A’. ‘S, and ‘D’ keys.&lt;br&gt;Your move function should prevent them from moving through walls, or a door if they&lt;br&gt;don’t have a key. If the player has a key then they can move through a door. Simply&lt;br&gt;remove a key from the player and convert the D space to an empty space assuming the&lt;br&gt;user has at least one.&lt;br&gt;When the player gets to a ladder space they climb it with a ‘U’ command. The E&lt;br&gt;character designates where the player starts on the new level. Time (i.e. the number of&lt;br&gt;steps) is reset on each new level. When the player moves from the starting space, the E&lt;br&gt;must remain. If a swan catches a player, their location must be changed to the E square.&lt;br&gt;After each move, the updated maze must be displayed for the user.&lt;br&gt;When the player moves into a space that contains a key (‘K’) they pick up the key to add&lt;br&gt;it to their inventory. When a player moves into a space with an apple (‘A’) they pick it&lt;br&gt;up. A player can hold no more than 3 keys and they can carry only 2 apples. If they enter&lt;br&gt;a space and cannot hold the key or apple it remains in that space. The player can use an&lt;br&gt;apple by eating it (‘E’). This makes the swans ignore the player for the next 15 turns,&lt;br&gt;decreases the apples the player has by 1, and takes an entire step/turn (i.e. they don’t&lt;br&gt;move that step).&lt;br&gt;Swans (10 points): The Swans will be similar to the Player, except they move randomly.&lt;br&gt;They cannot move through walls or doors. They will ignore apples on the ground. If a&lt;br&gt;swan is in a square adjacent to the player, the player will be moved back to the starting&lt;br&gt;space for that level. The swans cannot move between levels. For every 30 steps the player&lt;br&gt;takes, place a new swan at a random valid location in the current level.&lt;br&gt;Classes. You will need the following classes:&lt;br&gt;Game class- dynamic array for current floor, array of pointers to actors, int total#_floors,&lt;br&gt;int current_floor, function to read in floors from a file&lt;br&gt;Floor class- char [][] tiles, void print to screen, constructor&lt;br&gt;Actor class: ABSTRACT- int row, int column, char symbol, virtual move&lt;br&gt;Swan class (inherits Actor)- move (automated),&lt;br&gt;Player class (inherits Actor)- move (prompt for WASD), keys(s), hold up to 3 keys,  hold&lt;br&gt;up  to  2  apples&lt;br&gt;(You  will  need  a  function  to  send  the  player  back  to  the  start  if  a  swan  moves&lt;br&gt;adjacent  to  their  position.   Where  do  you  put  that  function?)&lt;br&gt;You must include a makefile and put all files for your assignment in a zip file. Each&lt;br&gt;class must have separate source and header files. If you do not do this assignment will&lt;br&gt;NOT be graded.&lt;br&gt;Grading:&lt;br&gt;•  programming style and documentation (10%)&lt;br&gt;•  read and create each maze level properly (5%)&lt;br&gt;•  the player and swans move through the maze correctly (10%)&lt;br&gt;o the apples are picked up and used correctly (5%)&lt;br&gt;o the keys are picked up and used correctly with the doors (5%)&lt;br&gt;o the swans send the player back correctly (5%)&lt;br&gt;•  create the Game class and object (5%)&lt;br&gt;•  create the Actor class (5%)&lt;br&gt;•  create the Swan class and object (10%)&lt;br&gt;•  create the Player class and object (5%)&lt;br&gt;•  input validation for commands and reading the files (10%)&lt;br&gt;•  reflections document to include the design description, test plan, test results, and&lt;br&gt;comments about how you resolved problems while designing and implementing your&lt;br&gt;program (20%)&lt;br&gt;You must include a makefile put all files for your assignment in a zip file. If you do not&lt;br&gt;do this assignment will NOT be graded.&lt;br&gt;Each class must have separate source and header files. If you do not do this assignment&lt;br&gt;will NOT be graded.&lt;br&gt;If your program segfaults at anytime, you will lose 20 points.&lt;br&gt;Design your Program&lt;br&gt;As always you should sit down with pencil and paper and sketch out the design. Develop&lt;br&gt;the necessary algorithms. Do a desk test, i.e. walk through your algorithms and code to&lt;br&gt;look for logic errors.&lt;br&gt;Nope! No keyboard yet! Now design your incremental development. Your program&lt;br&gt;should be decomposed into functional units. If not, go back to the previous paragraph.&lt;br&gt;Look at the pieces and decide on the order you should use to implement and test each&lt;br&gt;part. Reading the floor into your program and then moving an actor are probably good&lt;br&gt;places to start. Then add a level to test using the ladder. Once you have the development&lt;br&gt;you are ready!&lt;br&gt;Nope! No keyboard yet. ? Design and organize the directories for your project. You&lt;br&gt;should have a working directory. Maybe you need a subdirectory to hold the your floor&lt;br&gt;plans. Have you designed your floor plans? What is there to design? Maybe you can&lt;br&gt;have a floor that allows you to test only one function or command at a time? Be careful&lt;br&gt;with file names. The default first file always has the same name. If you overwrite one&lt;br&gt;then you’ll need to create it again. Always have one directory to save a copy of your&lt;br&gt;code as you get each increment to compile. If you’re paranoid (I know I am) maybe you&lt;br&gt;have more than one stash and on different devices?&lt;br&gt;Now, you’re ready to code!&lt;br&gt;The moral is: Always plan ahead and make it as complete as you can!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C++完成一个互动的小游戏，需要按要求设计抽象类Game，Actor，Swan，Player等等类。对面向对象设计思想要求比较高，&lt;br&gt;游戏规则简单介绍一下，玩家上下
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Assignment 1</title>
    <link href="http://yoursite.com/2016/12/09/page61/"/>
    <id>http://yoursite.com/2016/12/09/page61/</id>
    <published>2016-12-09T11:54:23.000Z</published>
    <updated>2017-01-11T07:37:23.378Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;完成一个java订票管理系统，包括买票，卖票，退票，学生票等等功能,内容细节比较多，需要要求的功能也比较多,&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;ITECH1000 / ITECH5000 Programming 1 1620&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 1 of 9&lt;br&gt;Assignment 1&lt;br&gt;Overview&lt;br&gt;This is an individual assignment that requires you to design, develop and test a small procedural Java&lt;br&gt;program.&lt;br&gt;Timelines and Expectations&lt;br&gt;Percentage Value of Task: 20%&lt;br&gt;Due: 16:00 Friday the 9th of September (week 7)&lt;br&gt;Minimum time expectation: 10 hours&lt;br&gt;Learning Outcomes Assessed&lt;br&gt;The following course learning outcomes are assessed by completing this assessment:&lt;br&gt;  Identify and use the correct syntax of a common programming language&lt;br&gt;  Recall and use typical programming constructs to design and implement simple software&lt;br&gt;solutions&lt;br&gt;  Reproduce and adapt commonly used basic algorithms&lt;br&gt;  Utilise pseudocode and/or algorithms as a major program design technique&lt;br&gt;  Write and implement a solution algorithm using basic programming constructs&lt;br&gt;  Demonstrate debugging and testing skills whilst writing code&lt;br&gt;  Develop self-reliance and judgement in adapting algorithms to diverse contexts&lt;br&gt;  Design and write program solutions to identified problems using accepted design constructs&lt;br&gt;ITECH1000 / ITECH5000 Programming 1 1620&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 2 of 9&lt;br&gt;Assessment Details&lt;br&gt;The Federation University Australia Olympic Games are about to commence! The games have been&lt;br&gt;scheduled to begin on Saturday 8th October 2016, competitors are busy training and now it’s time to&lt;br&gt;prepare to sell spectator tickets.&lt;br&gt;Your task is to design, develop and test a small application for recording ticket sales to this event.&lt;br&gt;Stage 1: Design&lt;br&gt;This stage requires you to prepare documentation that describes the function of the program and how&lt;br&gt;it is to be tested. There is no coding or code testing involved in this stage. A document template has&lt;br&gt;been provided for your use.&lt;br&gt;Requirements:&lt;br&gt;1) Read through Stage 2: Program Development to obtain details of the requirements of this&lt;br&gt;program.&lt;br&gt;2) Write an algorithm that describes how the program will operate.&lt;br&gt;a. All program requirements – base, standard and advanced – must be included, even if you&lt;br&gt;do not end up including all these requirements in your program code.&lt;br&gt;b. The algorithm must be structured logically so that the program would function correctly.&lt;br&gt;3) Prepare and document test cases that can be used to check that the program works correctly,&lt;br&gt;once it has been coded. You do NOT need to actually run the test cases in this stage; this will&lt;br&gt;occur in Stage 3: Testing.&lt;br&gt;a. All program requirements – base, standard and advanced, must be included, even if you&lt;br&gt;do not end up including all these requirements in your program code.&lt;br&gt;b. Make sure the test cases include checking of data entered by the user to make sure that&lt;br&gt;only valid data is accepted. If the user enters invalid data, the user should be informed of&lt;br&gt;this and given another chance to enter the data. NB: As we have not covered exception&lt;br&gt;handling, you may assume that the user will always enter an integer.&lt;br&gt;c. Test cases should be documented using a template like the one below. You may include&lt;br&gt;extra information if you wish. At this stage, the Actual Result column will be left blank.&lt;br&gt;Test Case  Expected Result  Actual Result&lt;br&gt;The user selects to purchase adult&lt;br&gt;tickets.&lt;br&gt;The user is prompted to&lt;br&gt;enter the number of&lt;br&gt;tickets to purchase.&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 3 of 9&lt;br&gt;Stage 2: Program Development&lt;br&gt;Using the Design Documentation to assist you, develop a Java program that records spectator ticket&lt;br&gt;sales at the gate for the Federation University Australia Olympic Games, implementing the&lt;br&gt;requirements outlined in this section. These requirements have been broken into three groups:&lt;br&gt;  Base Functionality includes the minimal level of requirements to achieve the essential&lt;br&gt;components of this assignment. This group of requirements focuses on getting the code to&lt;br&gt;work and on using the programming constructs we cover in class. You can expect to use&lt;br&gt;constants, variables, loops, conditional statements and arithmetic operators for these&lt;br&gt;requirements and you should look for opportunities to use these wherever you can. You will not&lt;br&gt;receive full marks for implementing a requirement, even if it works, if you have not used the&lt;br&gt;appropriate programming construct to do so.&lt;br&gt;At this level, you can decide if it is easier for you to code everything within a single method, or&lt;br&gt;to modularize it straight away.&lt;br&gt;  Standard Functionality ensures the code is modularized, and that method calls are used to&lt;br&gt;ensure the program flows correctly. It allows data to pass from one method to another as&lt;br&gt;parameters. It also includes providing a running total of tickets within an order, which is not&lt;br&gt;essential for getting the program to work, but is useful information for the user to see.&lt;br&gt;  Advanced Functionality provides a challenge task, and is best left until all the other requirements&lt;br&gt;have been addressed. It requires looking at a Java API to find out how to use a class we have&lt;br&gt;not covered in the course, and using this to provide a countdown of days remaining until the&lt;br&gt;games commence.&lt;br&gt;All three groups require that you follow coding conventions, such as proper layout of code, using&lt;br&gt;naming conventions and writing meaningful comments throughout your program.&lt;br&gt;Base Functionality:&lt;br&gt;1. Display a welcome message when the program starts&lt;br&gt;  The welcome message should have a row of asterisks at the top and the bottom, just long&lt;br&gt;enough to extend over the text. Hint: Use a For loop for this.&lt;br&gt;  The first line of the message should read “FEDERATION UNIVERSITY AUSTRALIA&lt;br&gt;OLYMPICS” and be approximately centred in the row of asterisks by printing white space&lt;br&gt;first. Hint: Can you modify the For loop from the previous step to print the white spaces?&lt;br&gt;  A second line of the message should be blank.&lt;br&gt;  The third line should read “Developed by” followed by your name and a comma, then “&lt;br&gt;student ID ”, then your student id, then finally “ for ITECH1000 Sem 2 2016”.&lt;br&gt;  The fourth line should be blank.&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 4 of 9&lt;br&gt;2. Provide a menu from which the user can select to Purchase Tickets, View Ticket Sales or Exit.&lt;br&gt;This menu should be repeated each time after the user has chosen and completed an option until&lt;br&gt;the user chooses to Exit. The user selects an option by entering the number next to it. If an&lt;br&gt;invalid number is selected, the user is advised and shown the menu again to make another&lt;br&gt;selection.&lt;br&gt;3. When the user selects the Purchase Tickets option, provide another menu from which the user&lt;br&gt;can select General Admission Tickets, Student Tickets, Finalise Order or Cancel Order. The user&lt;br&gt;selects an option by entering the number next to it. If an invalid number is selected, the user is&lt;br&gt;advised and shown the menu again to make another selection.&lt;br&gt;a. Should the user select General Admission Tickets or Student Tickets, they are prompted&lt;br&gt;to enter the Number of Tickets required. After entering the number of tickets required,&lt;br&gt;they are returned to the Ticket Purchasing Menu so that they may choose to purchase&lt;br&gt;additional tickets. The user may not choose to purchase a negative number of tickets, but&lt;br&gt;a purchase of 0 tickets is permitted.&lt;br&gt;b. Should the user select Finalise Order:&lt;br&gt;i. The sale is processed by displaying the number of each type of ticket purchased&lt;br&gt;and the total cost of the tickets in this order. A General Admission ticket costs&lt;br&gt;$13.50; a Student ticket costs $7.75.&lt;br&gt;ii. A record is kept of the total cost of tickets sold, the total number of adult tickets&lt;br&gt;sold and the total number of child tickets sold. This is a combined total from all&lt;br&gt;orders; there is no need to keep a record of the number of tickets in each&lt;br&gt;individual order.&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 5 of 9&lt;br&gt;iii. The user is returned to the menu from Step 2.&lt;br&gt;c. Should the user select Cancel Order:&lt;br&gt;i. The order is cancelled and a message displayed to confirm this to the user.&lt;br&gt;ii. The user is returned to the menu from Step 2.&lt;br&gt;4. When the user selects the View Ticket Sales option, display the total value of ticket sales and both&lt;br&gt;the total number of adult tickets and the total number of child tickets sold across ALL orders.&lt;br&gt;Highlight this message display with a row of 50 asterisks before and after the message. After the&lt;br&gt;final row of asterisks, redisplay the menu from Step 2.&lt;br&gt;5. When the user selects Exit System, quit the program with a message to the user.&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 6 of 9&lt;br&gt;Standard Functionality:&lt;br&gt;6. Update the Ticket Purchasing Menu so that a running total of tickets included in an order is&lt;br&gt;displayed until the order is finalized&lt;br&gt;7. Modularize the code, correctly using method calls and passing data between methods as&lt;br&gt;parameters.&lt;br&gt;Advanced Functionality:&lt;br&gt;8. Update the Welcome Message to include a countdown of the number of days to go until the&lt;br&gt;games begin.&lt;br&gt;a. Use the GregorianCalendar class to manage your dates. You will need to import&lt;br&gt;java.util.GregorianCalendar to use this library.&lt;br&gt;b. The countdown must be calculated based on the number of days between the time the&lt;br&gt;program runs, and Saturday 8th October 2016.&lt;br&gt;c. There is no pre-defined method for finding the difference between two dates in this library.&lt;br&gt;You will need to develop your own, using the features of the GregorianCalendar class.&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 7 of 9&lt;br&gt;Stage 3: Testing&lt;br&gt;Using a copy of the test cases developed in Stage 1: Design, test the program you have developed in&lt;br&gt;Stage 2: Program Development. Document your results, including both failed and successful tests.&lt;br&gt;Note: Please do not leave out any failed tests. If your testing highlights that your program has not&lt;br&gt;worked correctly, then the failed tests help to demonstrate that you have been testing your program&lt;br&gt;properly.&lt;br&gt;To show that you have tested your program, include small (but readable) screen captures in your&lt;br&gt;Actual Results as well as any explanatory comments. Microsoft Windows includes a Snipping Tool&lt;br&gt;that is useful for taking captures of the relevant parts of the screen.&lt;br&gt;You may test your program in phases if you wish. Stage 2: Program Development provides three&lt;br&gt;separate groups of functionality in the requirements, working from the minimal level of requirements&lt;br&gt;through to more advanced concepts. Each of these groups can be tested individually.&lt;br&gt;Base Functionality:&lt;br&gt;This phase requires you to check that the base functions (displaying welcome message when the&lt;br&gt;program starts, showing a menu of options until the user chooses to exit, purchasing tickets, viewing&lt;br&gt;ticket sales and exiting the system) have been implemented.&lt;br&gt;Standard Functionality:&lt;br&gt;In addition to the Base Functionality, this section includes displaying a running total of tickets that have&lt;br&gt;been added to an order until such time as the order has been finalized. This new functionality must&lt;br&gt;also be tested.&lt;br&gt;If you originally wrote and tested the Base Functionality by including all the code in a single method,&lt;br&gt;this phase also requires that you modularize your code, and use method calls and pass data between&lt;br&gt;methods to ensure your program still runs correctly. This means all your code will need to be re-&lt;br&gt;tested to ensure that all the previous functionality still works.&lt;br&gt;Advanced Functionality:&lt;br&gt;This phase requires testing the code that calculates and displays the number of days until the games&lt;br&gt;comments in the welcoming message shown when the program starts.&lt;br&gt;Submission&lt;br&gt;Your program code and testing documentation should be zipped into a single file and loaded into the&lt;br&gt;Assignment Box provided in Moodle by the due date and time.&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 8 of 9&lt;br&gt;Marking Criteria/Rubric&lt;br&gt;Task&lt;br&gt;Available&lt;br&gt;Marks&lt;br&gt;Student&lt;br&gt;Mark&lt;br&gt;Stage 1: Design Documentation&lt;br&gt;Development of an algorithm describing how the program should function&lt;br&gt;  All requirements from the Assessment Details section included  1&lt;br&gt;  Logical structure  1&lt;br&gt;Documented test cases to validate program&lt;br&gt;  All requirements from the Assessment Details section included  1&lt;br&gt;  Data is validated to ensure user entries are appropriate and incorrect user entries&lt;br&gt;are handled smoothly&lt;br&gt;1&lt;br&gt;Stage 2: Program Development&lt;br&gt;A Java program addressing the requirements outlined in the Assignment Details section,&lt;br&gt;including appropriate use of loops, conditional statements, constants and variables:&lt;br&gt;Use of coding conventions throughout entire program, including readable and clear layout,&lt;br&gt;following naming conventions and including meaningful and appropriate comments.&lt;br&gt;1&lt;br&gt;Base Functionality:&lt;br&gt;  Display of a welcome message when the program starts  1&lt;br&gt;  Menu displayed until user chooses to exit  1&lt;br&gt;  Purchase Tickets option to select and order a user-selected combination of general&lt;br&gt;admission and student tickets&lt;br&gt;2&lt;br&gt;  View Ticket Sales to display the total value of ticket sales and both the total number&lt;br&gt;of general admission tickets and the total number of student tickets sold&lt;br&gt;1&lt;br&gt;  Exit System to quit the program with a message to the user  1&lt;br&gt;Standard Functionality:&lt;br&gt;  Running total of tickets included in an order displayed in the Purchase Tickets menu&lt;br&gt;until the order is finalised&lt;br&gt;1&lt;br&gt;  Code modularized, correctly using method calls and passing data between methods  2&lt;br&gt;Advanced Functionality:&lt;br&gt;  Countdown of days to go until the games commence included in the welcome&lt;br&gt;message&lt;br&gt;3&lt;br&gt;Stage 3: Testing&lt;br&gt;Documented test results clearly showing all the testing that has been conducted and the&lt;br&gt;results of this testing.&lt;br&gt;  Testing of base functionality&lt;br&gt;1&lt;br&gt;  Testing of standard functionality&lt;br&gt;1&lt;br&gt;  Testing of advanced functionality&lt;br&gt;1&lt;br&gt;Total  20&lt;br&gt;CRICOS Provider No. 00103D  1620 Assignment 1 specification.docx  Page 9 of 9&lt;br&gt;Feedback&lt;br&gt;Assignments will be marked within 2 weeks of submission. Marks will be loaded in fdlGrades, and a&lt;br&gt;completed marking sheet will be available via Moodle.&lt;br&gt;Plagiarism:&lt;br&gt;Plagiarism is the presentation of the expressed thought or work of another person as though it is one’s&lt;br&gt;own without properly acknowledging that person. You must not allow other students to copy your work&lt;br&gt;and must take care to safeguard against this happening. More information about the plagiarism policy&lt;br&gt;and procedure for the university can be found at &lt;a href=&quot;http://federation.edu.au/students/learning-and-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://federation.edu.au/students/learning-and-&lt;/a&gt;&lt;br&gt;study/online-help-with/plagiarism.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;完成一个java订票管理系统，包括买票，卖票，退票，学生票等等功能,内容细节比较多，需要要求的功能也比较多,&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requiremen
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C代写： Lab  7  Command  Line  Arguments  and  Files</title>
    <link href="http://yoursite.com/2016/12/08/page60/"/>
    <id>http://yoursite.com/2016/12/08/page60/</id>
    <published>2016-12-08T11:34:12.000Z</published>
    <updated>2017-01-11T07:33:06.892Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;练习c语言的命令行参数和文件读写的使用，创建一个管理日志文件的程序，写入日志，然后创建第二个程序读取&lt;br&gt;已经写好的日志，并在界面显示出内容&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Command Line Arguments&lt;br&gt;Pass information in from the command line of your program&lt;br&gt;Passed in as a c-string&lt;br&gt;int main(int argc, char &lt;em&gt;argv[])&lt;br&gt;argc is the number if items on the command line&lt;br&gt;The program name is included so argc is always at least = 1&lt;br&gt;argv is an array of c-strings where each element is a “word” from the command line&lt;br&gt;argv[0] is always the name of the program&lt;br&gt;Inside foo.cpp when called as&lt;br&gt;foo duck drop roll&lt;br&gt;int main(int argc, char &lt;/em&gt;argv[])&lt;br&gt;Then&lt;br&gt;argc = 4&lt;br&gt;argv[0] = “foo”&lt;br&gt;argv[1] = “duck”&lt;br&gt;argv[2] = “drop”&lt;br&gt;argv[3] = “roll”&lt;br&gt;Example:&lt;br&gt;int main(int argc, char *argv[])&lt;br&gt;{&lt;br&gt;for (int i=0; i&amp;lt;argc; i++)&lt;br&gt;{&lt;br&gt;cout&amp;lt;&amp;lt; “Argument “&amp;lt;&amp;lt; i &amp;lt;&amp;lt; “ « &amp;lt;&amp;lt; argv[i]&amp;lt;&lt;endl; }=&quot;&quot; return=&quot;&quot; 0;=&quot;&quot; &lt;=&quot;&quot; font=&quot;&quot;&gt;&lt;/endl;&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;练习c语言的命令行参数和文件读写的使用，创建一个管理日志文件的程序，写入日志，然后创建第二个程序读取&lt;br&gt;已经写好的日志，并在界面显示出内容&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： CS1027 Assignment 1</title>
    <link href="http://yoursite.com/2016/12/04/page59/"/>
    <id>http://yoursite.com/2016/12/04/page59/</id>
    <published>2016-12-04T11:35:10.000Z</published>
    <updated>2017-01-11T09:11:47.535Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;完成城市管理系统，提供了java代码模板，需要自己补充模板代码，实现tore, search, sort, remove等方法的实现&lt;br&gt;按要求完成Country class和 CountryCatalogue class&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS1027: Assignment 1&lt;br&gt;Due: Tuesday, July 5 th , 11:55pm.&lt;br&gt;Weight: 10%&lt;br&gt;Purpose:&lt;br&gt;To gain experience with&lt;br&gt;•  Java&lt;br&gt;•  Fixed length arrays&lt;br&gt;Task:&lt;br&gt;You will recreate your assignment 3 from 1026 in Java.&lt;br&gt;In this assignment you will create a complete program that uses classes to store, search, sort, remove,&lt;br&gt;and filter country data. The two major tasks are outlined below.&lt;br&gt;Provided With:&lt;br&gt;You are given a file called Assignment1.java that contains a main method. Use this class to run&lt;br&gt;the code you write. Your code must work with this file; you cannot alter this file as a means of making&lt;br&gt;your code work. The marker will use a file similar to this to test the functionality of your code.&lt;br&gt;You are also provided two files called ThingToWriteFile.java and ThingToReadFile.java. These&lt;br&gt;classes are provided to make fileIO easier. Have a look at the code to understand how to use these&lt;br&gt;objects.&lt;br&gt;Two text files are included. One contains the country information (data.txt) and the other&lt;br&gt;contains the country/continent information (continent.txt). NOTE: Both of these files have a header&lt;br&gt;line!&lt;br&gt;On the last page of this assignment you are provided with an example output. Reference this for&lt;br&gt;text formatting.&lt;br&gt;You may assume all data is correct and that there are no errors in the data files (don’t worry&lt;br&gt;about exceptions, or validating inputs, etc.).&lt;br&gt;Stuff To Do:&lt;br&gt;1. Implement a Country class:&lt;br&gt;• The purpose of this object is to represent a country. This object will store some&lt;br&gt;important information about the country and will have a small number of simple&lt;br&gt;methods.&lt;br&gt;• This class will contain variables for the country name, population, area, and continent in&lt;br&gt;which it exists.&lt;br&gt;• You will need to write a constructor for the object. This constructor should take a name,&lt;br&gt;population, area, and continent as parameters.&lt;br&gt;• Write getter methods for the four instance variables (getName, etc.).&lt;br&gt;• Write a method called getPopDensity to return the country’s population density&lt;br&gt;(population/area).&lt;br&gt;• Write a single setter method for the population instance variable (setPopulation).&lt;br&gt;• Write a method called writeToFile which takes a ThingToWriteFile object as a&lt;br&gt;parameter. This method must write some country details to the provided&lt;br&gt;ThingToWriteFile object provided. Below is an example of how to print the details to&lt;br&gt;file (commas are important):&lt;br&gt;i. NAME, CONTINENT, POPULATION, POPULATION DENSITY&lt;br&gt;ii. Ex: Canada, North America, 34207000, 3.428881310807587&lt;br&gt;• Write a method printCountryDetails that prints some country details to the user:&lt;br&gt;i. NAME is located in CONTINENT has a population of POPULATION an area&lt;br&gt;of AREA and has a population density of GETPOPDENSITY&lt;br&gt;ii. Ex: Canada is located in North America has a population of 34207000, an area&lt;br&gt;of 9976140.0, and has a population density of 3.428881310807587&lt;br&gt;• Write a toString method which simply returns a string in this format (include a new line&lt;br&gt;character at the end):&lt;br&gt;i. NAME in CONTINENT&lt;br&gt;ii. Canada in North America&lt;br&gt;Test all your classes and methods before moving to the next section. Feel free to create other&lt;br&gt;helper methods if necessary.&lt;br&gt;2. Implement a CountryCatalogue class:&lt;br&gt;• The class should have a few important instance variables:&lt;br&gt;i. A final int called DEFAULT_SIZE which is equal to 5. This variable will be&lt;br&gt;used when the catalogue array is instantiated.&lt;br&gt;ii. A final int called NOT_FOUND which is equal to -1. This will be used as a flag&lt;br&gt;for some of our methods.&lt;br&gt;iii. A country array called catalogue which will store a bunch of countries.&lt;br&gt;iv. An int which stores the number of countries currently in the catalogue&lt;br&gt;v. A set of &lt;strings&gt; called continents. This set will store the continents. Don’t&lt;br&gt;know how to create a set in java? Look up the java docs, or just Google “Java&lt;br&gt;sets”. This set will make one of the below methods easier to implement.&lt;br&gt;vi. A &lt;string, string=&quot;&quot;&gt; Map (dictionary) called cDict which will map a country name&lt;br&gt;to a continent. This will be used to make some of the below methods easier to&lt;br&gt;implement.&lt;br&gt;• Write the constructor (this gets a little complex). The constructor should:&lt;br&gt;i. Take two strings as parameters. One string will be the name of the file&lt;br&gt;containing the country information, and the other will be the name of the file&lt;br&gt;containing the continent information.&lt;br&gt;ii. Instantiate the instance variables.&lt;br&gt;iii. Read the country file (with a ThingToReadFile object) one line at a time, parse&lt;br&gt;the text, create a Country object based on the text, and then add the Country to&lt;br&gt;the catalogue with a method called addCatalogue (more on this below). Be sure&lt;br&gt;to close the file when done.&lt;br&gt;iv. Read the continent file (with a ThingToReadFile object) one line at a time, parse&lt;br&gt;the text, and then add the details to cDict and continents. Be sure to close the file&lt;br&gt;when done.&lt;br&gt;• Write a private method called addCatalogue which takes a country as a parameter. This&lt;br&gt;method only adds the provided country to the catalogue. However, we may have a&lt;br&gt;problem, the catalogue may be full! For this method, don’t worry about adding&lt;br&gt;duplicate countries.&lt;br&gt;• Write a private method called expandCapacity that will double the size of the catalogue&lt;br&gt;array. This method can be called by addCatalogue if there is no more room for a new&lt;br&gt;county to be added.&lt;br&gt;• Write a method called addCountry which takes a country as a parameter. This method&lt;br&gt;should add the provided country object to the catalogue and update the continents set&lt;br&gt;and cDict map. This method can call addCatalogue. For this method, don’t worry about&lt;br&gt;adding duplicate countries.&lt;br&gt;• Write a method getCountry that takes an index as a parameter and returns a Country&lt;br&gt;object from the indexed location in the catalogue. This method should return null if the&lt;br&gt;index provided is inadmissible.&lt;br&gt;• Write a method printCountryCatalogue which simply calls the toString method for each&lt;br&gt;Country currently in the catalogue instance variable.&lt;br&gt;• Write a method filterCountriesByContinent which will print out all the countries from a&lt;br&gt;specified continent (just use the county’s toString method). This method will take a&lt;br&gt;String representing the continent we want the countries from.&lt;br&gt;• Write a method searchCatalogue which takes a String of a name of a country we want&lt;br&gt;to find. This method will return an int representing the index of the found country in&lt;br&gt;catalogue. If the item is not in the list, return NOT_FOUND. Print some sort of&lt;br&gt;notification to the user if the country was not found.&lt;br&gt;• Write a method removeCountry which takes a String of a name of a country we want to&lt;br&gt;remove from the catalogue. This method can use searchCatalogue. Print some&lt;br&gt;notification to the user whether or not the item was successfully removed or not.&lt;br&gt;• Write a method setPopulationOfACountry which takes a String representing the name of&lt;br&gt;a country we want to alter and an int representing the new population. This method can&lt;br&gt;call searchCatalogue. Print some notification to the user whether or not the item was&lt;br&gt;successfully altered or not.&lt;br&gt;• Write a method saveCountryCatalogue which will write the catalogue’s county’s to file.&lt;br&gt;This method takes a String representing the name of the file we want to save the details&lt;br&gt;to. This method can simply call the Country’s writeToFile method.&lt;br&gt;• Write a method findCountryWithLargestPop which will return the index location of the&lt;br&gt;country with the largest population currently in the catalogue.&lt;br&gt;• Write a method findCountryWithSmallestArea which will return the index location of&lt;br&gt;the country with the smallest area currently in the catalogue.&lt;br&gt;• Write a method printCountriesFilterDensity which prints out some country details if the&lt;br&gt;country lies within some specified population density range. This method takes two&lt;br&gt;integers specifying the range inclusively (low and high). This method will have some&lt;br&gt;additional bookkeeping. See the example output provided below for a demonstration of&lt;br&gt;how this output should look.&lt;br&gt;• Write a method findMostPopulousContinent which prints out the continent, and the total&lt;br&gt;population of that continent (based only on the countries in the catalogue) of the&lt;br&gt;continent with the largest population. See the example output provided below for a&lt;br&gt;demonstration of how this output should look.&lt;br&gt;Test all your classes and methods. Feel free to create other helper methods if necessary.&lt;br&gt;FAQ:&lt;br&gt;• Q: How do I compare strings? Can I just use == ?&lt;br&gt;o A: NO! DO NOT USE ==!!!!!!!!!!! Comparing Strings in Java is… very weird actually&lt;br&gt;(and actually the subject of some debate). Use a method called equals instead. For&lt;br&gt;example:&lt;br&gt;? SomeString.equals(SomeOtherString) will be true if the Strings are the same.&lt;br&gt;• Q: Why can’t I use == then?&lt;br&gt;o A: It’s complicated. I’ll go into this later in the course.&lt;br&gt;• Q: I don’t know how to do X?&lt;br&gt;o A: Try going to www.google.ca and then typing X into the big text box.&lt;br&gt;• Q: How do we use Maps (dictionaries) in Java?&lt;br&gt;o A: The idea is similar to python, but there are some Java-isms here. First, check out the&lt;br&gt;java docs for Maps (&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Map.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.oracle.com/javase/7/docs/api/java/util/Map.html&lt;/a&gt;).&lt;br&gt;You’ll need to import the library they are defined in. Also, try looking up examples of&lt;br&gt;people using them. Instantiating them is a little weird (more details on this later in the&lt;br&gt;course, for now you’ll have to just type the magic code) (HINT for instantiation:&lt;br&gt;hashmap). Iterating through them is different too; try Googling how to iterate through a&lt;br&gt;map in java.&lt;br&gt;• Q: How do we use Sets in Java?&lt;br&gt;o A: Basically exactly the same answer above, but the java docs are different&lt;br&gt;(&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/util/Set.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.oracle.com/javase/7/docs/api/java/util/Set.html&lt;/a&gt;)&lt;br&gt;• Q: How do I parse a String in Java?&lt;br&gt;o A: Try looking up “splitting a string in java” with Google.&lt;br&gt;• Q: I swear I did everything right, but for some reason my files won’t open!&lt;br&gt;o A: This isn’t uncommon.&lt;br&gt;? If you’re using eclipse, try putting the .txt files in the project directory (the same&lt;br&gt;folder containing the bin folder, src folder.&lt;br&gt;? If you’re running from command line, try putting the files in the src folder.&lt;br&gt;Non-functional Specifications:&lt;br&gt;1. Include brief comments in your code identifying yourself, describing the program, and describing key&lt;br&gt;portions of the code.&lt;br&gt;2. Assignments are to be done individually and must be your own work. Software may be used to detect&lt;br&gt;cheating.&lt;br&gt;3. Use Java coding conventions and good programming techniques, for example:&lt;br&gt;i.  Meaningful variable names&lt;br&gt;ii. Conventions for naming variables and constants&lt;br&gt;iii. Use of constants where appropriate&lt;br&gt;iv. Readability: indentation, white space, consistency&lt;br&gt;Submit Country.java and CountryCatalogue.java. to OWL. Make sure you attach your .java files to your&lt;br&gt;assignment; DO NOT put the code inline in the textbox. DO NOT SUBMIT YOUR .class FILES. IF YOU&lt;br&gt;DO THIS, AND DO NOT ATTACH YOUR .java FILES, YOU WILL RECEIVE A MARK OF ZERO!&lt;br&gt;What You Will Be Marked On:&lt;br&gt;1. Functional specifications:&lt;br&gt;•  Does the program behave according to specifications?&lt;br&gt;•  Does it run with the main program provided?&lt;br&gt;•  Are your classes created properly?&lt;br&gt;•  Are you using appropriate data structures?&lt;br&gt;•  Is the output according to specifications?&lt;br&gt;2. Non-functional specifications: as described above&lt;br&gt;3. Assignment submission: via OWL assignment submission&lt;br&gt;Example output from provided Main.java:&lt;br&gt;Canada is located in North America has a population of 34207000, an area of 9976140.0, and has a population&lt;br&gt;density of 3.428881310807587&lt;br&gt;Target country not in catalogue.&lt;br&gt;England is located in Europe has a population of 54316600, an area of 130279.0, and has a population density of&lt;br&gt;416.9252143476692&lt;br&gt;Country “England” removed successfully.&lt;br&gt;Target country not in catalogue.&lt;br&gt;Country Catalogue:&lt;br&gt;China in Asia&lt;br&gt;United States of America in North America&lt;br&gt;Brazil in South America&lt;br&gt;Japan in Asia&lt;br&gt;Canada in North America&lt;br&gt;Indonesia in Asia&lt;br&gt;Nigeria in Africa&lt;br&gt;Mexico in North America&lt;br&gt;Egypt in Africa&lt;br&gt;France in Europe&lt;br&gt;Italy in Europe&lt;br&gt;South Africa in Africa&lt;br&gt;South Korea in Asia&lt;br&gt;Colombia in South America&lt;br&gt;Zambia in Africa&lt;br&gt;Ghana in Africa&lt;br&gt;Country with the largest population: China is located in Asia has a population of 1339190000, an area of&lt;br&gt;9596960.0, and has a population density of 139.5431469965489&lt;br&gt;Country with the smallest area: South Korea is located in Asia has a population of 50503933, an area of 98076.92,&lt;br&gt;and has a population density of 514.9420781158299&lt;br&gt;Countries in North America:&lt;br&gt;United States of America&lt;br&gt;Canada&lt;br&gt;Mexico&lt;br&gt;Countries with a population density between 0 and 25:&lt;br&gt;Brazil in South America&lt;br&gt;has a population density of 22.716728745947616.&lt;br&gt;Canada in North America&lt;br&gt;has a population density of 3.428881310807587.&lt;br&gt;Ghana in Africa&lt;br&gt;has a population density of 0.21889705799512446.&lt;br&gt;Continent with the largest population: Asia, with 1777655033,&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/string,&gt;&lt;/strings&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;完成城市管理系统，提供了java代码模板，需要自己补充模板代码，实现tore, search, sort, remove等方法的实现&lt;br&gt;按要求完成Country c
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Homework 02</title>
    <link href="http://yoursite.com/2016/12/03/page58/"/>
    <id>http://yoursite.com/2016/12/03/page58/</id>
    <published>2016-12-03T10:45:10.000Z</published>
    <updated>2017-01-11T07:26:24.622Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Java的数据结构算法，需要完成算法分析，算法实现，2D数组的实现，最后上传到github&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;6/24/16, 22:15 Homework 02 - CSCI-A 343 Data Structures - Summer 2016&lt;br&gt;Page 1 of 2 &lt;a href=&quot;https://homes.soic.indiana.edu/classes/summer2016/csci/c343-mitja/2016/homework/hw02.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://homes.soic.indiana.edu/classes/summer2016/csci/c343-mitja/2016/homework/hw02.html&lt;/a&gt;&lt;br&gt;CSCI C343 - Data Structures&lt;br&gt;Summer 2016&lt;br&gt;Homework 02&lt;br&gt;Due Date&lt;br&gt;Friday, June 24 th 2016, 11:59pm on IU GitHub.&lt;br&gt;Work Policy&lt;br&gt;Homework for C343 is to be done individually - no group solutions or cooperative work.&lt;br&gt;Tasks&lt;br&gt;Time Complexity analysis &amp;amp; from ADT to implementation [total: 100 points]&lt;br&gt;A. Time Complexity analysis&lt;br&gt;[40 points]&lt;br&gt;1. Textbook Exercises 3.12, from (a) to (h)&lt;br&gt;[5 points each]&lt;br&gt;B. from ADT to implementation&lt;br&gt;[60 points]&lt;br&gt;1. Define an ADT for a two-dimensional array of integers.&lt;br&gt;Specify precisely the basic operations that can be performed on such arrays.&lt;br&gt;You may refer to the ADT for a list of integers, as shown in Example 1.4 on page 9 of the&lt;br&gt;textbook.&lt;br&gt;[20 points]&lt;br&gt;2. Specify an ADT for two-dimensional arrays of integers in the form of an interface (or abstract&lt;br&gt;class declaration) in Java.&lt;br&gt;Detail the functions, their parameters, and their return types.&lt;br&gt;Name your Java file  Int2DArray.java and save it in your  hw02 directory.&lt;br&gt;[20 points]&lt;br&gt;3. Write an implementation of your ADT for two-dimensional arrays of integers.&lt;br&gt;Name your Java file  Int2DArray2.java and save it in your  hw02 directory.&lt;br&gt;[20 points]&lt;br&gt;4. Note: the list of operations does not need to be all- comprehensive: you may focus on the&lt;br&gt;operations that you think are most important for working with 2D array of integers.&lt;br&gt;6/24/16, 22:15 Homework 02 - CSCI-A 343 Data Structures - Summer 2016&lt;br&gt;Page 2 of 2 &lt;a href=&quot;https://homes.soic.indiana.edu/classes/summer2016/csci/c343-mitja/2016/homework/hw02.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://homes.soic.indiana.edu/classes/summer2016/csci/c343-mitja/2016/homework/hw02.html&lt;/a&gt;&lt;br&gt;5. Submit all your files to IU GitHub under  hw/hw02/ .&lt;br&gt;Homework 02 Submission Instructions:&lt;br&gt;1. In addition to the above two  .java files, also submit a plain-text file named  hw02.txt in which you&lt;br&gt;answer Task A and Task B.1.&lt;br&gt;1. At the top of your  hw02.txt file, include “C343 / Summer 2016”, “Homework 02”, your full&lt;br&gt;name and your IU username (i.e. your IU account) in the  hw02.txt file.&lt;br&gt;2.  Make sure that your plain-text document is clearly readable by anyone; plain-text documents need to use either:&lt;br&gt;ASCII encoding (7-bit, allows no accents/smart quotes/etc.), or&lt;br&gt;UTF-8 encoding (capable of encoding all sorts of characters) ← preferred for plain-text submissions.&lt;br&gt;(…otherwise your output may end up garbled…)&lt;br&gt;3. Do not use any other document file formats: submitted files other than plain text (file formats&lt;br&gt;such as .pdf, .doc, .docx, .html, .xml, etc…) will be ignored.&lt;br&gt;2. all submissions need to be plain-text files, placed within a directory named “hw02”, which in turn&lt;br&gt;needs to be inside a top-level directory named “hw”, as explained above.&lt;br&gt;3. Turn in your Homework 02 by 11:59PM on Friday, June 24 th 2016, to your C343 repository on IU&lt;br&gt;GitHub C343/Summer 2016.&lt;br&gt;4. When you turn in your homework on IU GitHub, it is your responsibility to verify the contents of&lt;br&gt;your uploaded file, by double-checking the content of your repository on &lt;a href=&quot;https://github.iu.edu/C343-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.iu.edu/C343-&lt;/a&gt;&lt;br&gt;Summer2016.&lt;br&gt;5. Please do not omit your IU username from the content.&lt;br&gt;6.  P.S.: your username should in fact be your IU username, not the word your username…&lt;br&gt;Last updated: June 22, 2016&lt;br&gt;mitja ⊛ indiana ⋅ edu&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Java的数据结构算法，需要完成算法分析，算法实现，2D数组的实现，最后上传到github&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C代写： ASSESSMENT 4</title>
    <link href="http://yoursite.com/2016/12/02/page57/"/>
    <id>http://yoursite.com/2016/12/02/page57/</id>
    <published>2016-12-02T10:34:13.000Z</published>
    <updated>2017-01-11T07:23:30.572Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C语言练习题，要求用递归的方法实现函数foo(n)= foo(n-1)+ foo(n-2)+ foo(n-3)，而且只能在递归函数中调用一次递归函数。&lt;br&gt;这道题的难点在于只能在递归函数中调用该递归函数一次，因为如果简单的按照方程来写，该递归函数应该调用三次，这样会&lt;br&gt;让效率很低。解决的思路是将foo(n-2)+ foo(n-3)用循环的方式计算，然后对foo(n-1)用递归的方式计算。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Homework 7&lt;br&gt;Files to submit: foo.c&lt;br&gt;Time it took Matthew to Complete: 10 mins&lt;br&gt;• All programs must compile without warnings when using the -Wall and -Werror options&lt;br&gt;• Submit only the files requested&lt;br&gt;◦ Do NOT submit folders or compressed files such as .zip, .rar, .tar, .targz, etc&lt;br&gt;• Your program must match the output exactly to receive credit.&lt;br&gt;◦ Make sure that all prompts and output match mine exactly.&lt;br&gt;◦ Easiest way to do this is to copy and paste them&lt;br&gt;• All input will be valid unless stated otherwise&lt;br&gt;• Print all real numbers to two decimal places unless otherwise stated&lt;br&gt;• The examples provided in the prompts do not represent all possible input you can receive.&lt;br&gt;• All inputs in the examples in the prompt are underlined&lt;br&gt;◦ You don’t have to make anything underlined it is just there to help you differentiate between&lt;br&gt;what you are supposed to print and what is being given to your program&lt;br&gt;• If you have questions please post them on Piazza&lt;br&gt;Restrictions&lt;br&gt;• No global variables are allowed&lt;br&gt;• Your main function may only declare variables, call other functions, and assign&lt;br&gt;variables values.&lt;br&gt;• You must solve this problem recursively&lt;br&gt;• You may only make ONE recursive call in the recursive case&lt;br&gt;For this assignment you will be writing a program to calculate the value of the function foo. The value&lt;br&gt;of foo is defined as follows&lt;br&gt;foo(0)=2&lt;br&gt;foo(1)=3&lt;br&gt;foo(2)=5&lt;br&gt;foo(n)= foo(n−1)+ foo(n−2)+ foo(n−3)&lt;br&gt;Specifications&lt;br&gt;1. The value of n is accepted through the command line&lt;br&gt;2. You may only make 1 recursive call in the recursive case&lt;br&gt;1. If you don’t you will fail many of the tests with a timeout issue&lt;br&gt;3. You must solve the problem recursively&lt;br&gt;Example&lt;br&gt;1. ./foo.out 2&lt;br&gt;foo(2) = 5&lt;br&gt;2. ./foo.out 10&lt;br&gt;foo(10) = 697&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C语言练习题，要求用递归的方法实现函数foo(n)= foo(n-1)+ foo(n-2)+ foo(n-3)，而且只能在递归函数中调用一次递归函数。&lt;br&gt;这道题的难
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C代写： ASSESSMENT 4</title>
    <link href="http://yoursite.com/2016/12/01/page56/"/>
    <id>http://yoursite.com/2016/12/01/page56/</id>
    <published>2016-12-01T08:33:17.000Z</published>
    <updated>2017-01-11T07:22:42.374Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C语言练习题，用户输入二进制字符串，其中某些位的值未知，用x代替，程序的功能为根据用户输入的字符串输出所有可能的二进制字符串组合。&lt;br&gt;要求必须用递归的方法实现。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Homework 7&lt;br&gt;Files to submit: bin_str.c&lt;br&gt;Time it took Matthew to Complete: 10 mins&lt;br&gt;• All programs must compile without warnings when using the -Wall and -Werror options&lt;br&gt;• Submit only the files requested&lt;br&gt;◦ Do NOT submit folders or compressed files such as .zip, .rar, .tar, .targz, etc&lt;br&gt;• Your program must match the output exactly to receive credit.&lt;br&gt;◦ Make sure that all prompts and output match mine exactly.&lt;br&gt;◦ Easiest way to do this is to copy and paste them&lt;br&gt;• All input will be valid unless stated otherwise&lt;br&gt;• Print all real numbers to two decimal places unless otherwise stated&lt;br&gt;• The examples provided in the prompts do not represent all possible input you can receive.&lt;br&gt;• All inputs in the examples in the prompt are underlined&lt;br&gt;◦ You don’t have to make anything underlined it is just there to help you differentiate between&lt;br&gt;what you are supposed to print and what is being given to your program&lt;br&gt;• If you have questions please post them on Piazza&lt;br&gt;Restrictions&lt;br&gt;• No global variables are allowed&lt;br&gt;• Your main function may only declare variables, call other functions, and assign&lt;br&gt;variables values.&lt;br&gt;• You must solve this problem recursively&lt;br&gt;1. Write a program called bin_str.c that completes a binary number. A binary&lt;br&gt;number is made up of 0’s and 1’s but the input strings you will receive can also&lt;br&gt;contain x’s. An x represents a digit that can be either a 0 or a 1. Your program&lt;br&gt;should display all the possible binary digits that can be formed. For example the&lt;br&gt;string x1x0 could represent either 0100, 0110, 1100, or 1110.&lt;br&gt;1. Your program should accept the binary string as a command line argument&lt;br&gt;2. You MUST solve this program RECURISIVELY&lt;br&gt;Examples&lt;br&gt;1../bin_str.out 0110&lt;br&gt;0110&lt;br&gt;2../bin_str.out 01x0&lt;br&gt;0100&lt;br&gt;0110&lt;br&gt;3../bin_str.out xx&lt;br&gt;00&lt;br&gt;01&lt;br&gt;10&lt;br&gt;11&lt;br&gt;4../bin_str.out 101x100x11x&lt;br&gt;10101000110&lt;br&gt;10101000111&lt;br&gt;10101001110&lt;br&gt;10101001111&lt;br&gt;10111000110&lt;br&gt;10111000111&lt;br&gt;10111001110&lt;br&gt;10111001111&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C语言练习题，用户输入二进制字符串，其中某些位的值未知，用x代替，程序的功能为根据用户输入的字符串输出所有可能的二进制字符串组合。&lt;br&gt;要求必须用递归的方法实现。&lt;b
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C代写： ASSESSMENT 4</title>
    <link href="http://yoursite.com/2016/11/30/page55/"/>
    <id>http://yoursite.com/2016/11/30/page55/</id>
    <published>2016-11-30T04:32:15.000Z</published>
    <updated>2017-01-11T07:21:46.051Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C语言，实现四子棋游戏，用二维数组模拟棋盘，根据用户输入将用户的棋子放入棋盘，电脑玩家随机放置棋子，&lt;br&gt;游戏过程中在每一步之后判断是否有玩家的4个棋子连成一条直线或斜线，如果有，该玩家获胜。主要涉及的知识&lt;br&gt;是二维数组的操作以及处理用户的输入，根据用户的输入执行相应功能。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;image from: www.amazon.com&lt;br&gt;EEE101 C Programming and Software Engineering 1 – ASSESSMENT 4&lt;br&gt;Assessment Number 4&lt;br&gt;Contribution to Overall Marks  25%&lt;br&gt;Issue Date  14/11/2016&lt;br&gt;Submission Deadline  28/11/2016 at 0900 (9am)&lt;br&gt;Assessment Overview&lt;br&gt;This assessment aims at testing some concepts of C programming in particular the use of&lt;br&gt;two-dimensional arrays, and the use of pointers to pass them between functions, as well as&lt;br&gt;the routine of code development using the software development process (SDP) presented in&lt;br&gt;Lecture 1, namely the five main steps of the software development process:&lt;br&gt;1. Problem statement: formulate the problem.&lt;br&gt;2. Analysis: determine the inputs, outputs, variables, etc&lt;br&gt;3. Design: define the list of steps (the algorithm) needed to solve the problem.&lt;br&gt;4. Implementation: the C code has to be submitted as a separate file. Just indicate here the&lt;br&gt;name of the file.&lt;br&gt;5. Testing: explain how you have tested and verified your C program.&lt;br&gt;EXERCISE 1 (10 POINTS OUT OF 10)&lt;br&gt;Connect 4 is a game of strategy for 2 players. Each player chooses a counter colour and then&lt;br&gt;they take turns to place the counters into a rectangular grid of size M x N (typically 6 x 7).&lt;br&gt;Counters are placed into the top of a column and fall down to occupy the next available slot&lt;br&gt;in that column (see the photo in Figure 1). The game is won when either player is able to&lt;br&gt;create a line of 4 counters vertically, horizontally or diagonally.&lt;br&gt;Figure 1: Connect 4 Game&lt;/em&gt;&lt;br&gt;This assignment requires you to use a 2 dimensional matrix together with a modular&lt;br&gt;programming strategy to recreate this game using C programming. Your game will allow you&lt;br&gt;to play either against another person, or against the computer who will place counters at&lt;br&gt;random.&lt;br&gt;Program Requirements&lt;br&gt;  Offer the user a choice between playing the computer or another player.&lt;br&gt;  Display the current state of the board to each player&lt;br&gt;  You should use one or more 2 dimensional matrices to represent the Connect 4 playing&lt;br&gt;board declared inside function main() as a local variable and passed to other functions as&lt;br&gt;needed.&lt;br&gt;  As a minimum you should create your own functions to perform the following tasks:&lt;br&gt;1. input counters;&lt;br&gt;2. check the board for a win;&lt;br&gt;3. display the board;&lt;br&gt;Programming Constraints&lt;br&gt;All variables used must be local.&lt;br&gt;Ideas&lt;br&gt;Try to keep your program as flexible as possible e.g. use constants to define matrix sizes so&lt;br&gt;that these could be easily changed.&lt;br&gt;Program in small sections, getting each part to work before integrating them all.&lt;br&gt;Consider how to deal with invalid inputs to avoid crashing the program.&lt;br&gt;Consider providing an option to change the matrix size and the winning length (e.g. connect 5)&lt;br&gt;Don’t forget that this is an interactive game, it should be easy to use and look tidy&lt;br&gt;Note: The programme requirements are becoming more vague (less well defined) with each&lt;br&gt;assignment to allow you the opportunity to interpret the problem in your own way and&lt;br&gt;develop your own solution.&lt;br&gt;What should be submitted?&lt;br&gt;You should submit the followings:&lt;br&gt;1) A short report (up to a few pages of text plus C source codes) detailing for each question:&lt;br&gt;a) SDP steps 1 to 3 in the report (Report + Specification + Analysis + Algorithm Design)&lt;br&gt;(40%)&lt;br&gt;b) SDP step 4 (Implementation(35%) + Robustness(10%)): your C source code including&lt;br&gt;the comments. (45%)&lt;br&gt;c) SDP step 5 in the report (testing): you will explain your testing methodology&lt;br&gt;including: what you wanted to test, how you have tested it and the outcome of your&lt;br&gt;tests. (15%). Note: you do not need to include screenshots of results&lt;br&gt;Please refer to the file “EEE101 Marking Guidelines Assignments 4-5” on ICE&lt;br&gt;for a detailed marking scheme.&lt;br&gt;2) The report in Microsoft Word or pdf format and C source code of your implementation&lt;br&gt;for each question should be zipped into a single file, i.e. the zip file will contain 4 files,&lt;br&gt;two reports and two source codes. (It is a good practice to include comments in your&lt;br&gt;code stating the aim of the program, what are the inputs, what are the outputs, which&lt;br&gt;algorithm is used, who is the author and so on.)&lt;br&gt;The naming of Report ( .doc or .pdf), Source Code (.c) and Compressed file (.zip, or .rar)&lt;br&gt;  StudentID_LastName_FirstName&lt;em&gt;AssignmentNumber-QuestionNumber.docx or .pdf&lt;br&gt;  StudentID&lt;/em&gt; AssignmentNumber-QuestionNumber.c&lt;br&gt;  StudentID_LastName_FirstName_AssignmentNumber.zip or .rar&lt;br&gt;For example&lt;br&gt;  10115085_Zhang_Hanqing_4-1.docx&lt;br&gt;  10115085_4-1.c&lt;br&gt;Zipped together into:&lt;br&gt;  10115085_Zhang_Hanqing_4.zip&lt;br&gt;How the work should be submitted?&lt;br&gt;Should be submitted electronically through ICE so that the marker can run your programs&lt;br&gt;during marking. Feedback and your grade will also be given through ICE.&lt;br&gt;Remember that you are responsible for ensuring that your C code will run in Visual Studio&lt;br&gt;2013 and that if it does not without documentary explanation you may get a 0 mark for your&lt;br&gt;implementation.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C语言，实现四子棋游戏，用二维数组模拟棋盘，根据用户输入将用户的棋子放入棋盘，电脑玩家随机放置棋子，&lt;br&gt;游戏过程中在每一步之后判断是否有玩家的4个棋子连成一条直线或
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
</feed>
