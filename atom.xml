<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>留学生Computer Science编程作业代写</title>
  <subtitle>专业 高效 原创</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-19T09:59:54.153Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>csyoyo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>留学生Computer Science编程作业代写</title>
    <link href="http://yoursite.com/2111/01/11/mainpage/"/>
    <id>http://yoursite.com/2111/01/11/mainpage/</id>
    <published>2111-01-11T07:55:30.000Z</published>
    <updated>2016-09-19T09:59:54.153Z</updated>
    
    <content type="html">&lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队成员有的擅长java，有的擅长python，有的擅长数据结构，有的擅长机器学习，&lt;br&gt;  有的擅长C/C++，有的擅长ios/android。通过自己设计的任务分发系统，我们可以在15分钟内迅速准确评估时间和难度，完成之后还有互相之间的code review。&lt;br&gt;  相比与代写机构的黑心，个人代写的不规范(我们也是个人代写发展而来)，我们团队经过不断的调整进步，具备了代写机构规范的流程优势，&lt;br&gt;  并且价格合理，具备了个人代写的一对一，并且熟练了解代写流程规范。&lt;/p&gt;
&lt;h2 id=&quot;服务内容&quot;&gt;&lt;a href=&quot;#服务内容&quot; class=&quot;headerlink&quot; title=&quot;服务内容&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;服务内容&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  代写美国、加拿大、英国、澳洲或者其他国家的Computer Science编程作业，范围包括&lt;font color=&quot;red&quot;&gt;Assignment、Homework、Lab、Project、Final甚至App&lt;/font&gt;。&lt;br&gt;    我不会给你看不懂的高逼格code，我的编程风格都是模仿你的slides和notes，为你量身打造，&lt;font color=&quot;red&quot;&gt;绝无超纲代码&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;特别擅长各种疑难作业&lt;/font&gt;，做过大量Game Design、Operating System、Database System, Web Design，得分几乎全A(90%)。&lt;/p&gt;
&lt;h2 id=&quot;擅长范围&quot;&gt;&lt;a href=&quot;#擅长范围&quot; class=&quot;headerlink&quot; title=&quot;擅长范围&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;擅长范围&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  我们擅长范围包括但不限于：&lt;br&gt;    C C++ Java Python Php Android Ios&lt;br&gt;    Js Jsp Qt MFC J2ee Sql Matlab Ssh&lt;br&gt;    Assignment/Project/Lab/作业/编程/辅导&lt;br&gt;    Data structure/数据结构/机器学习/定制/制作&lt;br&gt;    Linux/Windows/Mac socket Algorithom/算法&lt;br&gt;    网站设计 Web开发 Operating system/操作系统&lt;br&gt;    Computer Science Everything/程序设计/app/&lt;/p&gt;
&lt;h2 id=&quot;质量保证&quot;&gt;&lt;a href=&quot;#质量保证&quot; class=&quot;headerlink&quot; title=&quot;质量保证&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;质量保证&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  开发之前会详细问你的开发语言、系统环境、软件版本、测试方式(本地测试、服务器自动测试)、是否需要documention、deadline(精确到小时)&lt;br&gt;    沟通好时间后，我们不会临着deadline给你code。一般都是提前足够的时间给客户反馈一个版本的code，如果有问题需要反馈修改也有充足的时间。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;除了code会免费提供给客户一个运行说明word，即使客户不知道如何运行，根据说明word也可以运行验证code&lt;/font&gt;。&lt;br&gt;    带checker/tester的必全过，带得分点的必全做，能顺手做掉的bonus也帮你做。&lt;br&gt;    小作业24小时内完成，大作业24-72小时，绝不浪费你的slip day。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;代码肯定是手写原创，不违反honor code，我给你的代码属于reference&lt;/font&gt;。&lt;br&gt;    &lt;font color=&quot;red&quot;&gt;免费提供售后服务，包括代码运行，讲解答疑&lt;/font&gt;。&lt;/p&gt;
&lt;h2 id=&quot;价格优势&quot;&gt;&lt;a href=&quot;#价格优势&quot; class=&quot;headerlink&quot; title=&quot;价格优势&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;价格优势&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  价格通常在$100 USD以上，只有部分Lab可能低于这个价格。&lt;br&gt;    真正的&lt;font color=&quot;red&quot;&gt;无中介费用&lt;/font&gt;，绝不漫天要价，欢迎你货比三家，支持PayPal/支付宝/微信支付。&lt;br&gt;    通常先收取一半定金，写好之后验收code之后付尾款。&lt;br&gt;    我给你的不止是一个答案，还有我作为工程师的经验，编程方法和技巧。&lt;/p&gt;
&lt;h2 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;联系方式&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  邮箱 : cscoderman@gmail.com (请附带作业要求)&lt;br&gt;    微信 : cscoderman&lt;br&gt;    联系时，请简单或详细地说明你的要求+微信昵称(如大二，Algorithm and Data Structure)，便于我们快速报价与沟通。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;团队介绍&quot;&gt;&lt;a href=&quot;#团队介绍&quot; class=&quot;headerlink&quot; title=&quot;团队介绍&quot;&gt;&lt;/a&gt;&lt;font face=&quot;微软雅黑&quot;&gt;团队介绍&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;  Team很小，运转高效，我们不是代写机构，而是一个高效协作的团队，团队
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++代写 Assignment 2</title>
    <link href="http://yoursite.com/2016/12/30/page81/"/>
    <id>http://yoursite.com/2016/12/30/page81/</id>
    <published>2016-12-30T03:13:46.000Z</published>
    <updated>2017-01-12T04:47:57.524Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Assignment 2&lt;br&gt;Due:​​ Oct 14th (Friday) before 11:59 PM&lt;br&gt;1. Learning Goals&lt;br&gt;Learn how to&lt;br&gt;1. use associative containers like ​std::unordered_set​ and ​std::unordered_map&lt;br&gt;2. use iterators to iterate through associative containers&lt;br&gt;3. use ​algorithms​ that are available in the C++ Standard Library&lt;br&gt;4. pass command line arguments to a C++ program&lt;br&gt;5. partition a C++ program in header files (.hpp) and source files (.cpp)&lt;br&gt;6. read, understand, and use code written by other people&lt;br&gt;2. Description&lt;br&gt;In this assignment you’ll be doing the following:&lt;br&gt;1. Read a raw text file containing movie reviews and ratings.&lt;br&gt;2. Remove the punctuations and stopwords (e.g. is, and, the, etc.) from the reviews and&lt;br&gt;write the contents to a clean review file.&lt;br&gt;3. Associate a value for all words found in the clean reviews based on the average rating of&lt;br&gt;the word.&lt;br&gt;4. Using the map between the words and their associated values, rate reviews from&lt;br&gt;another file that doesn’t have any rating already.&lt;br&gt;5. Write the ratings of the reviews to an output file.&lt;br&gt;2.1. Clean the data&lt;br&gt;The raw data with the reviews and the rating will be present in a file named&lt;br&gt;rawReviewRatings.txt​. Every review is given a rating between 0 - 4 (both inclusive). The&lt;br&gt;following are interpretation of the rating values:&lt;br&gt;● 0 = Negative&lt;br&gt;● 1 = Somewhat Negative&lt;br&gt;● 2 = Neutral&lt;br&gt;● 3 = Somewhat Positive&lt;br&gt;● 4 = Positive&lt;br&gt;Each line of review follows the following format:&lt;br&gt;&lt;rating&gt; &lt;review&gt;&lt;br&gt;Example:&lt;br&gt;4 The Jungle Book is awesome!&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;where 4 is the rating and the text “The Jungle Book is awesome!” is the review.&lt;br&gt;Now, your first task is to read the contents of this file and ​clean the data!&lt;br&gt;The following steps needs to be performed in the same order for cleaning the data:&lt;br&gt;1. Read the raw reviews from an input file. e.g. ​rawReviewRatings.txt&lt;br&gt;2. Replace the hyphens in every line of text with spaces.&lt;br&gt;e.g. If the review contains the word “awe-inspiring”, then it should be split into 2 words&lt;br&gt;namely “awe” and “inspiring”&lt;br&gt;3. Split each line of text into multiple words using the space character as the delimiter.&lt;br&gt;e.g. “The Jungle Book is awesome!” becomes | “The” | “Jungle” | “Book” | “is” |&lt;br&gt;“awesome!” |&lt;br&gt;4. Remove the punctuation marks from the words.&lt;br&gt;e.g. “awesome!” becomes “awesome” and “!” becomes “”&lt;br&gt;5. If there are any trailing/leading whitespaces, then remove them. Remember that the&lt;br&gt;space character (‘ ’), tab (‘\t’), newline (‘\n’), etc. are considered as whitespaces. For a&lt;br&gt;complete list of whitespace characters ​this​.&lt;br&gt;e.g. “zootopia ” becomes “zootopia”, “hello\t” becomes “hello”, and “world\n” becomes&lt;br&gt;“world”&lt;br&gt;6. Remove the empty words. i.e. words with length == 0.&lt;br&gt;7. Remove single lettered words. i.e. words with length == 1.&lt;br&gt;8. Remove stopwords. e.g. is, and, the, etc. The list of stopwords can be found in the file&lt;br&gt;stopwords.txt&lt;br&gt;9. Write the contents of the clean data to a file named ​cleanReviewRatings.txt​.&lt;br&gt;2.2. Fill the dictionary&lt;br&gt;Using the ​cleanReviewRatings.txt file, create a map/dictionary for every word that is found in&lt;br&gt;this file. The dictionary is of type&lt;br&gt;​&lt;br&gt;std::unordered_map&lt;string, std::pair&lt;long,=&quot;&quot; long=&quot;&quot;&gt;&amp;gt;.&lt;br&gt;We associate a pair of values for each word namely its total_rating and its total_count. For&lt;br&gt;example, the word “fantastic” has occurred 3 times in the file ​cleanReviewRatings.txt with&lt;br&gt;associated ratings of 3, 4, and 3 (see the last 3 lines in the file). Therefore the word “fantastic”&lt;br&gt;gets a total_rating of 10 (i.e. 3 + 4 + 3 = 10) and a total_count of 3 since it had occurred 3 times&lt;br&gt;in the file. In a similar way, the other entries in this map are filled up as shown below. You may&lt;br&gt;want to read about a ​std::pair​ to understand more about how this map is organized.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;word total_rating total_count&lt;br&gt;fantastic  10  3&lt;br&gt;Zootopia  3  1&lt;br&gt;Dory  1  1&lt;br&gt;Finding  1  1&lt;br&gt;worst  0  1&lt;br&gt;The  6  2&lt;br&gt;inspiring  2  1&lt;br&gt;Jungle  8  2&lt;br&gt;Book  8  2&lt;br&gt;good  1  1&lt;br&gt;Jack  0  1&lt;br&gt;awesome  4  1&lt;br&gt;Lion  5  2&lt;br&gt;King  5  2&lt;br&gt;awe  2  1&lt;br&gt;Jill  0  1&lt;br&gt;2.3. Rate new reviews&lt;br&gt;Using the map/dictionary that we created in the previous step, we are going to read new unrated&lt;br&gt;reviews from a file (e.g. ​rawReviews.txt​) and predict a rating for each review in this file. The&lt;br&gt;predicted rating for each review is written to an output file named ​ratings.txt​.&lt;br&gt;How do we predict the ratings for the unrated reviews?&lt;br&gt;1. Read the input file with the unrated raw reviews (e.g. ​rawReviews.txt​).&lt;br&gt;2. Clean the data and produce an output file named ​cleanReviews.txt​. The process for&lt;br&gt;cleaning the data is exactly the same as we did in step 2.1.&lt;br&gt;3. Rate each review by finding the rating for each word from the map/dictionary that we&lt;br&gt;created in step 2.2. The rating for a line of review is the average value of the rating of all&lt;br&gt;the words in the review. If some word in this unrated review is not found in the&lt;br&gt;map/dictionary, then that word is given a neutral rating of 2. If a review is empty (i.e. the&lt;br&gt;review contains no words in it), then such a review is also given a neutral rating of 2.&lt;br&gt;e.g. Let see how we computed the rating for the 2nd review in ​cleanReviews.txt (i.e.&lt;br&gt;“The Lion King fantastic”). We lookup the map/dictionary that we created before and get&lt;br&gt;the average rating for each word in this review. The average ratings of each word in this&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;review is shown below:&lt;br&gt;The: 6/2 = 3&lt;br&gt;Lion: 5/2 = 2.5&lt;br&gt;King: 5/2 = 2.5&lt;br&gt;fantastic: 10/3 = 3.33&lt;br&gt;Based on these individual values, this line gets and average review of 2.83 as shown in&lt;br&gt;the file ​ratings.txt​.&lt;br&gt;Rating for this line = (3 + 2.5 + 2.5 + 3.33) / 4 = 2.83&lt;br&gt;We are dividing by 4 since this review contains 4 words in total.&lt;br&gt;Another example: “Finding Nemo great”&lt;br&gt;Finding: 1&lt;br&gt;Nemo: 2 (because it is NOT found in the map)&lt;br&gt;great: 2 (because it is also NOT found in the map)&lt;br&gt;Rating for this line = (1 + 2 + 2) / 3 = 1.67&lt;br&gt;4. Write the ratings for all the reviews to an output file named ​ratings.txt​.&lt;br&gt;A high-level process diagram of the steps explained in 2.1 - 2.3 is shown. Hope this&lt;br&gt;visualization helps you to understand the idea in a better way! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;That’s it! Now, after completing this step you may pat yourself on the back for doing an amazing&lt;br&gt;job with this assignment! :) Also, if you have not taken Artificial Intelligence or Machine Learning&lt;br&gt;before then you have just now completed your first exercise in Machine Learning. You just&lt;br&gt;created a program that may predict the ratings of movie reviews based on some learning it did&lt;br&gt;before based on some reviews that already had ratings associated with them. Well, even though&lt;br&gt;our algorithm is very simple, this is the basic idea behind Machine Learning. Newcomers,&lt;br&gt;welcome to the world of Artificial Intelligence! :)&lt;br&gt;3. Sample Output&lt;br&gt;If your program runs correctly without any errors, then NO OUTPUT will be written to the&lt;br&gt;console. If any input/output file cannot be opened, only then your program writes some error&lt;br&gt;messages to the console. All error handling is already taken care of in the file ​main.cpp​.&lt;br&gt;3.1. Small Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatings.txt&lt;br&gt;Unrated Review File: ​rawReviews.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;3.2. “Big” Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatingsBig.txt&lt;br&gt;Unrated Review File: ​rawReviewsBig.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;4. Important Details&lt;br&gt;1. The code for this assignment is split across 5 files.&lt;br&gt;a. main.cpp&lt;br&gt;b. a2.hpp&lt;br&gt;c. a2.cpp​ (This is the ONLY file you should modify!)&lt;br&gt;d. trim.hpp&lt;br&gt;e. trim.cpp&lt;br&gt;The .hpp files are the header files which contain only the declaration of the functions and&lt;br&gt;the .cpp files are the source files which contain the implementation of these functions. If&lt;br&gt;you want to understand more about why we have separate header and source files, then&lt;br&gt;maybe you should read ​this​.&lt;br&gt;2. Take some time to read the source code starting from the main() function that is present&lt;br&gt;inside the file main.cpp.&lt;br&gt;3. All the code you write for this assignment will only be inside the file ​a2.cpp. You should&lt;br&gt;not perform any file IO, print to stdout, or print to stderr in a2.cpp.&lt;br&gt;4. The files trim.hpp and trim.cpp are provided only to help you with trimming the&lt;br&gt;whitespaces in strings since doing so in C++ is not so easy as it’s in Java. You may read&lt;br&gt;these files to find out how to trim strings for this assignment.&lt;br&gt;5. You should use the following command to ​compile​​ your program.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;$ g++ &lt;em&gt;.cpp -std=c++11&lt;br&gt;where &lt;/em&gt;.cpp means all the .cpp files are to be compiled. You need not mention the&lt;br&gt;names of the .hpp files since they are included from within the .cpp files. The option&lt;br&gt;“-std=c++11” informs the compiler that our may contain C++11 features (e.g.&lt;br&gt;std::unordered_map was introduced only in C++11).&lt;br&gt;6. Your program takes the two files ​rawReviewRatings.txt and ​rawReviews.txt as ​command&lt;br&gt;line arguments​. ​​You should run your program as shown below:&lt;br&gt;$ ./a.out rawReviewRatings.txt rawReviews.txt&lt;br&gt;If you don’t give these 2 command line arguments to your program, then the following&lt;br&gt;error message will be printed. This error handling is already handled for you in main.cpp.&lt;br&gt;$ ./a.out&lt;br&gt;USAGE: ./a.out &lt;reviewratingsfile&gt; &lt;reviewsfile&gt;&lt;br&gt;7. If your program works correctly without any errors, then nothing is printed to the console.&lt;br&gt;Only the three output files cleanReviewRatings.txt, cleanReviews.txt and ratings.txt will&lt;br&gt;be produced. You may even try compiling and running your program before adding any&lt;br&gt;code in a2.cpp to see if these 3 output files are produced. The contents of these output&lt;br&gt;files will be empty until the methods in a2.cpp are implemented.&lt;br&gt;8. You should NOT add any new functions/methods in a2.cpp.&lt;br&gt;9. You ​SHOULD NOT MODIFY​​ any of the following in a2.cpp:&lt;br&gt;a. Names of the functions&lt;br&gt;b. Names and types of the parameters to a function.&lt;br&gt;c. Return types of the functions.&lt;br&gt;10.An approximate number of lines of code is given for each function in a2.cpp. These are&lt;br&gt;the number of lines for each function in Gerald’s implementation of a2.cpp. We have&lt;br&gt;provided this information since it may help you to see how little code you may write if you&lt;br&gt;make use of the C++ Standard Library effectively. This would help you to stop and think&lt;br&gt;for a while before you may write a lot of code by yourself and maybe later realize that&lt;br&gt;you could have used some functionality from the standard library to do the same thing&lt;br&gt;with little code and more effectively!&lt;br&gt;11.Updates to this specification that may be posted on piazza are also part of this&lt;br&gt;specification.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;5. Grading Scheme&lt;br&gt;Item  Grade&lt;br&gt;Correctness of your code  90&lt;br&gt;Code Style (indentation) &amp;amp;&lt;br&gt;Implementation Comments in a2.cpp&lt;br&gt;10&lt;br&gt;TOTAL  100&lt;br&gt;6. Submission&lt;br&gt;Submit ​ONLY your a2.cpp​​ file at the following location:&lt;br&gt;/p/course/cs368-gerald/public/handin/&lt;cslogin&gt;/a2&lt;br&gt;Remember that ​no late work is accepted​​ in this course and there are no exceptions!&lt;br&gt;Hope you have a great time learning and coding associative containers and&lt;br&gt;algorithms using the C++ Standard Library! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/cslogin&gt;&lt;/reviewsfile&gt;&lt;/reviewratingsfile&gt;&lt;/string,&gt;&lt;/review&gt;&lt;/rating&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;s
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写 Assignment 2</title>
    <link href="http://yoursite.com/2016/12/30/page80/"/>
    <id>http://yoursite.com/2016/12/30/page80/</id>
    <published>2016-12-30T03:13:46.000Z</published>
    <updated>2017-01-12T04:47:57.524Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Assignment 2&lt;br&gt;Due:​​ Oct 14th (Friday) before 11:59 PM&lt;br&gt;1. Learning Goals&lt;br&gt;Learn how to&lt;br&gt;1. use associative containers like ​std::unordered_set​ and ​std::unordered_map&lt;br&gt;2. use iterators to iterate through associative containers&lt;br&gt;3. use ​algorithms​ that are available in the C++ Standard Library&lt;br&gt;4. pass command line arguments to a C++ program&lt;br&gt;5. partition a C++ program in header files (.hpp) and source files (.cpp)&lt;br&gt;6. read, understand, and use code written by other people&lt;br&gt;2. Description&lt;br&gt;In this assignment you’ll be doing the following:&lt;br&gt;1. Read a raw text file containing movie reviews and ratings.&lt;br&gt;2. Remove the punctuations and stopwords (e.g. is, and, the, etc.) from the reviews and&lt;br&gt;write the contents to a clean review file.&lt;br&gt;3. Associate a value for all words found in the clean reviews based on the average rating of&lt;br&gt;the word.&lt;br&gt;4. Using the map between the words and their associated values, rate reviews from&lt;br&gt;another file that doesn’t have any rating already.&lt;br&gt;5. Write the ratings of the reviews to an output file.&lt;br&gt;2.1. Clean the data&lt;br&gt;The raw data with the reviews and the rating will be present in a file named&lt;br&gt;rawReviewRatings.txt​. Every review is given a rating between 0 - 4 (both inclusive). The&lt;br&gt;following are interpretation of the rating values:&lt;br&gt;● 0 = Negative&lt;br&gt;● 1 = Somewhat Negative&lt;br&gt;● 2 = Neutral&lt;br&gt;● 3 = Somewhat Positive&lt;br&gt;● 4 = Positive&lt;br&gt;Each line of review follows the following format:&lt;br&gt;&lt;rating&gt; &lt;review&gt;&lt;br&gt;Example:&lt;br&gt;4 The Jungle Book is awesome!&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;where 4 is the rating and the text “The Jungle Book is awesome!” is the review.&lt;br&gt;Now, your first task is to read the contents of this file and ​clean the data!&lt;br&gt;The following steps needs to be performed in the same order for cleaning the data:&lt;br&gt;1. Read the raw reviews from an input file. e.g. ​rawReviewRatings.txt&lt;br&gt;2. Replace the hyphens in every line of text with spaces.&lt;br&gt;e.g. If the review contains the word “awe-inspiring”, then it should be split into 2 words&lt;br&gt;namely “awe” and “inspiring”&lt;br&gt;3. Split each line of text into multiple words using the space character as the delimiter.&lt;br&gt;e.g. “The Jungle Book is awesome!” becomes | “The” | “Jungle” | “Book” | “is” |&lt;br&gt;“awesome!” |&lt;br&gt;4. Remove the punctuation marks from the words.&lt;br&gt;e.g. “awesome!” becomes “awesome” and “!” becomes “”&lt;br&gt;5. If there are any trailing/leading whitespaces, then remove them. Remember that the&lt;br&gt;space character (‘ ’), tab (‘\t’), newline (‘\n’), etc. are considered as whitespaces. For a&lt;br&gt;complete list of whitespace characters ​this​.&lt;br&gt;e.g. “zootopia ” becomes “zootopia”, “hello\t” becomes “hello”, and “world\n” becomes&lt;br&gt;“world”&lt;br&gt;6. Remove the empty words. i.e. words with length == 0.&lt;br&gt;7. Remove single lettered words. i.e. words with length == 1.&lt;br&gt;8. Remove stopwords. e.g. is, and, the, etc. The list of stopwords can be found in the file&lt;br&gt;stopwords.txt&lt;br&gt;9. Write the contents of the clean data to a file named ​cleanReviewRatings.txt​.&lt;br&gt;2.2. Fill the dictionary&lt;br&gt;Using the ​cleanReviewRatings.txt file, create a map/dictionary for every word that is found in&lt;br&gt;this file. The dictionary is of type&lt;br&gt;​&lt;br&gt;std::unordered_map&lt;string, std::pair&lt;long,=&quot;&quot; long=&quot;&quot;&gt;&amp;gt;.&lt;br&gt;We associate a pair of values for each word namely its total_rating and its total_count. For&lt;br&gt;example, the word “fantastic” has occurred 3 times in the file ​cleanReviewRatings.txt with&lt;br&gt;associated ratings of 3, 4, and 3 (see the last 3 lines in the file). Therefore the word “fantastic”&lt;br&gt;gets a total_rating of 10 (i.e. 3 + 4 + 3 = 10) and a total_count of 3 since it had occurred 3 times&lt;br&gt;in the file. In a similar way, the other entries in this map are filled up as shown below. You may&lt;br&gt;want to read about a ​std::pair​ to understand more about how this map is organized.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;word total_rating total_count&lt;br&gt;fantastic  10  3&lt;br&gt;Zootopia  3  1&lt;br&gt;Dory  1  1&lt;br&gt;Finding  1  1&lt;br&gt;worst  0  1&lt;br&gt;The  6  2&lt;br&gt;inspiring  2  1&lt;br&gt;Jungle  8  2&lt;br&gt;Book  8  2&lt;br&gt;good  1  1&lt;br&gt;Jack  0  1&lt;br&gt;awesome  4  1&lt;br&gt;Lion  5  2&lt;br&gt;King  5  2&lt;br&gt;awe  2  1&lt;br&gt;Jill  0  1&lt;br&gt;2.3. Rate new reviews&lt;br&gt;Using the map/dictionary that we created in the previous step, we are going to read new unrated&lt;br&gt;reviews from a file (e.g. ​rawReviews.txt​) and predict a rating for each review in this file. The&lt;br&gt;predicted rating for each review is written to an output file named ​ratings.txt​.&lt;br&gt;How do we predict the ratings for the unrated reviews?&lt;br&gt;1. Read the input file with the unrated raw reviews (e.g. ​rawReviews.txt​).&lt;br&gt;2. Clean the data and produce an output file named ​cleanReviews.txt​. The process for&lt;br&gt;cleaning the data is exactly the same as we did in step 2.1.&lt;br&gt;3. Rate each review by finding the rating for each word from the map/dictionary that we&lt;br&gt;created in step 2.2. The rating for a line of review is the average value of the rating of all&lt;br&gt;the words in the review. If some word in this unrated review is not found in the&lt;br&gt;map/dictionary, then that word is given a neutral rating of 2. If a review is empty (i.e. the&lt;br&gt;review contains no words in it), then such a review is also given a neutral rating of 2.&lt;br&gt;e.g. Let see how we computed the rating for the 2nd review in ​cleanReviews.txt (i.e.&lt;br&gt;“The Lion King fantastic”). We lookup the map/dictionary that we created before and get&lt;br&gt;the average rating for each word in this review. The average ratings of each word in this&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;review is shown below:&lt;br&gt;The: 6/2 = 3&lt;br&gt;Lion: 5/2 = 2.5&lt;br&gt;King: 5/2 = 2.5&lt;br&gt;fantastic: 10/3 = 3.33&lt;br&gt;Based on these individual values, this line gets and average review of 2.83 as shown in&lt;br&gt;the file ​ratings.txt​.&lt;br&gt;Rating for this line = (3 + 2.5 + 2.5 + 3.33) / 4 = 2.83&lt;br&gt;We are dividing by 4 since this review contains 4 words in total.&lt;br&gt;Another example: “Finding Nemo great”&lt;br&gt;Finding: 1&lt;br&gt;Nemo: 2 (because it is NOT found in the map)&lt;br&gt;great: 2 (because it is also NOT found in the map)&lt;br&gt;Rating for this line = (1 + 2 + 2) / 3 = 1.67&lt;br&gt;4. Write the ratings for all the reviews to an output file named ​ratings.txt​.&lt;br&gt;A high-level process diagram of the steps explained in 2.1 - 2.3 is shown. Hope this&lt;br&gt;visualization helps you to understand the idea in a better way! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;That’s it! Now, after completing this step you may pat yourself on the back for doing an amazing&lt;br&gt;job with this assignment! :) Also, if you have not taken Artificial Intelligence or Machine Learning&lt;br&gt;before then you have just now completed your first exercise in Machine Learning. You just&lt;br&gt;created a program that may predict the ratings of movie reviews based on some learning it did&lt;br&gt;before based on some reviews that already had ratings associated with them. Well, even though&lt;br&gt;our algorithm is very simple, this is the basic idea behind Machine Learning. Newcomers,&lt;br&gt;welcome to the world of Artificial Intelligence! :)&lt;br&gt;3. Sample Output&lt;br&gt;If your program runs correctly without any errors, then NO OUTPUT will be written to the&lt;br&gt;console. If any input/output file cannot be opened, only then your program writes some error&lt;br&gt;messages to the console. All error handling is already taken care of in the file ​main.cpp​.&lt;br&gt;3.1. Small Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatings.txt&lt;br&gt;Unrated Review File: ​rawReviews.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;3.2. “Big” Data&lt;br&gt;INPUT FILES:&lt;br&gt;Rated Review File: ​rawReviewRatingsBig.txt&lt;br&gt;Unrated Review File: ​rawReviewsBig.txt&lt;br&gt;Stopwords File: ​stopwords.txt&lt;br&gt;OUTPUT FILES:&lt;br&gt;Cleaned Rated Review File: ​cleanReviewRatings.txt&lt;br&gt;Cleaned Unrated Review File: ​cleanReviews.txt&lt;br&gt;Ratings File: ​ratings.txt&lt;br&gt;4. Important Details&lt;br&gt;1. The code for this assignment is split across 5 files.&lt;br&gt;a. main.cpp&lt;br&gt;b. a2.hpp&lt;br&gt;c. a2.cpp​ (This is the ONLY file you should modify!)&lt;br&gt;d. trim.hpp&lt;br&gt;e. trim.cpp&lt;br&gt;The .hpp files are the header files which contain only the declaration of the functions and&lt;br&gt;the .cpp files are the source files which contain the implementation of these functions. If&lt;br&gt;you want to understand more about why we have separate header and source files, then&lt;br&gt;maybe you should read ​this​.&lt;br&gt;2. Take some time to read the source code starting from the main() function that is present&lt;br&gt;inside the file main.cpp.&lt;br&gt;3. All the code you write for this assignment will only be inside the file ​a2.cpp. You should&lt;br&gt;not perform any file IO, print to stdout, or print to stderr in a2.cpp.&lt;br&gt;4. The files trim.hpp and trim.cpp are provided only to help you with trimming the&lt;br&gt;whitespaces in strings since doing so in C++ is not so easy as it’s in Java. You may read&lt;br&gt;these files to find out how to trim strings for this assignment.&lt;br&gt;5. You should use the following command to ​compile​​ your program.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;$ g++ &lt;em&gt;.cpp -std=c++11&lt;br&gt;where &lt;/em&gt;.cpp means all the .cpp files are to be compiled. You need not mention the&lt;br&gt;names of the .hpp files since they are included from within the .cpp files. The option&lt;br&gt;“-std=c++11” informs the compiler that our may contain C++11 features (e.g.&lt;br&gt;std::unordered_map was introduced only in C++11).&lt;br&gt;6. Your program takes the two files ​rawReviewRatings.txt and ​rawReviews.txt as ​command&lt;br&gt;line arguments​. ​​You should run your program as shown below:&lt;br&gt;$ ./a.out rawReviewRatings.txt rawReviews.txt&lt;br&gt;If you don’t give these 2 command line arguments to your program, then the following&lt;br&gt;error message will be printed. This error handling is already handled for you in main.cpp.&lt;br&gt;$ ./a.out&lt;br&gt;USAGE: ./a.out &lt;reviewratingsfile&gt; &lt;reviewsfile&gt;&lt;br&gt;7. If your program works correctly without any errors, then nothing is printed to the console.&lt;br&gt;Only the three output files cleanReviewRatings.txt, cleanReviews.txt and ratings.txt will&lt;br&gt;be produced. You may even try compiling and running your program before adding any&lt;br&gt;code in a2.cpp to see if these 3 output files are produced. The contents of these output&lt;br&gt;files will be empty until the methods in a2.cpp are implemented.&lt;br&gt;8. You should NOT add any new functions/methods in a2.cpp.&lt;br&gt;9. You ​SHOULD NOT MODIFY​​ any of the following in a2.cpp:&lt;br&gt;a. Names of the functions&lt;br&gt;b. Names and types of the parameters to a function.&lt;br&gt;c. Return types of the functions.&lt;br&gt;10.An approximate number of lines of code is given for each function in a2.cpp. These are&lt;br&gt;the number of lines for each function in Gerald’s implementation of a2.cpp. We have&lt;br&gt;provided this information since it may help you to see how little code you may write if you&lt;br&gt;make use of the C++ Standard Library effectively. This would help you to stop and think&lt;br&gt;for a while before you may write a lot of code by yourself and maybe later realize that&lt;br&gt;you could have used some functionality from the standard library to do the same thing&lt;br&gt;with little code and more effectively!&lt;br&gt;11.Updates to this specification that may be posted on piazza are also part of this&lt;br&gt;specification.&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;5. Grading Scheme&lt;br&gt;Item  Grade&lt;br&gt;Correctness of your code  90&lt;br&gt;Code Style (indentation) &amp;amp;&lt;br&gt;Implementation Comments in a2.cpp&lt;br&gt;10&lt;br&gt;TOTAL  100&lt;br&gt;6. Submission&lt;br&gt;Submit ​ONLY your a2.cpp​​ file at the following location:&lt;br&gt;/p/course/cs368-gerald/public/handin/&lt;cslogin&gt;/a2&lt;br&gt;Remember that ​no late work is accepted​​ in this course and there are no exceptions!&lt;br&gt;Hope you have a great time learning and coding associative containers and&lt;br&gt;algorithms using the C++ Standard Library! :)&lt;br&gt;CS 368 (C++) - Fall 2016&lt;br&gt;Adalbert ​Gerald​​ Soosai Raj&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/cslogin&gt;&lt;/reviewsfile&gt;&lt;/reviewratingsfile&gt;&lt;/string,&gt;&lt;/review&gt;&lt;/rating&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用c++完成一个关于机器学习的基础知识，使用数据结构map，功能包括数据清理，填充dictionary 训练数据，情感分析&lt;br&gt;等等，最后输出结果&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;s
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 A Simple Student Management System</title>
    <link href="http://yoursite.com/2016/12/29/page79/"/>
    <id>http://yoursite.com/2016/12/29/page79/</id>
    <published>2016-12-29T04:43:26.000Z</published>
    <updated>2017-01-12T03:53:26.077Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;完成一个简单的学生管理系统，包括增删改查学信息的功能，保存到数据库，统计和记录学生成绩&lt;br&gt;等等相关操作，输入java入门级的作业&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 1&lt;br&gt;A Simple Student Management System&lt;br&gt;Due Date : 12 noon on Friday in Week 12 (21st Oct 2016)&lt;br&gt;Introduction&lt;br&gt;This assignment is worth 25% of the marks for your final assessment in this unit. Heavy penalties will&lt;br&gt;apply for late submission. This is an individual assignment and must be entirely your own work. You must&lt;br&gt;attribute the source of any part of your code which you have not written yourself. Please note the section on&lt;br&gt;plagiarism in this document.&lt;br&gt;The assignment must be done using the BlueJ environment. All user input to the system, and system&lt;br&gt;output to the user, must be done at the BlueJ terminal window. No other graphical interfaces are to be&lt;br&gt;used (nor assessed) in your program.&lt;br&gt;The Java source code for this assignment must be implemented according to the FIT9131 Java Coding&lt;br&gt;Standards.&lt;br&gt;Any points needing clarification should be discussed with your tutor in the tutorial class. You should not&lt;br&gt;make any assumptions about the program without consulting with your tutor.&lt;br&gt;Specification&lt;br&gt;For this assignment you are required to write a program that implements a simple Student Management&lt;br&gt;System for a very small, fictional, school. This section specifies the required functionality of the program.&lt;br&gt;The aim of the Student Management System is for a user (the school’s enrolment staff) to keep a database of&lt;br&gt;the students enrolled in various subjects in this fictional school. This school only offers three (3) subjects :&lt;br&gt;Computing, Maths, and English. The system will allow the user to add/delete students, enrol them in&lt;br&gt;subjects, and perform simple reports.&lt;br&gt;Even though this program is functionally very different from the program you wrote in Assignment 1, you&lt;br&gt;should be able to re-use much of your previous code here - if you have designed the classes/logic in your&lt;br&gt;previous program properly. This is one of the major benefits of an object-oriented program - the ability to&lt;br&gt;re-use classes.&lt;br&gt;The Student Management System should provide the following features :&lt;br&gt; maintains a list (using a Java Collection class) of Student objects&lt;br&gt;o each Student object represents a person who is allowed to enrol in the fictional school&lt;br&gt; maintains a fixed list of exactly 3 Subject objects&lt;br&gt;o each Subject object represents a subject which is available in the fictional school&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 2&lt;br&gt; enrol each student in a subject, or subjects (HD level)&lt;br&gt; lists the details of an existing student&lt;br&gt; produces a report of students based on some criteria&lt;br&gt; loads a list of students (with their enrolled subjects) from a text file&lt;br&gt; saves the list of current students (with their enrolled subjects) to a text file&lt;br&gt;You are to demonstrate the following programming techniques in your program :&lt;br&gt; reading/writing data from/to text files&lt;br&gt; using appropriate Java Collection class or classes to store data&lt;br&gt; using code to manipulate the data in the collection(s)&lt;br&gt; performing simple searches, filtered by some given criteria&lt;br&gt; using program constructs such as repetitions &amp;amp; selections&lt;br&gt; using appropriate classes to represent objects in the program&lt;br&gt;There will be a description of the “HD level” features later in this document (in the Grades section).&lt;br&gt;You are also required to produce a partial Test Strategy for your program.&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 3&lt;br&gt;Program Logic&lt;br&gt;When the Student Management System starts, it should automatically load a text file called&lt;br&gt;“students.txt” which contains details of all students currently stored in the system. The actual format&lt;br&gt;of this text file is described later in this document. The data loaded should be stored in some appropriate data&lt;br&gt;structures. No other reading from or writing to file is required while the program is in operation, until the&lt;br&gt;user chooses to exit, at which point the program saves all the data in memory back to the same text file&lt;br&gt;(students.txt).&lt;br&gt;In other words, the file I/O operations are performed automatically by the program, and require no&lt;br&gt;interactions with the user.&lt;br&gt;When the program is running, it should repeatedly display a menu with these options :&lt;br&gt;(1) Add new student&lt;br&gt;(2) Delete a student&lt;br&gt;(3) Find Student By Name&lt;br&gt;(4) List Students By Subject&lt;br&gt;(5) List All Students&lt;br&gt;(6) Exit System&lt;br&gt;Option (1) allows the user to add a new student into the database. The user should be asked for the student’s&lt;br&gt;details, plus what subject to “enrol” him/her in.&lt;br&gt;Option (2) allows the user to remove an existing student from the database.&lt;br&gt;Option (3) allows the user to find an existing student in the database. The user should be asked to enter a&lt;br&gt;name to search for. If a matching student is found, his/her details will be displayed.&lt;br&gt;Option (4) allows the user to display a list of students enrolled in a subject. The user should be asked for a&lt;br&gt;subject name; a list of all students (if any) enrolled in that subject should then be displayed.&lt;br&gt;Option (5) allows the user to display a list of all students enrolled in the school.&lt;br&gt;Option (6) exits the program. All the students currently in memory are automatically saved to&lt;br&gt;“students.txt”.&lt;br&gt;Inputs other than 1-6 should be rejected, and an error message printed. The menu should be displayed&lt;br&gt;repeatedly, until the user chooses Option (6).&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 4&lt;br&gt;Important Assumptions&lt;br&gt;You should observe the following assumptions when implementing your program :&lt;br&gt; all student names are unique - if a student is already in the database, trying to add the same name&lt;br&gt;again should generate an error&lt;br&gt; there is no limit to how many students can be enrolled&lt;br&gt; exactly 3 subjects are offered : Computing, Maths and English&lt;br&gt; each student can only enrol in exactly one subject&lt;br&gt; all searches use exact matches (eg. “andy” will not match “andy cheng”); however, the search&lt;br&gt;strings are not case-sensitive (eg. “Sue Smith” is considered to be the same as “SUE smith”)&lt;br&gt; the data file is always in the correct format - ie. no need to validate the data when reading it in&lt;br&gt;Student Record Format&lt;br&gt;Each student in the database contains the following information :&lt;br&gt; Name (non-blank String, may contain multiple words)&lt;br&gt; Telephone (non-blank String, exactly 9 digits, 1st digit must be a ‘9’)&lt;br&gt; Subject (a String, representing one of the 3 subjects offered)&lt;br&gt;Input File Format&lt;br&gt;The input data file (students.txt) has the following format for each line :&lt;br&gt;Name,Telephone,Subject  (the fields are separated by commas)&lt;br&gt;Eg.&lt;br&gt;David Smith,912345678,Maths&lt;br&gt;Andy Cheng,987654321,Computing&lt;br&gt;Susan Dally,911221122,English&lt;br&gt;Zak Whatever,999999999,Maths&lt;br&gt;Russell Crowe,980808080,Computing&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 5&lt;br&gt;Program Design&lt;br&gt;Your program must demonstrate your understanding of the object-oriented concepts and general&lt;br&gt;programming constructs presented in FIT9131. You must use appropriate data structures to store the various&lt;br&gt;objects (list of students, list of subjects, etc) in the program.&lt;br&gt;You must be able to justify the choice of the data structures during your interview. You must document any&lt;br&gt;additional assumptions you made.&lt;br&gt;Validation of values for fields and local variables should also be implemented. You should not allow an&lt;br&gt;object of a class to be set to an invalid state.&lt;br&gt;Discuss with your tutor regarding what classes are appropriate, and how they interact with each other.&lt;br&gt;The main requirements are : (1) the Students and Subjects must be implemented as objects, and they must&lt;br&gt;be stored in some appropriate Java collections, and (2) for the HD level , the list of Subjects within each&lt;br&gt;Student object must also be stored in some appropriate Java collections.&lt;br&gt;Your program must deal with invalid values entered by the user in a sensible manner. For instance, if a user&lt;br&gt;enters “abc” instead of a number for the menu options, your program should not crash.&lt;br&gt;All on-screen input/output should be formatted in a user-friendly manner. Sensible error messages should be&lt;br&gt;displayed whenever appropriate (eg. when searching for a student who is not in the database, trying to enrol&lt;br&gt;student in a subject which does not exist, etc).&lt;br&gt;Grades&lt;br&gt;There are 2 possible Grade Categories for this assignment, as described below :&lt;br&gt;1) A maximum grade of up to a D (Distinction) can be achieved by correctly implementing all the&lt;br&gt;features as described in the “Program Logic” section above.&lt;br&gt;2) To achieve up to a maximum of a HD (High Distinction), you need to implement the following&lt;br&gt;additional features :&lt;br&gt; for Option (1), a student can be enrolled in up to a maximum of 3 unique subjects&lt;br&gt; for Option (4), the user can specify more than 1 subject, and the program will display all&lt;br&gt;students listed in those subjects (eg. all students enrolled in both “Computing” AND “English”,&lt;br&gt;all students enrolled in “Computing” AND “Maths” AND “English”, etc)&lt;br&gt;Note : The description of the program’s logic/design is intentionally left vague, to give you some room&lt;br&gt;to exercise your own design and creativity. Discuss with your tutor about what/how to implement.&lt;br&gt;Important : You must not attempt the HD Category until you have fully implemented the D&lt;br&gt;Category. If you submit a program which partially implements both, you will only be awarded up&lt;br&gt;to a maximum of D.&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 6&lt;br&gt;Test Strategy&lt;br&gt;For this assignment, you are required to produce a partial Test Strategy for the program.&lt;br&gt;There is no need to produce Test Strategy for any other classes you have used in your program.&lt;br&gt;You must provide a Test Plan, plus detailed sets of Test Data, Expected Results and Actual Results for the&lt;br&gt;Student class.&lt;br&gt;Assessment&lt;br&gt;Assessment for this assignment will be done via an interview with your tutor. The marks will be allocated as&lt;br&gt;follows:&lt;br&gt; Test Strategy : 10%&lt;br&gt; Java Code &amp;amp; Object-Oriented Design : 35%&lt;br&gt; Program Functionality in accordance with the requirements : 55%&lt;br&gt;You must submit your work by the submission deadline on the due date (a late penalty of 20% per day of&lt;br&gt;the possible marks will apply).&lt;br&gt;Marks will be deducted for untidy submissions and non-conformances to the FIT9131 Java Coding&lt;br&gt;Standards.&lt;br&gt;Interview&lt;br&gt;You will be asked to demonstrate your program at an interview following the submission date. At the&lt;br&gt;interview you can also expect to be asked to explain your code, your design, discuss design decisions and&lt;br&gt;alternatives and modify your code as required. Marks will not be awarded for any section of code or&lt;br&gt;functionality that a student cannot explain satisfactorily. (The marker may delete excessive comments in&lt;br&gt;code before a student is asked to explain that code).&lt;br&gt;In other words, you will be assessed on your understanding of the code, and not on the actual code itself.&lt;br&gt;Interview times will be arranged in the tutorial labs in Week 12. It is your responsibility to attend the lab and&lt;br&gt;arrange an interview time with your tutor. Any student who does not attend an interview will receive a mark&lt;br&gt;of 0 for the assignment.&lt;br&gt;The actual interviews will take place in Week 13.&lt;br&gt;Your Test Strategy will be only for one class - the Student class.&lt;br&gt;FIT9131 Semester 2 2016 Assignment 2&lt;br&gt;14 September 2016 7&lt;br&gt;Submission Requirements&lt;br&gt;The assignment must be uploaded to Moodle on or before the due date. The link to upload the assignment&lt;br&gt;will be made available in the Assignments section of the unit’s Moodle site before the submission deadline.&lt;br&gt;The submission requirements are as follows:&lt;br&gt;A .zip file uploaded to Moodle containing the following components:&lt;br&gt; the BlueJ project you created to implement your assignment. The .zip should be named with your&lt;br&gt;Student ID Number. For example, if your id is 12345678, then the file should be named&lt;br&gt;12345678_A2.zip. Do not name your file any other way.&lt;br&gt; it is your responsibility to check that your ZIP file contains all the correct files, and is not corrupted,&lt;br&gt;before you submit it. If you tutor cannot open your zip file, or if it does not contain the correct files,&lt;br&gt;you will not be assessed.&lt;br&gt; an MS Word document containing your Test Strategy for the Student class.  (Note: The JUnit facility in&lt;br&gt;BlueJ is NOT to be used for this assignment)&lt;br&gt; a completed Assignment Cover Sheet. This will be available for download from the unit’s Moodle site&lt;br&gt;before the submission deadline. You simply complete the editable sections of the document, save it, and&lt;br&gt;include it in your .zip file for submission.&lt;br&gt;Marks will be deducted for failure to comply with any of these requirements.&lt;br&gt;Warning : there will be no extensions to the due date. Any late submission will incur the 20% per day&lt;br&gt;penalty. It is strongly suggested that you submit the assignment well before the deadline, in case there are&lt;br&gt;some unexpected complications on the day (eg. interruptions to your home internet connection).&lt;br&gt;Plagiarism&lt;br&gt;Cheating and plagiarism are viewed as serious offences. In cases where cheating has been confirmed,&lt;br&gt;students have been severely penalised, from losing all marks for an assignment, to facing disciplinary action&lt;br&gt;at the Faculty level. Monash has several policies in relation to these offences and it is your responsibility to&lt;br&gt;acquaint yourself with these.&lt;br&gt;Plagiarism (&lt;a href=&quot;http://www.policy.monash.edu/policybank/academic/education/conduct/plagiarism-policy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.policy.monash.edu/policybank/academic/education/conduct/plagiarism-policy.html&lt;/a&gt;)&lt;br&gt;Discipline: Student Policy (&lt;a href=&quot;http://www.policy.monash.edu/policy-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.policy.monash.edu/policy-&lt;/a&gt;&lt;br&gt;bank/academic/education/conduct/student-discipline-policy.html&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;完成一个简单的学生管理系统，包括增删改查学信息的功能，保存到数据库，统计和记录学生成绩&lt;br&gt;等等相关操作，输入java入门级的作业&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Re
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 Programming Assignment 2  Link State Routing</title>
    <link href="http://yoursite.com/2016/12/28/page78/"/>
    <id>http://yoursite.com/2016/12/28/page78/</id>
    <published>2016-12-28T04:12:34.000Z</published>
    <updated>2017-01-12T03:49:18.869Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java的网络编程，完成状态路由协议，本题主要考察java基础，网络编程基础，设计路由协议，Dijkstra’s算法&lt;br&gt;，UDP套接字协议，动态路由等等知识，分为2个part&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;COMP 3331/9331: Computer Networks &amp;amp; Applications&lt;br&gt;Programming Assignment 2: Link State Routing&lt;br&gt;Due Date: 28 Oct 2016, 11:59 pm (Week 13) Marks: 10 + 1 bonus&lt;br&gt;1. Change Log&lt;br&gt;Version 1.0 released on 19 th September 2016.&lt;br&gt;2. Goal and Learning Objectives&lt;br&gt;In this assignment your task is to implement the link state routing protocol. Your program will be&lt;br&gt;running at all nodes in the specified network. At each node the input to your program is a set of&lt;br&gt;directly attached nodes (i.e. neighbours) and the costs of these links. Each node will broadcast&lt;br&gt;link-state packets to all other nodes in the network. Your routing program at each node should&lt;br&gt;report the least-cost path and the associated cost to all other nodes in the network. Your program&lt;br&gt;should be able to deal with failed nodes.&lt;br&gt;2.1 Learning Objectives&lt;br&gt;On completing this assignment you will gain sufficient expertise in the following skills:&lt;br&gt;• Designing a routing protocol&lt;br&gt;• Link state (Dijkstra’s) algorithm&lt;br&gt;• UDP socket programming&lt;br&gt;• Handling routing dynamics&lt;br&gt;3. Assignment Specification&lt;br&gt;This section gives detailed specifications of the assignment. You can receive 1 bonus mark for&lt;br&gt;submitting the assignment 1 week prior to the deadline.&lt;br&gt;3.1 Implementation Details&lt;br&gt;In this assignment, you will implement the link state routing protocol.&lt;br&gt;The program will accept the following command line arguments:&lt;br&gt;• NODE_ID, the ID for this node. This argument must be a single uppercase alphabet (e.g., A,&lt;br&gt;B, etc).&lt;br&gt;• NODE_PORT, the port number on which this node will send and receive packets to and from&lt;br&gt;its neighbours.&lt;br&gt;Updates to the assignment, including any corrections and clarifications, will be posted on the&lt;br&gt;subject website. Please make sure that you check the subject website regularly for updates.&lt;br&gt;• CONFIG.TXT, this file will contain the costs to the neighbouring nodes. It will also contain&lt;br&gt;the port number being used by each neighbour for exchanging routing packets. An example of&lt;br&gt;this file is provided below.&lt;br&gt;Since we can’t let you play with real network routers, the routing programs for all the nodes in the&lt;br&gt;simulated network will run on a single desktop machine. However, each instance of the routing&lt;br&gt;protocol (corresponding to each node in the network) will be listening on a different port number.&lt;br&gt;If your routing software executes correctly on a single desktop machine, it should also work&lt;br&gt;correctly on real network routers. Note that, the terms router and node are used interchangeably in&lt;br&gt;the rest of this specification.&lt;br&gt;Assume that the routing protocol is being instantiated for a node A, with two neighbours B and C.&lt;br&gt;A simple example of how the routing program would be executed (assuming it is a Java program&lt;br&gt;named Lsr.java) follows:&lt;br&gt;java Lsr A 2000 config.txt&lt;br&gt;where the config.txt would be as follows:&lt;br&gt;2&lt;br&gt;B 5 2001&lt;br&gt;C 7 2002&lt;br&gt;The first line of this file indicates the number of neighbours (NOT the total number of nodes in the&lt;br&gt;network). Following this there is one line dedicated to each neighbour. It starts with the neighbour&lt;br&gt;id, followed by the cost to reach this neighbour and finally the port number that this neighbour is&lt;br&gt;using for communication. For example, the second line in the config.txt above indicates that the&lt;br&gt;cost to neighbour B is 5 and this neighbour is using port number 2001 for receiving and&lt;br&gt;transmitting link-state packets. The node ids will be uppercase alphabets and you can assume that&lt;br&gt;there will be no more than 10 nodes in the test scenarios. However, do not make assumptions that&lt;br&gt;the node ids will necessarily start from the letter A or that they will always be in sequence. The&lt;br&gt;link costs should be floating point numbers (up to the first decimal) and the port numbers should&lt;br&gt;be integers. These three fields will be separated by a single white space between two successive&lt;br&gt;fields in each line of the configuration file. The link costs will be static and will not change once&lt;br&gt;initialised. Further, the link costs will be consistent in both directions, i.e., if the cost from A to B&lt;br&gt;is 5, then the link from B to A will also have a cost of 5. You may assume that the configuration&lt;br&gt;files used for marking will be consistent with the above description and devoid of any errors.&lt;br&gt;Important: It is worth restating that initially each node is only aware of the costs to its direct&lt;br&gt;neighbours. The nodes do not have global knowledge (i.e. information about the entire network&lt;br&gt;topology) at start-up.&lt;br&gt;The remainder of the specification is divided into two parts, beginning with the base specification&lt;br&gt;as the first part and the subsequent part adding new functionality to the base specification. In order&lt;br&gt;to receive full marks for this assignment you must implement both parts. If you are unable to&lt;br&gt;complete the second part, you will still receive marks for the first part. (The marking guidelines at&lt;br&gt;the end of the specification indicate the distribution of marks).&lt;br&gt;Part 1: Base Specification&lt;br&gt;In link-state routing, each node broadcasts link-state packets to all other nodes in the network, with&lt;br&gt;each link-state packet containing the identities of the node’s neighbours and the associated costs to&lt;br&gt;reach them. You must implement a simple broadcasting mechanism in your program. Upon&lt;br&gt;initialisation, each node creates a link-state packet (containing the appropriate information – see&lt;br&gt;description of link-state protocol in the textbook/lecture notes) and sends this packet to all direct&lt;br&gt;neighbours. The exact format of the link-state packets that you will use is left for you to decide.&lt;br&gt;Upon receiving this link-state packet, each neighbouring router in turn broadcasts this packet to its&lt;br&gt;own neighbours (excluding the router from which it received this link-state packet in the first&lt;br&gt;place). This simple flooding mechanism will ensure that each link-state packet is propagated&lt;br&gt;through the entire network.&lt;br&gt;It is possible that some nodes may start earlier than their neighbours. As a result, a node might&lt;br&gt;send the link-state packet to a neighbour, which has not run yet. You should not worry about this&lt;br&gt;since the routing program at each node will repeatedly send the link-state packet to its neighbours&lt;br&gt;and a slow-starting neighbour will eventually get the information. That said, when we test your&lt;br&gt;assignment, we would ensure that all nodes are initiated simultaneously (using a script).&lt;br&gt;Each node should periodically broadcast the link-state packet to its neighbours every&lt;br&gt;UPDATE_INTERVAL. You should set this interval to 1 second. In other words, a node should&lt;br&gt;broadcast a link state packet every second.&lt;br&gt;Real routing protocols use UDP for exchanging control packets. Hence, you MUST use UDP as&lt;br&gt;the transport protocol for exchanging link-state packets amongst the neighbours. Note that, each&lt;br&gt;router can consult its configuration file to determine the port numbers used by its neighbours for&lt;br&gt;exchanging link-state packets. Do not worry about the unreliable nature of UDP. Since, you are&lt;br&gt;simulating multiple routers on a single machine, it is highly unlikely that link-state packets will be&lt;br&gt;dropped. Furthermore, since link-state packets are broadcast periodically, occasional packet loss&lt;br&gt;will not impact the operation of your protocol. If you use TCP, a significant penalty will be&lt;br&gt;assessed.&lt;br&gt;On receiving link-state packets from all other nodes, a router can build up a global view of the&lt;br&gt;network topology. You may want to review your class notes and consult standard data structures&lt;br&gt;textbooks for standard representations of undirected graphs, which would be an appropriate way to&lt;br&gt;model this view of the network.&lt;br&gt;Given a view of the entire network topology, a router should run Dijkstra’s algorithm to compute&lt;br&gt;least-cost paths to all other routers within the network. Each node should wait for a&lt;br&gt;ROUTE_UPDATE_INTERVAL (the default value is 30 seconds) since start-up and then execute&lt;br&gt;Dijkstra’s algorithm. Given that there will be no more than 10 nodes in the network and a periodic&lt;br&gt;link-state broadcast frequency of 1 second, 30 seconds is a sufficiently long duration for each node&lt;br&gt;to discover the global view of the entire topology.&lt;br&gt;Once a router finishes running Dijkstra’s algorithm, it should print out to the terminal, the least-&lt;br&gt;cost path to each destination node (excluding itself) along with the cost of this path. The following&lt;br&gt;is an example output for node A in some arbitrary network:&lt;br&gt;least-cost path to node B: ACB and the cost is 10&lt;br&gt;least-cost path to node C: AC and the cost is 2.5&lt;br&gt;We will wait for duration of ROUTE_UPDATE_INTERVAL after running your program for the&lt;br&gt;output to appear (some extra time will be added as a buffer). If the output does not appear within&lt;br&gt;this time, you will be heavily penalised. As indicated earlier, we will restrict the size of the&lt;br&gt;network to 10 nodes in the test topologies. The default value of 30 seconds is sufficiently long for&lt;br&gt;all the nodes to receive link-state packets from every other node and compute the least-cost paths.&lt;br&gt;Your program should execute forever (as a loop). In other words, each node should keep&lt;br&gt;broadcasting link-state packets every UPDATE_INTERVAL and Dijkstra’s algorithm should be&lt;br&gt;executed and the output printed out every ROUTE_UPDATE_INTERVAL. To kill an instance of&lt;br&gt;the routing protocol, the user should type CTRL-C at the respective terminal.&lt;br&gt;Restricting Link-state Broadcasts: Note that, a naïve broadcast strategy; wherein each node&lt;br&gt;retransmits every link state packet that it receives will result in unnecessary broadcasts and thus&lt;br&gt;increase the overhead. To elaborate this issue, consider the example topology discussed in the&lt;br&gt;latter part of the spec. The link-state packet created by node A will be sent to its direct neighbours&lt;br&gt;B, C and D. Each of these three nodes will in turn broadcast this link-state packet to their&lt;br&gt;neighbours. Let us consider Node C, which broadcasts A’s link state packet to B, D, E and F. Note&lt;br&gt;that node B has already broadcast A’s link state packet once (when it received it directly from A).&lt;br&gt;Node B has now received this same link-state packet via node C. There should thus be no need for&lt;br&gt;node B to broadcast this packet again. You MUST implement a mechanism to reduce such&lt;br&gt;unnecessary broadcasts. This can be achieved in several ways. You are open to choose any method&lt;br&gt;to achieve this. You must describe your method in the written report.&lt;br&gt;Part 2: Dealing with Node Failures&lt;br&gt;In this part you must implement additional functionality in your code to deal with random node&lt;br&gt;failures. Recall that in the base assignment specification it is assumed that once all nodes are up&lt;br&gt;and running they will continue to be operational till the end when all nodes are terminated&lt;br&gt;simultaneously. In this part you must ensure that your algorithm is robust to node failures. Once a&lt;br&gt;node fails, its neighbours must quickly be able to detect this and the corresponding links to this&lt;br&gt;failed node must be removed. Further, the routing protocol should converge and the failed nodes&lt;br&gt;should be excluded from the least-cost path computations. The other nodes should no longer&lt;br&gt;compute least-cost paths to the failed nodes. Furthermore, the failed nodes should not be included&lt;br&gt;in the least-cost paths to other nodes.&lt;br&gt;A simple method that is often used to detect node failures is the use of periodic heartbeat (also&lt;br&gt;often known as keep alive) messages. A heartbeat message is a short control message, which is&lt;br&gt;periodically sent by a node to its directly connected neighbours. If a node does not receive a&lt;br&gt;certain number of consecutive hearbeat messages from one of its neighbours it can assume that&lt;br&gt;this node has failed. Note that, each node transmits a link-state packet to its immediate neighbour&lt;br&gt;every UPDATE_INTERVAL (1 second). Hence, this distance vector message could also double&lt;br&gt;up as the hearbeat message. Alternately, you may wish to make use of an explicit heartbeat&lt;br&gt;message (over UDP), which is transmitted more frequently (i.e. with a period less than 1 second)&lt;br&gt;to expedite the detection of a failed node. It is recommended that you wait till at least 3 consequent&lt;br&gt;hearbeat (or link-state) messages are not received from a neighbour before considering it to have&lt;br&gt;failed. This will ensure that if at all a UDP packet is lost then it does not hamper the operation of&lt;br&gt;your protocol.&lt;br&gt;Once a node has detected that one of its neighbours has failed, it should update its link-state packet&lt;br&gt;accordingly to reflect the change in the local topology. Eventually, via the propagation of the&lt;br&gt;updated link-state packets, other nodes in the network will become aware that the failed node is&lt;br&gt;unreachable and it will be excluded from the link-state computations (i.e. Dijkstra’s algorithm).&lt;br&gt;Once a node has failed, you may assume that it cannot be initialised again.&lt;br&gt;While marking, we will only fail a few nodes, so that a reasonable connected topology is still&lt;br&gt;maintained. Furthermore, care will be taken to ensure that the network does not get partitioned. In&lt;br&gt;a typical topology (recall that the largest topology used for testing will consist of 10 nodes), at&lt;br&gt;most 3 nodes will fail. However, note that the nodes do not have to fail simultaneously.&lt;br&gt;Recall  that  each  node  will  execute  Dijkstra’s  algorithm  periodically  after&lt;br&gt;ROUTE_UPDATE_INTERVAL (30 seconds) to compute the least-cost path to every other&lt;br&gt;destination. It may so happen that the updated link-state packets following a node failure may not&lt;br&gt;have reached certain nodes in the network before this interval expires. As a result, these nodes will&lt;br&gt;use the old topology information (prior to node failure) to compute the least-cost paths. Thus the&lt;br&gt;output at these nodes will be incorrect. This is not an error. It is just an artefact of the delay&lt;br&gt;incurred in propagating the updated link-state information. To account for this, it is necessary to&lt;br&gt;wait for at least two consecutive ROUTE_UPDATE_INTERVAL periods (i.e. 1 minute) after the&lt;br&gt;node failure is initiated. This will ensure that all the nodes are aware of the topology change.&lt;br&gt;While marking, we will wait for 2&lt;em&gt;ROUTE_UPDATE_INTERVAL following a node failure&lt;br&gt;before checking the output.&lt;br&gt;3.2. An Example&lt;br&gt;Let us look at an example with the network topology as shown in the figure below:&lt;br&gt;The numbers alongside the links indicate the link costs. The configuration files for the 6 nodes are&lt;br&gt;available for download from the assignment webpage. In the configuration files we have assumed&lt;br&gt;the following port assignments: A at 2000, B at 2001, C at 2002, D at 2003, E at 2004 and F at&lt;br&gt;2005. However note that some of these ports may be in use by another student logged on to the&lt;br&gt;same CSE machine as you. In this case, change the port assignments in all the configuration files&lt;br&gt;appropriately. The program output at node A should look like the following:&lt;br&gt;least-cost path to node B: AB and the cost is 2.0&lt;br&gt;least-cost path to node C: ADEC and the cost is 3.0&lt;br&gt;least-cost path to node D: AD and the cost is 1.0&lt;br&gt;least-cost path to node E: ADE and the cost is 2.0&lt;br&gt;least-cost path to node F: ADEF and the cost is 4.0&lt;br&gt;Note: It is not necessary that your program should print the paths to the destinations in&lt;br&gt;alphabetical order.&lt;br&gt;You may also test out the ability of your program to deal with node failures in the above example&lt;br&gt;by causing node B to fail (as an example).&lt;br&gt;Please ensure that before you submit, your program provides a similar output for the above&lt;br&gt;topology. However, we will use different network topologies in our testing.&lt;br&gt;4. Additional Notes&lt;br&gt;This is not a group assignment. You are expected to work on this individually.&lt;br&gt;How to start: Sample UDP client and server programs are available on the Week 3 lecture&lt;br&gt;material page. They are a good starting point to start your development. You will also find several&lt;br&gt;links to network programming resources on that page.&lt;br&gt;A&lt;br&gt;D&lt;br&gt;B  C&lt;br&gt;E&lt;br&gt;F&lt;br&gt;2&lt;br&gt;2&lt;br&gt;5&lt;br&gt;1&lt;br&gt;1&lt;br&gt;1&lt;br&gt;3&lt;br&gt;2&lt;br&gt;5&lt;br&gt;3&lt;br&gt;Language and Platform: You are free to use one of C, JAVA or Python to implement this&lt;br&gt;assignment. Please choose a language that you are comfortable with. The programs will be tested&lt;br&gt;on CSE Linux machines. So please make sure that your entire application runs correctly on these&lt;br&gt;machines. This is especially important if you plan to develop and test the programs on your&lt;br&gt;personal computers (which may possibly use a different OS or version or JVM). Note that CSE&lt;br&gt;machines support the following: gcc version 4.9.2, Java 1.7, Python 2.7, 2.8 and 3. Note for&lt;br&gt;Python: In your report, please indicate which version of Python you have used. You may only use&lt;br&gt;the basic socket programming APIs providing in your programming language of choice. Note that,&lt;br&gt;the network will be simulated by running multiple instances of your program on the same machine&lt;br&gt;with a different port number for each node. Make sure that your program will work appropriately&lt;br&gt;under these conditions. See the sequence of operations listed below for details.&lt;br&gt;Error Condition: Note that all the arguments supplied to the programs will be in the appropriate&lt;br&gt;format. The configuration files supplied as an argument to each node will also be consistent with&lt;br&gt;the test topology. Your programs do not have to handle errors in format, etc.&lt;br&gt;You should be aware that port ID’s, when bound to sockets, are system-wide values and thus other&lt;br&gt;students may be using the port number you are trying to use. On Linux systems, you can run the&lt;br&gt;command netstat to see which port numbers are currently assigned.&lt;br&gt;Do not worry about the reliability of UDP in your assignment. It is possible for packets to be&lt;br&gt;dropped, for example, but the chances of problems occurring in a local area network are fairly&lt;br&gt;small. If it does happen on the rare occasion, that is fine. Further, your routing protocol is&lt;br&gt;inherently robust against occasional losses since the link state packets are exchanged every 1&lt;br&gt;second. If your program appears to be losing or corrupting packets on a regular basis, then there is&lt;br&gt;likely a fault in your program.&lt;br&gt;Test your assignment out with several different topologies (besides the sample topology provided).&lt;br&gt;Make sure that your program is robust to node failures by creating several failed nodes (however&lt;br&gt;make sure that the topology is still connected). You can very easily work out the least-cost paths&lt;br&gt;manually (as shown in the lecture notes or the textbook) to verify the output of your program.&lt;br&gt;5. File Naming Convention and Assignment Submission&lt;br&gt;Your main program should be named Lsr.c (or Lsr.java or Lsr.py). You may of course have&lt;br&gt;additional header files and/or helper files. If you are using C you MUST submit a makefile/script&lt;br&gt;(not necessary with Java and Python). In addition you should submit a small report, report.pdf&lt;br&gt;(no more than 3 pages) describing the program design and a brief description of how your system&lt;br&gt;works. Describe the data structure used to represent the network topology and the link-state packet&lt;br&gt;format. Comment on how your program deals with node failures and restricts excessive link-state&lt;br&gt;broadcasts. Also discuss any design tradeoffs considered and made. Describe possible&lt;br&gt;improvements and extensions to your program and indicate how you could realise them. If your&lt;br&gt;program does not work under any particular circumstances please report this here. Also indicate&lt;br&gt;any segments of code that you have borrowed from the Web or other books.&lt;br&gt;You do not have to submit any topology files.&lt;br&gt;Here are the step-by-step instructions for submission:&lt;br&gt;1. Log in to your CSE account.&lt;br&gt;2. Create a directory called assign and copy ONLY the necessary files into that directory.&lt;br&gt;3. Tar this directory using the following command: “tar –cvf assign.tar assign”&lt;br&gt;4. Submit your assignment using the following command: “give cs3331 assign2 assign.tar”. You&lt;br&gt;should receive a confirmation of your submission.&lt;br&gt;Alternately, you may submit the tar archive via the submission link at the top of the assignment&lt;br&gt;web page.&lt;br&gt;Note that, the system will only accept assign.tar as the file name. All other names will be rejected.&lt;br&gt;You can submit as many times as you like before the deadline. A later submission will override&lt;br&gt;the previous submission, so make sure you submit the correct version. Do not wait till just before&lt;br&gt;the deadline for submission, as there may be unforeseen problems (brief disconnection of Internet&lt;br&gt;connectivity, power outage, computer crash, etc.).&lt;br&gt;Late Submission Penalty: Late penalty will be applied as follows:&lt;br&gt;• 1 day after deadline: 10% reduction&lt;br&gt;• 2 days after deadline: 20% reduction&lt;br&gt;• 3 days after deadline: 30% reduction&lt;br&gt;• 4 days after deadline: 40% reduction&lt;br&gt;• 5 or more days late: NOT accepted&lt;br&gt;NOTE: The above penalty is applied to your final total. For example, if you submit your&lt;br&gt;assignment 2 days late and your score on the assignment is 10, then your final mark will be 10 – 2&lt;br&gt;(20% penalty) = 8.&lt;br&gt;6. Plagiarism&lt;br&gt;You are to write all of the code for this assignment yourself. All source codes are subject to strict&lt;br&gt;checks for plagiarism, via highly sophisticated plagiarism detection software. These checks may&lt;br&gt;include comparison with available code from Internet sites and assignments from previous&lt;br&gt;semesters. In addition, each submission will be checked against all other submissions of the&lt;br&gt;current semester. Do not post this assignment on forums where you can pay programmers to write&lt;br&gt;code for you. We will be monitoring such forums. Please note that we take this matter quite&lt;br&gt;seriously. The LIC will decide on appropriate penalty for detected cases of plagiarism. The most&lt;br&gt;likely penalty would be to reduce the assignment mark to ZERO.&lt;br&gt;That said, we are aware that a lot of learning takes place in student conversations, and don’t wish&lt;br&gt;to discourage you from taking your classmates, provided you follow the Gilligan’s Island Rule -&lt;br&gt;After a joint discussion of an assignment or problem, each student should discard all written&lt;br&gt;material and then go do something mind-numbing for half an hour. For example, go watch an&lt;br&gt;episode of Gilligan’s Island (or Reality TV in modern terms), and then recreate the solutions. The&lt;br&gt;idea of this policy is to ensure that you fully understand the solutions or ideas that the group came&lt;br&gt;up with.&lt;br&gt;It is important, for both those helping others and those being helped, not to provide/accept any&lt;br&gt;programming language code in writing, as this is apt to be used exactly as is, and lead to&lt;br&gt;plagiarism penalties for both the supplier and the copier of the codes. Write something on a piece&lt;br&gt;of paper, by all means, but tear it up/take it away when the discussion is over. It is OK to borrow&lt;br&gt;bits and pieces of code from sample socket code out on the Web and in books. You MUST&lt;br&gt;however acknowledge the source of any borrowed code. This means providing a reference to a&lt;br&gt;book or a URL when the code appears (as comments). Also indicate in your report the portions of&lt;br&gt;your code that were borrowed. Explain any modifications you have made (if any) to the borrowed&lt;br&gt;code.&lt;br&gt;7. Forum Use&lt;br&gt;Students are strongly recommended to discuss about the assignment on the course forum.&lt;br&gt;However, at no point should any code fragments be posted to the message forum. Such actions&lt;br&gt;will be considered to be instances of plagiarism, thus incurring a significant penalty. Students are&lt;br&gt;also encouraged to share example topologies that they have created to test their program.&lt;br&gt;8. Sequence of Operation for Testing&lt;br&gt;The following shows the sequence of events that will be involved in the testing of your&lt;br&gt;assignment. Please ensure that before you submit your code you thoroughly check that your code&lt;br&gt;can execute these operations successfully.&lt;br&gt;1) First chose an arbitrary network topology (similar to the test topology above). Create the&lt;br&gt;appropriate configuration files that need to be input to the nodes. Note again that the&lt;br&gt;configuration files should only contain information about the neighbours and not of the entire&lt;br&gt;topology. Work out the least-cost paths and corresponding costs from each node to all other&lt;br&gt;destinations manually using Dijkstra’s algorithm as described in the lecture notes (or&lt;br&gt;textbook). This will allow you to check that your program is computing the paths correctly.&lt;br&gt;2) Log on to a CSE Linux machine. Open as many terminal windows as the number of nodes in&lt;br&gt;your test topology. Almost simultaneously, execute the routing protocol for each node (one&lt;br&gt;node in each terminal).&lt;br&gt;java lsr A 2000 configA.txt (for JAVA)&lt;br&gt;java lsr B 2001 configB.txt&lt;br&gt;and so on. You may write a simple script to automate this process.&lt;br&gt;3) Wait till the nodes display the output at their respective terminals.&lt;br&gt;4) Compare the displayed paths and costs to the ones obtained in step 1 above. These should be&lt;br&gt;consistent.&lt;br&gt;5) The next step involves testing the capability of your program to deal with failed nodes. For this&lt;br&gt;choose a few nodes (max of 3 nodes) from the topology that is currently being tested (in the&lt;br&gt;above tests) and terminate the nodes by typing CTRL-C in their respective terminal windows.&lt;br&gt;Make sure that the nodes chosen for termination do not partition the network. Work out the&lt;br&gt;least-cost paths from each node to all other destinations manually using Dijkstra’s algorithm as&lt;br&gt;described  in  the  lecture  notes  (or  textbook).  Wait  for  a  duration  of&lt;br&gt;2&lt;/em&gt;ROUTE_UPDATE_INTERVAL and observe the updated output at each node. Corroborate&lt;br&gt;the results with the manual computations.&lt;br&gt;6) Terminate all nodes.&lt;br&gt;NOTE: We will ensure that your programs are tested multiple times to account for any possible&lt;br&gt;UDP segment losses (it is quite unlikely that your routing packets will be dropped).&lt;br&gt;9. Marking Policy:&lt;br&gt;We will test your routing protocol for at least 2 different network topologies (which will be&lt;br&gt;distinct from the example provided). Marks will be deducted if necessary, depending on the extent&lt;br&gt;of the errors observed in the output at each node. After the marking process we will upload the test&lt;br&gt;topologies on the website for all students to view.&lt;br&gt;Your code will be marked using the following criteria:&lt;br&gt;• Mechanism to restrict link-state broadcasts: 1 marks&lt;br&gt;• Correct operation of the link state protocol: 5.5 marks&lt;br&gt;• Appropriate handling of dead nodes, whereby the least-cost paths are updated to reflect the&lt;br&gt;change in topology: 2.5 marks&lt;br&gt;• Report: 1 mark&lt;br&gt;Bonus Mark: You may receive 1 bonus mark for submitting the assignment a week before the&lt;br&gt;deadline, i.e. by 21 st October 2016 (Week 12). However, to receive the bonus mark, in addition&lt;br&gt;to submitting by the early deadline, your code should have scored at least 7 marks (out of 10) as&lt;br&gt;per the above criteria. The bonus mark can be used to offset lost marks in any assessable&lt;br&gt;component in this course (e.g. mid-semester exam, final exam, labs, etc.).&lt;br&gt;IMPORTANT NOTE: For assignments that fail to execute all of the above tests, we will be&lt;br&gt;unable to award you a substantial mark. Note that, we will test your code multiple times before&lt;br&gt;concluding that there is a problem. You should test your program rigorously and verify the results&lt;br&gt;by trying out different topologies before submitting your code.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;java的网络编程，完成状态路由协议，本题主要考察java基础，网络编程基础，设计路由协议，Dijkstra’s算法&lt;br&gt;，UDP套接字协议，动态路由等等知识，分为2个par
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="Network" scheme="http://yoursite.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>C++代写 CS1073  Data Structures and Algorithms</title>
    <link href="http://yoursite.com/2016/12/27/page77/"/>
    <id>http://yoursite.com/2016/12/27/page77/</id>
    <published>2016-12-27T04:14:52.000Z</published>
    <updated>2017-01-12T03:43:02.129Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;本题是实现一个五子棋的游戏，给了部分模板代码，完成五子棋的游戏逻辑，主要考察c++的基础知识和OOP的设计能力，还有数据结构和算法&lt;br&gt;共分了4个task，难度逐渐递增，然后需要通过自动测试&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CompSys202/MechEng270&lt;br&gt;Data Structures and Algorithms&lt;br&gt;Assignment #3 (20% of final grade)&lt;br&gt;Due: 11:00am, 21 October 2016&lt;br&gt;Learning outcomes&lt;br&gt;The purpose of this assignment is to target the following learning outcomes:&lt;br&gt;• Demonstrate a basic understanding of C++ development.&lt;br&gt;• Continue to develop and practice your skills in OOP design.&lt;br&gt;• Practice using data structures and algorithms effectively.&lt;br&gt;• Apply good coding practices such as naming conventions and code style.&lt;br&gt;1 Connect Four!&lt;br&gt;The game of Connect Four is described by Wikipedia as follows:&lt;br&gt;[Connect Four] is a two-player connection game in which the players first choose a color and then take turns&lt;br&gt;dropping colored discs from the top into a seven-column, six-row vertically suspended grid. The pieces fall&lt;br&gt;straight down, occupying the next available space within the column. The objective of the game is to connect&lt;br&gt;four of one’s own discs of the same color next to each other vertically, horizontally, or diagonally before your&lt;br&gt;opponent.&lt;br&gt;In this assignment you will construct a simple game of Connect Four. This game will be played between two human&lt;br&gt;players, and will be played until one player wins or a stalemate is reached. A simple demonstration of the Connect&lt;br&gt;Four game is displayed in figure 1.&lt;br&gt;2 Tasks&lt;br&gt;2.1 Player Information [Task 1] (15%)&lt;br&gt;2.1.1 Implement the Player Class&lt;br&gt;The Player class will store information about each player such as their name and color. A player has three&lt;br&gt;properties:&lt;br&gt;• The player’s name, e.g. “Nick”.&lt;br&gt;• The player’s score.&lt;br&gt;• The total number of games won by the player.&lt;br&gt;The player’s name can only be set in the constructor, while the score should be initialized to 0 and can only be&lt;br&gt;increased by 1 or reset using the methods of the Player class. The total number of games won by a player is&lt;br&gt;initialized to zero when the Player is constructed, and then can only be increased by 1.&lt;br&gt;Complete the implementation of the Player class as described in the file Player.hpp by adding code to Player.cpp.&lt;br&gt;1&lt;br&gt;(a) The game is created&lt;br&gt;with a standard 6 row by&lt;br&gt;7 column grid. At the be-&lt;br&gt;ginning of the game the&lt;br&gt;game grid is empty. The&lt;br&gt;top row of the grid is row&lt;br&gt;0 and the left-most col-&lt;br&gt;umn is column 0.&lt;br&gt;(b) The game starts with&lt;br&gt;player one’s turn. In this&lt;br&gt;case player one has in-&lt;br&gt;serted a disc (red) into&lt;br&gt;column 3. The disc falls&lt;br&gt;to the bottom of the grid&lt;br&gt;and stops at row 5.&lt;br&gt;(c) Player two plays their&lt;br&gt;first turn by inserting a&lt;br&gt;yellow disc into column&lt;br&gt;2. The disc falls to the&lt;br&gt;bottom of the grid to&lt;br&gt;come to rest next to the&lt;br&gt;disc placed by player one.&lt;br&gt;(d) Player one plays their&lt;br&gt;next move, placing a red&lt;br&gt;disc in column 4.&lt;br&gt;(e) Player two plays their&lt;br&gt;next move, inserting a&lt;br&gt;yellow disc in column 3.&lt;br&gt;This disc falls towards&lt;br&gt;the bottom of the grid&lt;br&gt;and stops at row 4, where&lt;br&gt;it is stacked on top of the&lt;br&gt;first disc placed by player&lt;br&gt;one.&lt;br&gt;(f) Player one plays their&lt;br&gt;next move, inserting a&lt;br&gt;second red disc into col-&lt;br&gt;umn 4. This disc falls to-&lt;br&gt;wards the bottom of the&lt;br&gt;grid, stacking on top of&lt;br&gt;a previously placed red&lt;br&gt;disc.&lt;br&gt;(g) Player two plays their&lt;br&gt;third move, inserting a&lt;br&gt;yellow disc into column&lt;br&gt;3, where it comes to rest&lt;br&gt;in row 3 on top of two&lt;br&gt;other discs already in-&lt;br&gt;serted into that column.&lt;br&gt;(h) Player one plays their&lt;br&gt;fourth move, inserting a&lt;br&gt;red disc in column 5 that&lt;br&gt;falls to the bottom of the&lt;br&gt;grid (row 5).&lt;br&gt;(i) Player two plays their&lt;br&gt;fourth move by inserting&lt;br&gt;a yellow disc into column&lt;br&gt;4 which stops at row 3&lt;br&gt;due to other discs previ-&lt;br&gt;ously inserted into that&lt;br&gt;column.&lt;br&gt;(j) Player one plays their&lt;br&gt;fifth move, inserting a&lt;br&gt;disc into column 6. This&lt;br&gt;disc falls to the bottom&lt;br&gt;row (row 5) and com-&lt;br&gt;pletes a horizontal row of&lt;br&gt;four red discs. Connect&lt;br&gt;four! Player one wins!&lt;br&gt;Figure 1: A demonstration of the Connect Four game in action.&lt;br&gt;2.1.2 Testing the Player Class&lt;br&gt;Testing code in this assignment works in a similar way to Assignments 1 and 2. When you are ready to test your&lt;br&gt;code, you can compile and run the tests by executing the command make test from the command-line console.&lt;br&gt;The tests for the Player class are already enabled in test.cpp.&lt;br&gt;If you need further information on how to test your code, refer to the testing sections of the assignment briefs&lt;br&gt;for assignments 1 and 2.&lt;br&gt;2.2 Tracking Player Moves [Task 2] (20%)&lt;br&gt;2.2.1 Implement the Grid Class&lt;br&gt;The Grid class is represents the vertically suspended grid into which players insert their colored discs. Each cell&lt;br&gt;of the grid can be represented by a value from the Cell enum declared inside the Grid class. Each cell will either&lt;br&gt;be empty, or hold a disc inserted by one of the two players. The number of cells is determined by the number of&lt;br&gt;rows and columns in the grid, and your Grid class constructor should allow the creation of a game Grid with any&lt;br&gt;size greater than 4 rows by 4 columns. In the case where one of the initialized dimensions is smaller than 4, that&lt;br&gt;dimension should be modified to be exactly 4. For example, if a grid is initialized with 2 rows and 6 columns, it&lt;br&gt;should be automatically corrected to 4 rows and 6 columns inside the Grid constructor.&lt;br&gt;During a game, discs may be inserted into the Grid by either player using the insertDisc method, which takes&lt;br&gt;a Cell value representing the new disc and a column of the grid that the disc should be inserted into. When a disc&lt;br&gt;is inserted into the grid it should be inserted on top of the other discs in the grid, or at the bottom of the grid if&lt;br&gt;there are no other discs in that column. This emulates the physical effect of inserting the disc into the grid in a&lt;br&gt;physical game of Connect Four.&lt;br&gt;To implement the game, other classes will need to be able to access elements in the grid. This information will&lt;br&gt;be accessed using the public cellAt method, which returns a value from the Grid given a specific row and column.&lt;br&gt;This method should return GC_EMPTY for any row or column outside the bounds of the grid. The bounds of the grid&lt;br&gt;2&lt;br&gt;will be returned by the rowCount and columnCount methods.&lt;br&gt;Once the game is over, the game grid needs to be emptied of all inserted player discs so a new game can be&lt;br&gt;started. In the Grid class this is done using the reset method.&lt;br&gt;Complete the implementation for the Grid class in Grid.cpp based on the declarations already created for you&lt;br&gt;in Grid.hpp. Make sure to read the comments above the class and each method in the class for more information&lt;br&gt;on how to implement them properly.&lt;br&gt;2.2.2 Testing the Grid Class&lt;br&gt;The tests for the Grid class can be enabled by uncommenting the following line at the top of test.cpp:&lt;br&gt;// #define ENABLE_T2_TESTS&lt;br&gt;Once the Task 2 tests are enabled, run make test to execute all of the currently enabled tests. Remember that&lt;br&gt;not all aspects of the Grid class may be tested in the tests you have been given, so don’t assume the task is&lt;br&gt;complete once all of the tests pass.&lt;br&gt;2.3 Creating a Connect Four Game [Task 3] (30%)&lt;br&gt;2.3.1 Implement the Game Class&lt;br&gt;The Game class composes the Grid class, aggregates multiple instances of the Player class together and performs&lt;br&gt;the game logic. A game is created using the default constructor for the Game class. The Game’s status method will&lt;br&gt;return GS_INVALID until two Players are assigned to the Game using the setPlayerOne and setPlayerTwo methods&lt;br&gt;and a Grid is assigned using the setGrid method.&lt;br&gt;The game will be executed one turn at a time using the playNextTurn method, with the nextPlayer method&lt;br&gt;providing (read-only) information about which player’s turn it is next. Once the game is complete, the status&lt;br&gt;method will return GS_COMPLETE, and return the winning player via the winner method. Note that if the game is a&lt;br&gt;draw, the winner method will return a null pointer (0), but the Game’s status will still be GS_COMPLETE. If a new&lt;br&gt;game is requested, the state of the current game can be cleared using the restart method.&lt;br&gt;You will need to create code to calculate the status of the game by traversing the grid and identifying 4 or more&lt;br&gt;discs from the same player in a row in any vertical, horizontal or diagonal orientation. Once one player gets at&lt;br&gt;least 4 discs in a row in any direction, they win the game. When a player wins the game, the Game state should&lt;br&gt;be updated accordingly so that the game status is set to GS_COMPLETE and the corresponding Player is returned&lt;br&gt;via the winner method. When a Player wins a game, their score and total number of wins should be increased by&lt;br&gt;1 using the appropriate methods of the Player class (a tie does not count as a win for either player). When the&lt;br&gt;game is restarted (using the restart method), each Player’s score should be reset. The possible directions discs&lt;br&gt;can be connected in to win the game are shown in figure 2 below.&lt;br&gt;(a) A vertical connect-four&lt;br&gt;for the red player (player&lt;br&gt;one).&lt;br&gt;(b) A horizontal connect-&lt;br&gt;four for the red player&lt;br&gt;(player one).&lt;br&gt;(c) A diagonal-up connect-&lt;br&gt;four for the red player&lt;br&gt;(player one).&lt;br&gt;(d) A diagonal-down&lt;br&gt;connect-four for the yellow&lt;br&gt;player (player two).&lt;br&gt;Figure 2: Completed games showing a winning combination in each possible direction. The winning combination&lt;br&gt;of discs has been highlighted in each example.&lt;br&gt;Complete the implementation for the Game class in Game.cpp based on the declarations already created for you&lt;br&gt;in Game.hpp. Make sure to read the comments above the class and each method in the class for more information&lt;br&gt;on how to implement them properly.&lt;br&gt;2.3.2 Testing the Game Class&lt;br&gt;The tests for the Game class can be enabled by uncommenting the following line at the top of test.cpp:&lt;br&gt;3&lt;br&gt;// #define ENABLE_T3_TESTS&lt;br&gt;Once the Task 3 tests are enabled, run make test to execute all of the currently enabled tests. Remember that&lt;br&gt;not all aspects of the Game class may be tested in the tests you have been given, so don’t assume the task is&lt;br&gt;complete once all of the tests pass.&lt;br&gt;2.4 Super Connect Four [Task 4] (15%)&lt;br&gt;In this task you will implement a variant of the classic Connect Four game we will call “Super Connect Four”. In&lt;br&gt;this variant of the game when a player connects four or more discs in a row, those discs will be removed from the&lt;br&gt;grid. This will cause any discs above the removed discs to move down to fill the space in the grid left by the removal&lt;br&gt;of the connected discs. One point will be added to the score of the player who connected the discs. If another line&lt;br&gt;of four or more discs belonging to one player exists after all affected discs have been moved, then this process is&lt;br&gt;repeated. This process continues until the grid reaches a stable state where no more lines of four discs exist and no&lt;br&gt;more cells need to be moved. One turn of such a game is demonstrated in figure 3.&lt;br&gt;(a) The initial game&lt;br&gt;board state for this&lt;br&gt;example. Both&lt;br&gt;players have already&lt;br&gt;made several moves.&lt;br&gt;(b) Player two plays&lt;br&gt;the next move, form-&lt;br&gt;ing a chain of four&lt;br&gt;discs horizontally in&lt;br&gt;row 3. Player two’s&lt;br&gt;score is increased by&lt;br&gt;1.&lt;br&gt;(c) The connected&lt;br&gt;discs are removed&lt;br&gt;from the game grid,&lt;br&gt;leaving blank spaces&lt;br&gt;in the grid.&lt;br&gt;(d) The remaining&lt;br&gt;discs above the ones&lt;br&gt;that were removed&lt;br&gt;are moved down&lt;br&gt;vertically to fill&lt;br&gt;the empty space in&lt;br&gt;the grid. Moving&lt;br&gt;the discs forms two&lt;br&gt;new chains of discs&lt;br&gt;belonging to player&lt;br&gt;one.&lt;br&gt;(e) The grid is&lt;br&gt;scanned, and two&lt;br&gt;new chains belong-&lt;br&gt;ing to player one are&lt;br&gt;found. Player one’s&lt;br&gt;score is increased by&lt;br&gt;1 and the discs are&lt;br&gt;removed from the&lt;br&gt;grid.&lt;br&gt;(f) The disc that was&lt;br&gt;above the removed&lt;br&gt;discs is moved to&lt;br&gt;the bottom of the&lt;br&gt;grid. The grid is re-&lt;br&gt;scanned but no new&lt;br&gt;chains of discs have&lt;br&gt;been formed and no&lt;br&gt;discs need to be&lt;br&gt;moved down. Player&lt;br&gt;two’s turn ends.&lt;br&gt;Figure 3: A demonstration of one turn in the “Super Connect Four” game.&lt;br&gt;The process for each turn of the game should be as follows:&lt;br&gt;1. Make the player’s move by inserting their token into the grid.&lt;br&gt;2. Check to see if any chains of 4 or more discs in any direction have been formed.&lt;br&gt;3. Increase the score by 1 for any players whose discs have formed chains of 4 or more. Each player’s score may&lt;br&gt;only increase by 1 each time the grid is checked (even if players get multiple simultaneous chains in a single&lt;br&gt;check).&lt;br&gt;4. Remove all discs in all chains from the grid.&lt;br&gt;5. Fill all spaces in the grid created in the previous step by moving the discs above the spaces down.&lt;br&gt;6. Repeat from step 2 until no more chains of discs are found and the grid has reached a stable state.&lt;br&gt;Make sure that disc the disc removal and movement steps are fully completed before the grid is re-scanned. Failing&lt;br&gt;to do so may cause additional matches while the grid is still between stable states. This is important for scenarios&lt;br&gt;such as those shown in figure 4 and figure 5.&lt;br&gt;Just as in normal Connect Four, players take alternating turns until the game is complete. This game will end&lt;br&gt;once there is no more space in the grid for either player to insert discs. The winner is the player with the highest&lt;br&gt;score at the end of the game.&lt;br&gt;4&lt;br&gt;(a) The initial game&lt;br&gt;board state for this ex-&lt;br&gt;ample. Both players&lt;br&gt;have already made sev-&lt;br&gt;eral moves.&lt;br&gt;(b) Player one plays the&lt;br&gt;next move, forming a&lt;br&gt;chain of four discs hori-&lt;br&gt;zontally in row 2 as well&lt;br&gt;as a diagonal chain of&lt;br&gt;four discs. Player one’s&lt;br&gt;score is increased by 1.&lt;br&gt;(c) The connected discs&lt;br&gt;are removed from the&lt;br&gt;game grid, leaving blank&lt;br&gt;spaces in the grid.&lt;br&gt;(d) The remaining discs&lt;br&gt;above the ones that&lt;br&gt;were removed are moved&lt;br&gt;down vertically to fill the&lt;br&gt;empty space in the grid.&lt;br&gt;The grid is stable, so&lt;br&gt;this is the end of player&lt;br&gt;one’s turn.&lt;br&gt;Figure 4: A demonstration of a turn in the “Super Connect Four” game where multiple chains of discs are formed&lt;br&gt;for a player in the same move.&lt;br&gt;(a) The initial game&lt;br&gt;board state for this ex-&lt;br&gt;ample. Both players&lt;br&gt;have already made sev-&lt;br&gt;eral moves.&lt;br&gt;(b) Player one plays the&lt;br&gt;next move, forming a&lt;br&gt;chain of four discs hori-&lt;br&gt;zontally in row 5. Player&lt;br&gt;one’s score is increased&lt;br&gt;by 1.&lt;br&gt;(c) The connected discs&lt;br&gt;are removed from the&lt;br&gt;game grid, leaving blank&lt;br&gt;spaces in the grid.&lt;br&gt;(d) The remaining discs&lt;br&gt;above the ones that&lt;br&gt;were removed are moved&lt;br&gt;down vertically to fill the&lt;br&gt;empty space in the grid.&lt;br&gt;Moving the discs forms&lt;br&gt;new chains of discs for&lt;br&gt;both players.&lt;br&gt;(e) The grid is scanned,&lt;br&gt;and new chains belong-&lt;br&gt;ing to both players are&lt;br&gt;found. Both player’s&lt;br&gt;scores are increased by&lt;br&gt;1 and the discs are re-&lt;br&gt;moved from the grid.&lt;br&gt;There are no more discs&lt;br&gt;to move down. Player&lt;br&gt;one’s turn ends.&lt;br&gt;Figure 5: A more complex example of the behavior of the “Super Connect Four” game.&lt;br&gt;2.4.1 Implement the SuperGame class&lt;br&gt;Implement the SuperGame class in SuperGame.hpp and SuperGame.cpp by deriving from the Game class, therefore&lt;br&gt;reducing the amount of code you need to write by inheriting some of the functionality of the Game class. The&lt;br&gt;SuperGame class should use the interface defined by the Game class so that it can be substituted in place of the Game&lt;br&gt;class to provide a new game experience with the same user interfaces.&lt;br&gt;The scoring for the SuperGame is different to the original Game class. When a player gets a chain of four discs&lt;br&gt;their score still increases by 1. However, the game does not end until the game grid has been filled, so the “winner”&lt;br&gt;of the game is determined by the Player with the highest score once the game grid has been filled and no more&lt;br&gt;moves can be played. Once the game is over the winner has their win counter increased by 1. Both player’s scores&lt;br&gt;are still reset when the game is restarted.&lt;br&gt;2.4.2 Testing the SuperGame class&lt;br&gt;The tests for the SuperGame class can be enabled by uncommenting the following line at the top of test.cpp:&lt;br&gt;// #define ENABLE_T4_TESTS&lt;br&gt;Once the Task 4 tests are enabled, run make test to execute all of the currently enabled tests. Remember that&lt;br&gt;not all aspects of the SuperGame class may be tested in the tests you have been given, so don’t assume the task&lt;br&gt;is complete once all of the tests pass.&lt;br&gt;You have also been given a command-line interface (main.cpp) which can be used for advanced testing of your&lt;br&gt;5&lt;br&gt;code by playing a Connect Four or Super Connect Four game. To build and run the command-line interface, use&lt;br&gt;the command make run from the command-line console.&lt;br&gt;You may share any tests you write for this assignment with classmates on Piazza.&lt;br&gt;2.5 Code Inspection (20%)&lt;br&gt;Your code will be inspected for:&lt;br&gt;• Effective use of OOP&lt;br&gt;• Consistent coding style&lt;br&gt;• Code commenting&lt;br&gt;• Memory management&lt;br&gt;Marks will be allocated for each by your marker.&lt;br&gt;Important: how your code will be marked&lt;br&gt;• Your code will be marked using a semi-automated setup. If you fail to follow the setup given, your code will&lt;br&gt;not be marked. All submitted files must compile without requiring any editing. Use the provided tests and&lt;br&gt;Makefile to ensure your code compiles and runs without errors on the university Ubuntu lab PCs. Any tests&lt;br&gt;that run for longer than 10 seconds will be terminated and will be recorded as failed.&lt;br&gt;• Although you may add more to them (e.g. member variables, #include statements, or helper functions), you&lt;br&gt;must not modify the existing interface of classes defined in the following files (e.g. do not delete or modify&lt;br&gt;the existing functions declared):&lt;br&gt;– ConnectFour/Player.hpp&lt;br&gt;– ConnectFour/Grid.hpp&lt;br&gt;– ConnectFour/Game.hpp&lt;br&gt;• Do not move any existing code from the ConnectFour directory, and make sure all of your new code files are&lt;br&gt;created inside the ConnectFour directory.&lt;br&gt;• You may modify test.cpp as you please (for your own testing purposes); this file will not be marked at all.&lt;br&gt;Be aware that your code must still work with the original test.cpp. Do not change the location of this file.&lt;br&gt;You are free to share any additional tests you create with classmates on Piazza.&lt;br&gt;• Your code will also be inspected for good programming practices, particularly using good object-oriented&lt;br&gt;principles. Think about naming conventions for variables and functions you declare. Make sure you comment&lt;br&gt;your code where necessary to help the marker understand why you wrote a piece of code a specific way, or&lt;br&gt;what the code is supposed to do. Use consistent indentation and brace placement.&lt;br&gt;Submission&lt;br&gt;You will submit via Canvas. Make sure you can get your code compiled and running with test.cpp (make test) on&lt;br&gt;the university Ubuntu computers. Submit the following, in a single ZIP archive file:&lt;br&gt;• A signed and dated declaration stating that you worked on the assignment independently, and that it is&lt;br&gt;your own work. Include your name, ID number, the date, the course and assignment number. You can find&lt;br&gt;this Cover Sheet on Canvas. All code will be checked against other submissions. Submissions detected as&lt;br&gt;being similar to others will ensure that the students involved are forwarded to the Misconduct Committee.&lt;br&gt;• The entire contents of the src_for_students folder you were given at the start of the assignment, including&lt;br&gt;the new code you have written for this assignment. Ensure you execute make clean before zipping the&lt;br&gt;folder so your submission doesn’t include any executable files (your code will be re-built for marking).&lt;br&gt;6&lt;br&gt;Academic honesty&lt;br&gt;• The work done on this assignment must be your own work. Think carefully about any problems you come&lt;br&gt;across, and try to solve them yourself before you ask anyone for help. Under no circumstances should you&lt;br&gt;take or pay for an electronic copy of someone else’s work.&lt;br&gt;• All submitted code will be checked using software similarity tools. Submissions with suspicious similarity will&lt;br&gt;result in an Investigative Meeting and will be forwarded to the Disciplinary Committee.&lt;br&gt;• Penalties for copying will be severe – to avoid being caught copying, don’t do it.&lt;br&gt;• To ensure you are not identified as cheating you should follow these points:&lt;br&gt;– Always do individual assignments by yourself.&lt;br&gt;– Never show or give another person your code.&lt;br&gt;– Never put your code in a public place (e.g. Reddit, Github, forums, your website).&lt;br&gt;– Never leave your computer unattended. You are responsible for the security of your account.&lt;br&gt;– Ensure you always remove your USB flash drive from the computer before you log off.&lt;br&gt;Late submissions&lt;br&gt;Late submissions incur the following penalties:&lt;br&gt;• 15% penalty for zero to 24 hours late&lt;br&gt;• 30% penalty for 25 to 48 hours late&lt;br&gt;• 100% penalty for over 48 hours late&lt;br&gt;You must double check that you have uploaded the correct code for marking! There will be no exceptions&lt;br&gt;if you accidentally submitted the wrong files, regardless of whether you can prove you did not modify them since&lt;br&gt;the deadline. No exceptions.&lt;br&gt;7&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;本题是实现一个五子棋的游戏，给了部分模板代码，完成五子棋的游戏逻辑，主要考察c++的基础知识和OOP的设计能力，还有数据结构和算法&lt;br&gt;共分了4个task，难度逐渐递增，然后
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写 CS1073  Assignment 3</title>
    <link href="http://yoursite.com/2016/12/26/page76/"/>
    <id>http://yoursite.com/2016/12/26/page76/</id>
    <published>2016-12-26T05:24:42.000Z</published>
    <updated>2017-01-12T03:35:44.034Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;总共有2个part，第一个part是完成client类的机构methods方法，然后在main函数测试，主要考察java基础能力和单元测试&lt;br&gt;part2是完成3个类。重复使用client类，然后新家一个 Book class和BookStore class。类似一个book管理系统，比part1稍微工作&lt;br&gt;量多一些，也输入java入门知识&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS1073  Assignment 3  Due: 8:30am October 4, 2016 in the Lab or any&lt;br&gt;time prior to 8:15am in the assignment bin.&lt;br&gt;Part 1. Write a program to implement a class called Client that contains the values: name,discount and cumulative&lt;br&gt;purchase amount. Supply an appropriate constructor and methods as described below:&lt;br&gt;•  getName: returns the clients name&lt;br&gt;•  addPurchase: accepts the current purchase amount as a parameter and adds it to the cumulative purchase&lt;br&gt;amount&lt;br&gt;•  getPurchase: returns the cumulative purchase amount&lt;br&gt;•  setDiscount: sets the client’s discount to a specified percentage&lt;br&gt;•  getDiscount: returns the client’s discount&lt;br&gt;•  resetClient: resets the discount percentage and the cumulative purchase amount of the client to zero&lt;br&gt;•  The constructor: accepts one parameter (name) and sets the discount and cumulative amount to zero.&lt;br&gt;Write a main method in a driver class called TestClient to test the Client class. It should have the following functionality:&lt;br&gt;•  Prompt the user for the name of the client and create the client (set the client’s discount and cumulative&lt;br&gt;purchase amount to zero).&lt;br&gt;•  Prompt the user for a discount percentage for the client and update the client’s discount. Read the discount&lt;br&gt;percentage as an integer.&lt;br&gt;•  The client makes a purchase. Prompt the user for the total amount of the current purchase before her/his&lt;br&gt;discount. Apply the client’s discount to the purchase amount. Remember that the client’s discount has been&lt;br&gt;stored as an integer, so to use it as a percentage you need to divide it by 100.00.&lt;br&gt;•  Print the total amount to be paid by the client after her/his discount.&lt;br&gt;•  Update the cumulative purchase amount of the client by adding the purchase amount after applying the&lt;br&gt;discount.&lt;br&gt;•  The client gets a new discount for being a good client. Prompt the user for the new discount, and update it in&lt;br&gt;the client’s information.&lt;br&gt;•  The client makes another purchase. Prompt the user for the total amount of the current purchase before&lt;br&gt;discount. Apply the client’s discount and print the total to be paid after the discount.&lt;br&gt;•  Update the client’s cumulative purchase amount by adding the total payment after discount,&lt;br&gt;•  Print the client’s information (name, discount, cumulative purchase).&lt;br&gt;•  The store is starting a new selling season, the Christmas season. For this season reset the percentage discount&lt;br&gt;and cumulative purchase amount to zero. Print the client’s information (name, discount, cumulative purchase).&lt;br&gt;•  Test your program for a client named Monique Levesque. She initially gets a 5% discount. In her first purchase,&lt;br&gt;she spends $245.99 before any discount. Her new discount for being a good client is 25%. She makes another&lt;br&gt;purchase of $60.00 before any discount.&lt;br&gt;Print all amounts rounded to two decimal places.&lt;br&gt;Part 2 In this part of the assignment you are going to use three classes. You are going to reuse the Client class that you&lt;br&gt;implemented above, and implement two new classes: a Book class and a BookStore class. The BookStore class is the&lt;br&gt;driver class for the Client and Book classes.&lt;br&gt;For the implementation of the Book class use the following guidelines. A book has a title, a price, and a discount. There&lt;br&gt;are four methods (getTitle. getPrice. setPrice. getDiscount) as well as two constructors as described below:&lt;br&gt;•  getTitle: returns the title of the book.&lt;br&gt;•  getPrice: returns the current price of the book.&lt;br&gt;•  setPrice: changes the price to a specified amount.&lt;br&gt;•  getDiscount: returns the current discount for the book.&lt;br&gt;First constructor: accepts two parameters (title and price) and sets the title and price while setting the discount&lt;br&gt;percentage to 0% (i.e. this book has no discount).&lt;br&gt;Second constructor: accepts three parameters (title. price and the discount percentage) and sets them all accordingly.&lt;br&gt;Write the BookStore class that uses the Client and Book classes. The main method of the BookStore class should have&lt;br&gt;the following functionality:&lt;br&gt;•  Prompt the user for the first book (Title: HTML for the World Wide Web, Price: 24.95, Percentage Discount: 5%)&lt;br&gt;and create the corresponding book object.&lt;br&gt;•  Read the discount percentage as an integer.&lt;br&gt;•  Prompt the user for the second book (Title: Operating Systems. Price: 69.95). Do not prompt for the percentage&lt;br&gt;discount; let the class initialize it for you. Create the corresponding book object.&lt;br&gt;•  Change the price of the HTML book to $30.00.&lt;br&gt;•  Now create a client: Andrea Smith.&lt;br&gt;•  Set Andrea’s percentage discount to 15%.&lt;br&gt;•  Andrea buys the two books mentioned above. Print an invoice for Andrea. Obtain the cost of each book after&lt;br&gt;applying the individual book discount. Then. apply the client’s discount to the total cost of the books. Remember&lt;br&gt;that the discount values are integers and you have to divide them by 100.00 when you need to use them as a&lt;br&gt;percentage. The format of the invoice should be as follows&lt;br&gt;Andrea Smith&lt;br&gt;$ 28.50 HTML for the World Wide Web&lt;br&gt;$ 69.95 Operating Systems&lt;br&gt;————–&lt;br&gt;$ 98.45 subtotal&lt;br&gt;$ 14.77 Client’s Discount&lt;br&gt;————&lt;br&gt;$ 83.68 Total&lt;br&gt;•  Update Andrea’s client information with the cumulative purchase amount.&lt;br&gt;•  Print Andrea’s information (name, discount, cumulative purchase).&lt;br&gt;•  Print all amounts rounded to two decimal places.&lt;br&gt;Summary:&lt;br&gt;You will have 2 class files: Client &amp;amp; Book&lt;br&gt;You will have 2 driver files: TestClient &amp;amp; Bookstore&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;总共有2个part，第一个part是完成client类的机构methods方法，然后在main函数测试，主要考察java基础能力和单元测试&lt;br&gt;part2是完成3个类。重复使
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C代写 Assignment 3</title>
    <link href="http://yoursite.com/2016/12/25/page75/"/>
    <id>http://yoursite.com/2016/12/25/page75/</id>
    <published>2016-12-25T04:14:42.000Z</published>
    <updated>2017-01-12T03:30:48.942Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c语言实现还一个Nim的游戏，需要使用很多数据结构，trees, linked-lists, and stack等等完成人机对战版本&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;1/4&lt;br&gt;KIT107 Programming  2016&lt;br&gt;Assignment 3&lt;br&gt;Due Date&lt;br&gt;The assignment is due at 3PM Wednesday October 12 th 2016 and should be completed in pairs.&lt;br&gt;Context&lt;br&gt;Nim is a game played between two players. 21 objects (matches, coins, or lollies) are placed in&lt;br&gt;front of the players and, having decided who will go first, each player removes one, two, or three&lt;br&gt;objects in alternating turns. The goal is to force the other player to remove the final object — the&lt;br&gt;player to remove the final object is the loser!&lt;br&gt;This assignment uses many data structures (trees, linked-lists, and stacks) to implement a human-&lt;br&gt;versus-computer version of the game. The game will be text only. The computer will choose its&lt;br&gt;move by creating a game tree. A game tree consists of all the possible states of the game and the&lt;br&gt;computer determines the outcome of particular choices to guide which choice is the best. The state&lt;br&gt;of the game is defined as comprising how many objects remain in the game and how good (or bad)&lt;br&gt;the outcome looks (an int from -9 to +9). Each node of the game tree has children that indicate&lt;br&gt;the states of the game that follow from the state of the parent for each possible move, i.e. there are&lt;br&gt;likely to be three children for each node, one with one additional object removed, one with two, and&lt;br&gt;one with three.&lt;br&gt;2/4&lt;br&gt;A sample run of the game is shown below.&lt;br&gt;The project contains many files. All required files are present. Your task is simply to complete the&lt;br&gt;functions within the program files which have been declared but for which the function bodies are&lt;br&gt;missing.&lt;br&gt;Program Style&lt;br&gt;Your program should follow the following coding conventions:&lt;br&gt;  const variable identifiers should be used as much as possible, should be written all in&lt;br&gt;upper case and should be declared before all other variables;&lt;br&gt;  Variable identifiers should start with a lower case letter;&lt;br&gt;  Every if and if-else statement should have a block of code (i.e. collections of lines&lt;br&gt;surrounded by { and }) for both the if part and the else part (if used);&lt;br&gt;  Every loop should have a block of code;&lt;br&gt;  The keyword continue should not be used;&lt;br&gt;  The keyword break should only be used as part of a switch statement;&lt;br&gt;  Opening and closing braces of a block should be aligned;&lt;br&gt;  All code within a block should be aligned and indented 1 tab stop (or 4 spaces) from the&lt;br&gt;braces marking this block;&lt;br&gt;  Commenting:&lt;br&gt;o  There should be a block of header comment which includes at least&lt;br&gt;  file name&lt;br&gt;  student names&lt;br&gt;  student identity numbers&lt;br&gt;  a statement of the purpose of the program&lt;br&gt;  date&lt;br&gt;o  Each variable declaration should be commented&lt;br&gt;o  There should be a comment identifying groups of statements that do various parts of&lt;br&gt;the task&lt;br&gt;3/4&lt;br&gt;o  Comments should describe the strategy of the code and should not simply translate&lt;br&gt;the C into English&lt;br&gt;What and how to submit&lt;br&gt;What to submit&lt;br&gt;Paper submission&lt;br&gt;  A signed cover page (blanks can be collected from the ICT Reception/Help Desk or from&lt;br&gt;the ICT web site at&lt;br&gt;&lt;a href=&quot;http://www.utas.edu.au/__data/assets/pdf_file/0005/161375/GroupAssignmentCover.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.utas.edu.au/__data/assets/pdf_file/0005/161375/GroupAssignmentCover.pdf&lt;/a&gt;);&lt;br&gt;  A landscape-orientation print-out of the three ‘.c’ source code files for the program. Your&lt;br&gt;assignment will not be marked unless these are present; and&lt;br&gt;  A statement from each person indicating what proportion of the work was theirs. If the&lt;br&gt;work was done equally, then each person should claim 50% of the effort. It is expected that&lt;br&gt;this will be the case and this will be assumed if no statement is submitted. If, however, one&lt;br&gt;person has done very little, then this should be stated. A reason why this is the case should&lt;br&gt;be given. For example, if one student does 80% of the work because their partner did not&lt;br&gt;turn up to meetings, complete work by the agreed time, etc. then this should be stated. If&lt;br&gt;one student does 30% of the work because the other student simply went off and did it all by&lt;br&gt;themselves and without consultation then this should be stated.&lt;br&gt;Electronic submission&lt;br&gt;  You should submit the entire Visual Studio project folder.&lt;br&gt;How to submit&lt;br&gt;Paper submission&lt;br&gt;  Firmly staple together all of the required documents (with the signed cover page on top) and&lt;br&gt;place them in the appropriate submissions box near the ICT Discipline Help Desk.&lt;br&gt;Electronic submission&lt;br&gt;  Go to your home directory on alacritas (M:). You will find there a directory (folder) called&lt;br&gt;kit107submit (If you do not have this folder, please contact the ICT Discipline Help&lt;br&gt;desk.)&lt;br&gt;  Copy your entire Visual Studio project folder (Assig3) into this directory. Open the folder&lt;br&gt;to see that the files have been copied.&lt;br&gt;  If you want to resubmit, open the kit107submit folder, remove the old version and copy&lt;br&gt;in the new version.&lt;br&gt;4/4&lt;br&gt;Marking scheme&lt;br&gt;Task/Topic  Maximum&lt;br&gt;mark&lt;br&gt;Program operates as specified&lt;br&gt;node.c correctly completed  6&lt;br&gt;stack.c correctly completed  6&lt;br&gt;gameState.c correctly completed  7&lt;br&gt;tNode.c correctly completed  14&lt;br&gt;gameTree.c correctly completed  31&lt;br&gt;Program Style&lt;br&gt;Does not unnecessarily repeat tests or have other redundant/confusing code  8&lt;br&gt;Uses correctly the C naming conventions  8&lt;br&gt;Alignment of code and use of white space makes code readable  8&lt;br&gt;Always uses blocks in branch and loop constructs  8&lt;br&gt;Meaningful identifiers  8&lt;br&gt;Variables declared at the top of functions  8&lt;br&gt;Each variable declaration is commented  8&lt;br&gt;Comments within the code indicate the purpose of sections of code (but DO NOT just duplicate&lt;br&gt;what the code says)&lt;br&gt;8&lt;br&gt;Plagiarism and Cheating:&lt;br&gt;Practical assignments are used by the School of Engineering and ICT for students to both reinforce&lt;br&gt;and demonstrate their understanding of material which has been presented in class. They have a&lt;br&gt;role both for assessment and for learning. It is a requirement that work you hand in for assessment&lt;br&gt;is substantially your own.&lt;br&gt;Working with others&lt;br&gt;One effective way to grasp principles and concepts is to discuss the issues with your peers and/or&lt;br&gt;friends. You are encouraged to do this. We also encourage you to discuss aspects of practical&lt;br&gt;assignments with others. However, once you have clarified the principles, your pair must express&lt;br&gt;them in writing or electronically entirely by yourselves. In other words you must develop the&lt;br&gt;algorithm to solve the problem and write the program which implements this algorithm with your&lt;br&gt;partner and no one else (other than staff).&lt;br&gt;Cheating&lt;br&gt;  Cheating occurs if you claim work as your own when it is substantially the work of someone&lt;br&gt;else.&lt;br&gt;  Cheating is an offence under the Ordinance of Student Discipline within the University.&lt;br&gt;Furthermore, the ICT profession has ethical standards in which cheating has no place.&lt;br&gt;  Cheating involves two or more parties.&lt;br&gt;o  If you allow written work, computer listings, or electronic version of your code to be&lt;br&gt;borrowed or copied by another student you are an equal partner in the act of&lt;br&gt;cheating.&lt;br&gt;o  You should be careful to ensure that your work is not left in a situation where it may&lt;br&gt;be stolen by others.&lt;br&gt;  Where there is a reasonable cause to believe that a case of cheating has occurred, this will&lt;br&gt;be brought to the attention of the unit lecturer. If the lecturer considers that there is evidence&lt;br&gt;of cheating, then no marks will be given to any of the students involved. The case will be&lt;br&gt;referred to the Head of School for consideration of further action.&lt;br&gt;Julian Dermoudy, September 21 st 2016.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;c语言实现还一个Nim的游戏，需要使用很多数据结构，trees, linked-lists, and stack等等完成人机对战版本&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Re
    
    </summary>
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： Computer Networks Fall 2016</title>
    <link href="http://yoursite.com/2016/12/24/page74/"/>
    <id>http://yoursite.com/2016/12/24/page74/</id>
    <published>2016-12-24T10:24:42.000Z</published>
    <updated>2017-01-11T09:19:33.941Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用UDP和TCP套接字，完成一个简单的“黑客”游戏，有客户端和服务端，服务端生成密码，客户端猜测并且发送给&lt;br&gt;服务端验证，需要运用到了网络知识和c++知识&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE422 Computer Networks Fall 2016&lt;br&gt;Laboratory 1: Introduction to Socket Programming&lt;br&gt;Due: 23:59 Monday, Oct 3&lt;br&gt;1 Goal&lt;br&gt;Gain experience with socket programming by implementing a simple “hacker” game using&lt;br&gt;both UDP and TCP sockets. In this game, one participant tries to guess a four-digit password&lt;br&gt;known to the other participant, receiving feedback on each guess as described below.&lt;br&gt;2 Overview&lt;br&gt;In this lab, you will implement a networking version of the hacking mini game, which will&lt;br&gt;comprise of two C++ programs, one client and one server. This lab will help you to gain&lt;br&gt;experience with socket programming using Berkeley socket interface. In order to focus more&lt;br&gt;on the details of socket programming part, the game and most of the command parsing are&lt;br&gt;provided as a skeleton code.&lt;br&gt;This lab is worth for 60 points. This lab is due no later than 23:59 Monday, Oct 3. No late&lt;br&gt;submission will be accepted.&lt;br&gt;3 Specification&lt;br&gt;In this lab, you are required to implement a client and a server program for the ”hacker”&lt;br&gt;game. The server program and client program will interact by exchanging messages to&lt;br&gt;simulate the game play. A simple message/packet format is provided in the file: message.h.&lt;br&gt;The server and client program will handshake through TCP and the gaming interaction will&lt;br&gt;use UDP.&lt;br&gt;3.1 “Hacker” Game&lt;br&gt;The game will display a list of possible passwords (formatted in a way to mimic what is seen&lt;br&gt;in the Fallout game series). The user will then enter a guess for which one they believe the&lt;br&gt;password to be. The game will report back the “likeness” of the guess (how many correct&lt;br&gt;letters are in the correct position).&lt;br&gt;1&lt;br&gt;For example, suppose the password is ”FULL” and the displayed text, containing all of the&lt;br&gt;possible passwords, is:&lt;br&gt;ROBCO INDUSTRIES (TM) TERMALINK PROTOCOL&lt;br&gt;ENTER PASSWORD NOW&lt;br&gt;&lt;br&gt;The default number of attempts is set to 4.&lt;br&gt;A demo of the ”hacking” game play can be found at: [Demo Play]&lt;br&gt;-In the demo, click the power button in the right lower corner then click on the phase that&lt;br&gt;you would like to guess as the password.&lt;br&gt;3.2 The Server Program&lt;br&gt;Example invocation: ./server&lt;br&gt;The server program will create a TCP socket and will then wait for an incoming TCP&lt;br&gt;connection. This TCP socket’s port will be assigned by the operating system and will be&lt;br&gt;printed to the console. We assume that the client knows this TCP port number, because the&lt;br&gt;client is started after the server. When the server receives an incoming TCP connection, it&lt;br&gt;creates a UDP socket, whose port is also assigned by the OS. Via the TCP socket, the server&lt;br&gt;program returns a packet to the client containing the UDP port number. This can be done&lt;br&gt;using the UDP Cntr MSG type found in message.h.&lt;br&gt;Once the UDP connection is established, the server program initializes a variable of type&lt;br&gt;HackerGame. The initialization of this variable generates the server password, a list of&lt;br&gt;possible passwords, a string to act as the display board for the game, and the number&lt;br&gt;of attempts left. These are accessible through functions in the HackerGame class. We&lt;br&gt;recommend that you look over HackerGame.h. Guesses from the client can be evaluated by&lt;br&gt;2&lt;br&gt;using the TestEntry() function. The server keeps receiving and testing guesses from the&lt;br&gt;client until either the number of attempts has been exhausted or the password is guessed&lt;br&gt;correctly. For each guess, the server sends a packet containing the “Likeness” of the guess&lt;br&gt;to the client using the UDP socket. Once the game is over, either by guessing the password&lt;br&gt;correctly or running out of attempts, the server must notify the client using the UDP socket,&lt;br&gt;after which the server closes both the TCP and UDP sockets.&lt;br&gt;3.3 The Client Program&lt;br&gt;Example invocation: ./client -h lenny.cse.msu.edu -p 48192&lt;br&gt;The client program is required to accept the following arguments.&lt;br&gt;• -h is the server address (domain name).&lt;br&gt;• -p is the TCP port number on which the server listens for an incoming connection.&lt;br&gt;The client resolves the server address by using gethostbyname() and connects to the server&lt;br&gt;over TCP. The client then receives a packet from the server containing the UDP port number.&lt;br&gt;Using the UDP port number, the client sends a confirmation message to the server, letting&lt;br&gt;it know that it can send the first game message, using the UDP socket. The client receives a&lt;br&gt;packet containing the game display text and prints it to console. The client then takes input&lt;br&gt;from the user for the a guess at the password and sends the guess to the server program via&lt;br&gt;the UDP socket. For each guess the client should receive a response containing the likeness&lt;br&gt;of the guess and how many attempts are left. These are to be printed to console.&lt;br&gt;The client should monitor the content of each game message for ending conditions. Specif-&lt;br&gt;ically, if AttemptsLeft = 0 or IsGameWon = true, then the client should print to console&lt;br&gt;either “Terminal Locked Out!” or”Access Granted!”, respectively. The client then closes&lt;br&gt;both the TCP and UDP sockets.&lt;br&gt;3.4 Packet Format: message.h&lt;br&gt;There are two different types of packets for this lab; both are defined in message.h.&lt;br&gt;1. UDP Cntr MSG: which contains only one field: int port&lt;br&gt;2. Game MSG: which contains:&lt;br&gt;(a) char Display[1000]&lt;br&gt;(b) int AttemptsLeft&lt;br&gt;(c) bool IsGameWon&lt;br&gt;(d) int Likeness&lt;br&gt;3&lt;br&gt;(e) char Entry[10]&lt;br&gt;String type variables cannot be used in these packets due to how they utilize memory. For&lt;br&gt;information to be correctly sent in packets, the packet most know the starting address of the&lt;br&gt;variable and how large it is. Hence why we use arrays of chars.&lt;br&gt;You may want to still use strings in your client and server programs, however. Following are&lt;br&gt;two examples of copying content between the two variable types.&lt;br&gt;Copying char array to a string:&lt;br&gt;char Word1[10] = “test”;&lt;br&gt;string Word2(Word1); //Word2 now contains “test”&lt;br&gt;Copying a string to a char array:&lt;br&gt;string Word2 = “test”;&lt;br&gt;char Word1[10];&lt;br&gt;strcpy(Word1, Word2.c str()); // Word1 now contains “test”&lt;br&gt;4 Deliverables&lt;br&gt;You will submit your lab using the web based handin utility. Don’t use the command-line&lt;br&gt;based handin facility. Please submit all files in your project directory. If you start your lab&lt;br&gt;with the skeleton code, submit all files, even if the file is not modified.&lt;br&gt;This lab is due no later than 23:59 Monday, Oct 3. No late submission will be accepted.&lt;br&gt;The compilation must be done using a makefile. The code should compile on multiple&lt;br&gt;machines (can use lenny, carl, bart, etc). Please do not do your debugging on the servers&lt;br&gt;(arctic or black). You will not be awarded any points if your submission does not compile&lt;br&gt;using a makefile. A sample makefile will be provided. It will only have to be changed if you&lt;br&gt;add more files to your solution. Please test your programs before handing them in.&lt;br&gt;A README file is required including your name, PID, and machines that you tested on.&lt;br&gt;You will run your server and client programs and paste the output in your README file.&lt;br&gt;A sample README file is also included in the skeleton code. You are also encouraged to&lt;br&gt;include explanations about parts of your code that may not work in the README file.&lt;br&gt;5 Example&lt;br&gt;Follows is an example of output from the client and server. Your output may differ.&lt;br&gt;1. Invoke the server&lt;br&gt;4&lt;br&gt;Server:&lt;br&gt;&amp;gt;./server&lt;br&gt;Creating TCP Socket…&lt;br&gt;TCP socket has port number: 53401&lt;br&gt;2. Invoke the client. The client connects to the server using the TCP connection infor-&lt;br&gt;mation that you provide via the command line.&lt;br&gt;Client:&lt;br&gt;&amp;gt;./client -h lenny.cse.msu.edu -p 53401&lt;br&gt;Client is running…&lt;br&gt;remote host: lenny.cse.msu.edu, remote TCP port: 53401&lt;br&gt;Connected to Server!&lt;br&gt;3. Server accepts the TCP connection from the client and sends the UDP port information&lt;br&gt;using the TCP connection.&lt;br&gt;Server:&lt;br&gt;A new client is connected to the server!&lt;br&gt;Creating UDP Socket…&lt;br&gt;UDP socket has port number: 32471&lt;br&gt;Sending UDP port number to client using TCP connection…&lt;br&gt;4. Client uses the message from the TCP connection to establish an UDP port.&lt;br&gt;Client:&lt;br&gt;Reading TCP socket for UDP set up info…&lt;br&gt;UDP port on Server: 32471&lt;br&gt;Server IP: 35.9.23.42&lt;br&gt;Establishing UDP Connection…&lt;br&gt;5. Once the UDP connection is established, the server starts the game and accepts guesses&lt;br&gt;from the client until either the password is guessed or the number of attempts is&lt;br&gt;exhausted. Optionally the server can display the password for debugging purposes.&lt;br&gt;Server:&lt;br&gt;Password: FOUR&lt;br&gt;Starting game…&lt;br&gt;Entry: term&lt;br&gt;Likeness: 0&lt;br&gt;Entry: ball&lt;br&gt;Likeness: 0&lt;br&gt;Entry: year&lt;br&gt;Likeness: 1&lt;br&gt;Entry: four&lt;br&gt;Likeness: 4&lt;br&gt;Access Granted!&lt;br&gt;Closing TCP and UDP sockets…&lt;br&gt;5&lt;br&gt;Client:&lt;br&gt;Receiving first game message…&lt;br&gt;ROBCO INDUSTRIES (TM) TERMALINK PROTOCOL&lt;br&gt;Entry: term&lt;br&gt;Likeness: 0&lt;br&gt;Attempts left: 3&lt;br&gt;Entry: ball&lt;br&gt;Likeness: 0&lt;br&gt;Attempts left: 2&lt;br&gt;Entry: year&lt;br&gt;Likeness: 1&lt;br&gt;Attempts left: 1&lt;br&gt;Entry: four&lt;br&gt;Access Granted!&lt;br&gt;Closing TCP and UDP sockets…&lt;br&gt;6 Grading&lt;br&gt;You will not be awarded any points if your submission does not compile.&lt;br&gt;Please feel free to mail TA Glen Simon simongle AT msu.edu for questions or clarifications.&lt;br&gt;Additional notes and FAQ willl be posted on the website as well.&lt;br&gt;7&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;用UDP和TCP套接字，完成一个简单的“黑客”游戏，有客户端和服务端，服务端生成密码，客户端猜测并且发送给&lt;br&gt;服务端验证，需要运用到了网络知识和c++知识&lt;br&gt;&lt;br&gt;&lt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Network" scheme="http://yoursite.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Assignment 1, prepared by Chris Trathen</title>
    <link href="http://yoursite.com/2016/12/23/page72/"/>
    <id>http://yoursite.com/2016/12/23/page72/</id>
    <published>2016-12-23T07:28:43.000Z</published>
    <updated>2017-01-11T08:38:44.445Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105 CW1  1&lt;br&gt;CSE105 Introduction to Programming in Java, 2016&lt;br&gt;Assignment 1, prepared by Chris Trathen&lt;br&gt;Instruction&lt;br&gt;(1) There are 5 questions for the first assignment. Each question is worth 20 marks. The&lt;br&gt;assignment is worth 15% of the total mark for CSE105.&lt;br&gt;(2) Plagiarism will be very closely monitored. You should be very cautious when you discuss&lt;br&gt;with classmates. Two similar answers will all get zeros marks or more serious consequences.&lt;br&gt;After the marking, some of the students will be interviewed to confirm their independence in the&lt;br&gt;completion of the assignments.&lt;br&gt;(3) The deadline for submission of Assignment 1 is: 6:00pm, October 16, 2016 Sunday. You&lt;br&gt;should pack all of your code with WinRAR, using your student ID as the file name and then&lt;br&gt;upload it to ICE. The uploading link will be automatically stopped after 6:00pm.&lt;br&gt;Question 1&lt;br&gt;The factorial function of a positive integer n is the product of all the integers from 1 to n. For&lt;br&gt;example, the factorial of 5 is 1x2x3x4x5 = 120. This is usually expressed as 5!=120. By&lt;br&gt;definition 0!=1. Write a program that calculates the factorial n!.&lt;br&gt;Write a program that accepts as input a number between 0 and 20 and calculates the factorial of&lt;br&gt;that number.&lt;br&gt;Question 2&lt;br&gt;Write a program that prints a table of temperature conversion from Celsius to Fahrenheit. For&lt;br&gt;example:&lt;br&gt;Celsius  Fahrenheit&lt;br&gt;100  212&lt;br&gt;5  41&lt;br&gt;…………&lt;br&gt;-5  23&lt;br&gt;The exact range of data used is your choice. This is example only.&lt;br&gt;Use the formula F = C &lt;em&gt; 9 / 5 + 32&lt;br&gt;Perform the calculation using floating point arithmetic, but display the results as the closest&lt;br&gt;integer.&lt;br&gt;CSE105 CW1  2&lt;br&gt;Question 3&lt;br&gt;Write a program that analyses a triangle. Input the length of 3 sides of a triangle from the&lt;br&gt;keyboard.&lt;br&gt;Firstly, reject any input that does not represent a triangle.&lt;br&gt;Then determine whether the triangle is:&lt;br&gt; Equilateral - all sides the same length&lt;br&gt; Isosceles - two sides the same length&lt;br&gt; Scalene - no sides the same length&lt;br&gt;CSE105 CW1  3&lt;br&gt;Question 4&lt;br&gt;A leap year is a year with 366 days. A leap year has the 29 th February. A year is a leap year if it is&lt;br&gt;divisible by 4 except for the century years (divisible by 100). Century years are only leap years if they are&lt;br&gt;divisible by 400. Write a program that accepts a year and determines if it is a leap year.&lt;br&gt;Use a separate method to test if a year is a leap year.&lt;br&gt;The following information will help when you test your program. The leap years 1800 to 2400:&lt;br&gt;1804  1904  2004  2104  2204  2304&lt;br&gt;1808  1908  2008  2108  2208  2308&lt;br&gt;1812  1912  2012  2112  2212  2312&lt;br&gt;1816  1916  2016  2116  2216  2316&lt;br&gt;1820  1920  2020  2120  2220  2320&lt;br&gt;1824  1924  2024  2124  2224  2324&lt;br&gt;1828  1928  2028  2128  2228  2328&lt;br&gt;1832  1932  2032  2132  2232  2332&lt;br&gt;1836  1936  2036  2136  2236  2336&lt;br&gt;1840  1940  2040  2140  2240  2340&lt;br&gt;1844  1944  2044  2144  2244  2344&lt;br&gt;1848  1948  2048  2148  2248  2348&lt;br&gt;1852  1952  2052  2152  2252  2352&lt;br&gt;1856  1956  2056  2156  2256  2356&lt;br&gt;1860  1960  2060  2160  2260  2360&lt;br&gt;1864  1964  2064  2164  2264  2364&lt;br&gt;1868  1968  2068  2168  2268  2368&lt;br&gt;1872  1972  2072  2172  2272  2372&lt;br&gt;1876  1976  2076  2176  2276  2376&lt;br&gt;1880  1980  2080  2180  2280  2380&lt;br&gt;1884  1984  2084  2184  2284  2384&lt;br&gt;1888  1988  2088  2188  2288  2388&lt;br&gt;1892  1992  2092  2192  2292  2392&lt;br&gt;1896  1996  2096  2196  2296  2396&lt;br&gt;2000&lt;br&gt;2400&lt;br&gt;CSE105 CW1  4&lt;br&gt;Question 5&lt;br&gt;Write Java program to check if a number is Armstrong number.&lt;br&gt;An Armstrong number of 3 digit is a number for which sum of cube of its digits are equal to the&lt;br&gt;number.&lt;br&gt;Examples:&lt;br&gt;371 is an Armstrong number because 3&lt;/em&gt;3&lt;em&gt;3 + 7&lt;/em&gt;7&lt;em&gt;7 + 1&lt;/em&gt;1&lt;em&gt;1 = 371.&lt;br&gt;123 is not an Armstrong number because 1&lt;/em&gt;1&lt;em&gt;1 + 2&lt;/em&gt;2&lt;em&gt;2 + 3&lt;/em&gt;3*3 = 36.&lt;br&gt;This assignment is individual work. Plagiarism (e.g. copying materials from other&lt;br&gt;sources without proper acknowledgement) is a serious academic offence. Plagiarism&lt;br&gt;will not be tolerated and will be dealt with in accordance with the University Code of&lt;br&gt;Practice on Assessment.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Assignment 1, prepared by Chris Trathen</title>
    <link href="http://yoursite.com/2016/12/23/page73/"/>
    <id>http://yoursite.com/2016/12/23/page73/</id>
    <published>2016-12-23T07:28:43.000Z</published>
    <updated>2017-01-11T08:38:44.445Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105 CW1  1&lt;br&gt;CSE105 Introduction to Programming in Java, 2016&lt;br&gt;Assignment 1, prepared by Chris Trathen&lt;br&gt;Instruction&lt;br&gt;(1) There are 5 questions for the first assignment. Each question is worth 20 marks. The&lt;br&gt;assignment is worth 15% of the total mark for CSE105.&lt;br&gt;(2) Plagiarism will be very closely monitored. You should be very cautious when you discuss&lt;br&gt;with classmates. Two similar answers will all get zeros marks or more serious consequences.&lt;br&gt;After the marking, some of the students will be interviewed to confirm their independence in the&lt;br&gt;completion of the assignments.&lt;br&gt;(3) The deadline for submission of Assignment 1 is: 6:00pm, October 16, 2016 Sunday. You&lt;br&gt;should pack all of your code with WinRAR, using your student ID as the file name and then&lt;br&gt;upload it to ICE. The uploading link will be automatically stopped after 6:00pm.&lt;br&gt;Question 1&lt;br&gt;The factorial function of a positive integer n is the product of all the integers from 1 to n. For&lt;br&gt;example, the factorial of 5 is 1x2x3x4x5 = 120. This is usually expressed as 5!=120. By&lt;br&gt;definition 0!=1. Write a program that calculates the factorial n!.&lt;br&gt;Write a program that accepts as input a number between 0 and 20 and calculates the factorial of&lt;br&gt;that number.&lt;br&gt;Question 2&lt;br&gt;Write a program that prints a table of temperature conversion from Celsius to Fahrenheit. For&lt;br&gt;example:&lt;br&gt;Celsius  Fahrenheit&lt;br&gt;100  212&lt;br&gt;5  41&lt;br&gt;…………&lt;br&gt;-5  23&lt;br&gt;The exact range of data used is your choice. This is example only.&lt;br&gt;Use the formula F = C &lt;em&gt; 9 / 5 + 32&lt;br&gt;Perform the calculation using floating point arithmetic, but display the results as the closest&lt;br&gt;integer.&lt;br&gt;CSE105 CW1  2&lt;br&gt;Question 3&lt;br&gt;Write a program that analyses a triangle. Input the length of 3 sides of a triangle from the&lt;br&gt;keyboard.&lt;br&gt;Firstly, reject any input that does not represent a triangle.&lt;br&gt;Then determine whether the triangle is:&lt;br&gt; Equilateral - all sides the same length&lt;br&gt; Isosceles - two sides the same length&lt;br&gt; Scalene - no sides the same length&lt;br&gt;CSE105 CW1  3&lt;br&gt;Question 4&lt;br&gt;A leap year is a year with 366 days. A leap year has the 29 th February. A year is a leap year if it is&lt;br&gt;divisible by 4 except for the century years (divisible by 100). Century years are only leap years if they are&lt;br&gt;divisible by 400. Write a program that accepts a year and determines if it is a leap year.&lt;br&gt;Use a separate method to test if a year is a leap year.&lt;br&gt;The following information will help when you test your program. The leap years 1800 to 2400:&lt;br&gt;1804  1904  2004  2104  2204  2304&lt;br&gt;1808  1908  2008  2108  2208  2308&lt;br&gt;1812  1912  2012  2112  2212  2312&lt;br&gt;1816  1916  2016  2116  2216  2316&lt;br&gt;1820  1920  2020  2120  2220  2320&lt;br&gt;1824  1924  2024  2124  2224  2324&lt;br&gt;1828  1928  2028  2128  2228  2328&lt;br&gt;1832  1932  2032  2132  2232  2332&lt;br&gt;1836  1936  2036  2136  2236  2336&lt;br&gt;1840  1940  2040  2140  2240  2340&lt;br&gt;1844  1944  2044  2144  2244  2344&lt;br&gt;1848  1948  2048  2148  2248  2348&lt;br&gt;1852  1952  2052  2152  2252  2352&lt;br&gt;1856  1956  2056  2156  2256  2356&lt;br&gt;1860  1960  2060  2160  2260  2360&lt;br&gt;1864  1964  2064  2164  2264  2364&lt;br&gt;1868  1968  2068  2168  2268  2368&lt;br&gt;1872  1972  2072  2172  2272  2372&lt;br&gt;1876  1976  2076  2176  2276  2376&lt;br&gt;1880  1980  2080  2180  2280  2380&lt;br&gt;1884  1984  2084  2184  2284  2384&lt;br&gt;1888  1988  2088  2188  2288  2388&lt;br&gt;1892  1992  2092  2192  2292  2392&lt;br&gt;1896  1996  2096  2196  2296  2396&lt;br&gt;2000&lt;br&gt;2400&lt;br&gt;CSE105 CW1  4&lt;br&gt;Question 5&lt;br&gt;Write Java program to check if a number is Armstrong number.&lt;br&gt;An Armstrong number of 3 digit is a number for which sum of cube of its digits are equal to the&lt;br&gt;number.&lt;br&gt;Examples:&lt;br&gt;371 is an Armstrong number because 3&lt;/em&gt;3&lt;em&gt;3 + 7&lt;/em&gt;7&lt;em&gt;7 + 1&lt;/em&gt;1&lt;em&gt;1 = 371.&lt;br&gt;123 is not an Armstrong number because 1&lt;/em&gt;1&lt;em&gt;1 + 2&lt;/em&gt;2&lt;em&gt;2 + 3&lt;/em&gt;3*3 = 36.&lt;br&gt;This assignment is individual work. Plagiarism (e.g. copying materials from other&lt;br&gt;sources without proper acknowledgement) is a serious academic offence. Plagiarism&lt;br&gt;will not be tolerated and will be dealt with in accordance with the University Code of&lt;br&gt;Practice on Assessment.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;5个java的基础题，考察了操作符运算，数组，时间等基础知识，输入入门级编程&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CSE105
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： FIT9131 Programming Foundations</title>
    <link href="http://yoursite.com/2016/12/21/page71/"/>
    <id>http://yoursite.com/2016/12/21/page71/</id>
    <published>2016-12-21T08:23:43.000Z</published>
    <updated>2017-01-11T08:29:12.376Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Java的入门级基础，用java完成菜单管理系统，按题目要求使用 ArrayList，loop等方法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;FIT9131 Programming Foundations&lt;br&gt;Week 6 Exercises&lt;br&gt;1&lt;br&gt;Homework checklist&lt;br&gt;To be up to date you should have completed the following:&lt;br&gt;  Tutorial exercises from weeks 1– 5.&lt;br&gt;  The complete code for the LuckyNumberGenerator class and the Player class for&lt;br&gt;your assignment.&lt;br&gt;  Read Chapters 1-4 of the text book, Objects First with Java, Barnes &amp;amp; Kölling.&lt;br&gt;REMINDER :&lt;br&gt;You MUST ATTEND your tutorial next week, WEEK 7, to organise your&lt;br&gt;interview for Assignment 1 with your own tutor. If no interviews are&lt;br&gt;scheduled, no marks will be awarded to your assignment.&lt;br&gt;If you are an off-campus student, the interview appointments will be&lt;br&gt;made via emails.&lt;br&gt;You should show your assignment work to your tutor this week for&lt;br&gt;feedback/comments.&lt;br&gt;Exercises to work on in the tutorial&lt;br&gt;1. Create a class in BlueJ called Week6Q1, then add a method in it called&lt;br&gt;displayMenu() that prints the following menu to the screen and asks the user to&lt;br&gt;choose one of the options presented, as follows:&lt;br&gt;A. Option #A&lt;br&gt;B. Option #B&lt;br&gt;C. Option #C&lt;br&gt;D. Option #D&lt;br&gt;X. Exit!&lt;br&gt;Please enter your choice:&lt;br&gt;The method should do nothing else other than printing the menu.&lt;br&gt;2&lt;br&gt;2. Add a method to the Week6Q1 class in Q.1, and name it start(). In this method, make&lt;br&gt;a single call to displayMenu(), then use a Scanner object to accept an input from&lt;br&gt;the user. When the user enters an option (A/B/C/D/X) from the menu, in upper or lower&lt;br&gt;case, the program should print an appropriate message indicating which option has been&lt;br&gt;selected (e.g. “Option #A was selected”). There is no need to actually perform&lt;br&gt;any real action, apart from the printed message.&lt;br&gt;If the user enters an option other than those on the menu, an error message should be&lt;br&gt;printed.&lt;br&gt;Run the start() method several times to check that you have it working as required.&lt;br&gt;Hint : you need to use the if/switch statements in your code&lt;br&gt;3. Modify the start() method, this time adding in a loop so that the menu is displayed&lt;br&gt;repeatedly, until the last option is selected. When the last option is selected, exit the&lt;br&gt;start() method (ie. stop the loop).&lt;br&gt;Hint : you need to use a combination of the if/switch and for/while statements in&lt;br&gt;your code&lt;br&gt;The following exercises are from the text book. These will test and re-enforce your&lt;br&gt;understanding of the concepts covered in the week 5/6 lectures.&lt;br&gt;4. 4.1 (explore MusicOrganizer class the music-organizer-v1 project)&lt;br&gt;5. 4.2–4.11, 4.13 (using ArrayList methods)&lt;br&gt;6. 4.20-4.21 (for-each loop).&lt;br&gt;7. 4.30 &amp;amp; 4.32 (while loop)&lt;br&gt;Homework for this week&lt;br&gt;Finish the tutorial exercises for week 6.&lt;br&gt;Work on (and hopefully finish) the code for the Game class for your assignment.&lt;br&gt;Read chapter 6 (sections 6.1-6.5, and optionally 6.6-6.10) of the text book, Objects First with&lt;br&gt;Java, Barnes &amp;amp; Kölling&lt;br&gt;Read chapter 7 (sections 7.1-7.4) of the text book, Objects First with Java, Barnes &amp;amp; Kölling&lt;br&gt;- Do exercises 7.2-7.3, 7.7-7.8 (fixed-size Arrays)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Java的入门级基础，用java完成菜单管理系统，按题目要求使用 ArrayList，loop等方法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/stron
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： Task 2 Latin Squares</title>
    <link href="http://yoursite.com/2016/12/20/page70/"/>
    <id>http://yoursite.com/2016/12/20/page70/</id>
    <published>2016-12-20T08:44:56.000Z</published>
    <updated>2017-01-11T08:25:21.166Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;检查一个二维数组是不是Latin square ，是否符合Latin square的规则，二维数组也是用户通过界面输入&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;INFO1103 Introduction to Programming, Semester 2, 2016&lt;br&gt;1&lt;br&gt;Task 2 Latin Squares&lt;br&gt;Submission deadline: 5pm on Saturday, 3 rd September (Week 6)&lt;br&gt;Submission: Submit your LatinSquares.java file via the online system PASTA.&lt;br&gt;Weight: 5 marks = 5% of your final mark.&lt;br&gt;This assessment must be completed individually.&lt;br&gt;Write a program called LatinSquares.java that checks if an n x n matrix is a Latin square. Your&lt;br&gt;program should be in the package squares and should be based off the skeleton code available on&lt;br&gt;PASTA.&lt;br&gt;A n x n matrix is a Latin square if every row and column contains the numbers 1, 2, 3,… n, exactly once. For&lt;br&gt;example:&lt;br&gt;A Latin square of size 3:&lt;br&gt;3  2  1&lt;br&gt;1  3  2&lt;br&gt;2  1  3&lt;br&gt;A Latin square of size 5:&lt;br&gt;1 2 3 4 5&lt;br&gt;2 3 5 1 4&lt;br&gt;3 5 4 2 1&lt;br&gt;4  1 2 5 3&lt;br&gt;5  4 1 3 2&lt;br&gt;The name “Latin square” was inspired by the work of the Swiss mathematician Leonhard Euler, who used&lt;br&gt;Latin characters as symbols. Other symbols can be used instead of Latin characters, e.g. integer numbers, as&lt;br&gt;in this assignment. Latin squares are used for experimental design in statistics, for error correcting codes in&lt;br&gt;telecommunication systems and are also related to the Sudoku puzzles. See the Wikipedia page on Latin&lt;br&gt;Squares for more information (&lt;a href=&quot;http://en.wikipedia.org/wiki/Latin_square&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://en.wikipedia.org/wiki/Latin_square&lt;/a&gt;).&lt;br&gt;Download the LatinSquares.java skeleton code from PASTA. This skeleton code contains a template&lt;br&gt;for your submission. You must not modify the existing method headers as we use them to test your code,&lt;br&gt;however you may add any additional methods you believe are necessary.&lt;br&gt;Your task is to write the methods readSize, readSquare, validColumn, validRow, and&lt;br&gt;validLatinSquare as described in the skeleton code. Your complete program will include the given&lt;br&gt;skeleton code and the methods that you will write.&lt;br&gt;Your code will be tested at the method level, which means each method will be tested individually, not just&lt;br&gt;by running the main method. This means you need to make sure that each method works exactly as the&lt;br&gt;documentation in the skeleton code describes.&lt;br&gt;See below for some example outputs of the main method being run. The text in  black is required output, and&lt;br&gt;the text in  green is user input.&lt;br&gt;&lt;br&gt;INFO1103 Introduction to Programming, Semester 2, 2016&lt;br&gt;2&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;3&lt;br&gt;Please enter 9 numbers:&lt;br&gt;1 2 3 2 3 1 3 1 2&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|2|3|1|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|3|1|2|&lt;br&gt;+‐+‐+‐+&lt;br&gt;It’s a Latin square!&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;3&lt;br&gt;Please enter 9 numbers:&lt;br&gt;0 2 1 1 0 2 2 1 0&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+‐+&lt;br&gt;|0|2|1|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|0|2|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|2|1|0|&lt;br&gt;+‐+‐+‐+&lt;br&gt;Not a Latin square!&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;2&lt;br&gt;Please enter 4 numbers:&lt;br&gt;1 2 3 4&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+&lt;br&gt;|1|2|&lt;br&gt;+‐+‐+&lt;br&gt;|3|4|&lt;br&gt;+‐+‐+&lt;br&gt;Not a Latin square!&lt;br&gt;Please enter the size of the square (N):&lt;br&gt;3&lt;br&gt;Please enter 9 numbers:&lt;br&gt;1 2 3 1 2 3 1 2 3&lt;br&gt;This is the square you input:&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;|1|2|3|&lt;br&gt;+‐+‐+‐+&lt;br&gt;Not a Latin square!&lt;br&gt;Assumptions&lt;br&gt;You can make the following assumptions for this task:&lt;br&gt;  Your code will only be given sensible input (e.g. ? ? 0).&lt;br&gt;  Any inputs will be given as integers only; you do not need to worry about invalid inputs like floating&lt;br&gt;point numbers or Strings.&lt;br&gt;How to Submit in PASTA&lt;br&gt;Writing your code&lt;br&gt;1. In Eclipse, create a project “info1103_task2”. In this project, create a package “squares”, and then a&lt;br&gt;class “LatinSquares” within the package.&lt;br&gt;2.  Download the skeleton code from PASTA and either import the class or paste the code into the class&lt;br&gt;“LatinSquares.java”.&lt;br&gt;3. Write the required methods. You may not change any method headers in the skeleton code! Your&lt;br&gt;program consists of the provided skeleton code and the methods that you wrote. Compile and run&lt;br&gt;your program and make sure that it produces the same output as the example output. When you are&lt;br&gt;happy with your program, you need to submit it on PASTA.&lt;br&gt;&lt;br&gt;INFO1103 Introduction to Programming, Semester 2, 2016&lt;br&gt;3&lt;br&gt;Submitting in PASTA&lt;br&gt;1. Log in to PASTA (&lt;a href=&quot;http://info1103.it.usyd.edu.au/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://info1103.it.usyd.edu.au/&lt;/a&gt;) with your Unikey login and password.&lt;br&gt;Note: If you are off-campus, you will need to establish a VPN connection to access PASTA. This means&lt;br&gt;installing a program called “VPN client” on your computer and running it every time when you use PASTA&lt;br&gt;off-campus. Instructions how to do this are available here:&lt;br&gt;&lt;a href=&quot;http://staff.ask.sydney.edu.au/app/answers/detail/a_id/519/~/how-do-i-download-and-install-the-vpn-client-to-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://staff.ask.sydney.edu.au/app/answers/detail/a_id/519/~/how-do-i-download-and-install-the-vpn-client-to-&lt;/a&gt;&lt;br&gt;access-the-university-network%3F&lt;br&gt;If you have problems with VPN, try synchronising your password:&lt;br&gt;&lt;a href=&quot;https://www.auth.usyd.edu.au/extro/pwresync/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.auth.usyd.edu.au/extro/pwresync/&lt;/a&gt;&lt;br&gt;If this doesn’t work, contact the ICT helpdesk: &lt;a href=&quot;http://sydney.edu.au/ict/student/contact/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sydney.edu.au/ict/student/contact/&lt;/a&gt;&lt;br&gt;2. Find Task 2 and press “Submit”. Then press “Choose File” and attach the LatinSquares.java&lt;br&gt;file, then press “I accept” (after reading the University policy on academic honesty).&lt;br&gt;3. If you see a message indicating that your code is queued for testing under Task 2, this means that&lt;br&gt;your code has been uploaded successfully.&lt;br&gt;4. If you see a red error box, you need to fix any problems indicated before your submission will be&lt;br&gt;accepted.&lt;br&gt;5. Once your program has been tested, the page will tell you to refresh for results, so refresh the page.&lt;br&gt;You should see green, red and grey boxes. Each box corresponds to a test; a red box indicates that&lt;br&gt;your program has failed the respective test, a green box indicates that your program has passed the&lt;br&gt;test, and a grey box indicates that the test is hidden (you will not see the result of the test until after&lt;br&gt;the due date).&lt;br&gt;6. If you have red boxes, you can see which tests were not passed by clicking on the task name. Correct&lt;br&gt;the errors (go to Eclipse, re-write your code and test it carefully) and then submit again in PASTA.&lt;br&gt;7.  For further help on using PASTA, check the INFO1103 User Manual, or post a question on Piazza.&lt;br&gt;Marking&lt;br&gt;Your mark is the percentage of the tests that you have passed, e.g. for Task 2: all 20 tests passed, the&lt;br&gt;mark is 100% of 5 marks = 5 marks, 10 tests passed, the mark is 50% of 5 marks = 2.5 marks.&lt;br&gt;You can submit as many times as you want. Please make sure that your program compiles and runs&lt;br&gt;before you submit it in PASTA. Your last submission will be the one that will be marked.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;检查一个二维数组是不是Latin square ，是否符合Latin square的规则，二维数组也是用户通过界面输入&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requireme
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#代写： Exemption exam for ECS 102 - Java</title>
    <link href="http://yoursite.com/2016/12/19/page68/"/>
    <id>http://yoursite.com/2016/12/19/page68/</id>
    <published>2016-12-19T03:07:34.000Z</published>
    <updated>2017-01-11T08:20:34.224Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java的基础知识考试，考察了基本的java语法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Exemption exam for ECS 102 - Java&lt;br&gt;&lt;br&gt;&lt;br&gt;   The goal of this exam is to give recognition for programming you already know, so you can fulfill a requirement and move on to learning something new.  If you already know C don’t plan on taking ECS102 to learn C.  You already know some fundamentals of programming, and you can learn the syntax of Java in a weekend if you need it.&lt;br&gt;   This is a closed book exam.  You are writing code without running it.  Please answer the questions in this Word document, immediately below the question.  Use as much space as you need. If you do not remember the exact syntax of a statement, make your best guess and continue.  If you don’t know how to do a part of a problem, do as much of it as you can, writing a note about what you don’t know how to do.  Send solutions to mjbaruch@syr.edu.  Use “ecs102 exemption exam” as the Subject to make sure I see it and process it promptly.&lt;br&gt;&lt;br&gt;Your name:&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;  Your SU ID#:&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;Campus email: &lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;___&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;Major:&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;ECS102 section&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;How did you learn programming? &lt;strong&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;Have you taken the Computer Science AP exam?  If so, what did you get? &lt;strong&gt;&lt;strong&gt;__&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1.  Write a method, convert, that converts a length from metric to British measure or from British to metric measure.  You may not assume any global variables.  There should be a parameter conv_type where the user can tell the method which kind of conversion to do (British to metric or metric to British).  There should be a parameter orig_length, the length in the original unit.  The return value should be the length in the new units.&lt;br&gt;&lt;br&gt;British lengths are in inches.&lt;br&gt;Metric lengths are in centimeters.&lt;br&gt;You may use the values of 2.54 cm is 1 inch and&lt;br&gt; 0.39 inches is 1 cm.&lt;br&gt;If conv_type is ‘B’ or ‘b’ then the conversion is from British to metric.&lt;br&gt;If conv_type is ‘M’ or ‘m’ then the conversion is from metric to British.&lt;br&gt;If conv_type is any other character, then Invalid Conversion is printed and -1 should be the returned function(method) value.&lt;br&gt;&lt;br&gt;For example, if we have&lt;br&gt;    bl = 10.0;&lt;br&gt;    ml = 0.0;&lt;br&gt;Then after the call ml=convert(‘B’, bl);&lt;br&gt;we should have&lt;br&gt;    ml is 25.4&lt;br&gt;    bl is 10.0&lt;br&gt;because 10 inches is equal to 25.4 cm.&lt;br&gt;2. a) I have an array with ten thousand numbers, in ascending order.  I want to find the index (subscript) of a particular number, if it is in the array.  Is it better for me to use a binary search or a linear search?  Why?&lt;br&gt;&lt;br&gt;&lt;br&gt;b) I have an array with ten thousand numbers that is unordered.  I want to find the index (subscript) of a particular number if it is in the array.  Is it better for me to use a binary search or a linear search?  Why?&lt;br&gt;&lt;br&gt;&lt;br&gt;3.  Consider the following code:&lt;br&gt;&lt;br&gt;public static int mystery( int n )&lt;br&gt;{&lt;br&gt;    if ( n = = 1)&lt;br&gt;        return 1;&lt;br&gt;    else&lt;br&gt;        return (2 * mystery(n-1) + n);&lt;br&gt;}&lt;br&gt;&lt;br&gt;Fill in values in the table below:&lt;br&gt;&lt;br&gt;n    mystery(n)&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;4.  Assume you have access to the method&lt;br&gt;public static int myrand( );&lt;br&gt;that returns a random integer in the range 0 to 100,000 with uniform probability.  (That is, every whole number is equally likely to come up.)  You do not have to write this method, and you should not use a built in random method.  Use myrand for this problem.&lt;br&gt;&lt;br&gt;You are given the code segment:&lt;br&gt;&lt;br&gt;char[] cards=new char[15];&lt;br&gt;int i;&lt;br&gt;for (i=0; i&lt;15; 18=&quot;&quot; i++)=&quot;&quot; cards[i]=&quot;Z&quot; ;=&quot;&quot; write=&quot;&quot; a=&quot;&quot; code=&quot;&quot; segment=&quot;&quot; (several=&quot;&quot; lines=&quot;&quot; of=&quot;&quot; code)=&quot;&quot; to=&quot;&quot; follow=&quot;&quot; this=&quot;&quot; that=&quot;&quot; will=&quot;&quot; change=&quot;&quot; the=&quot;&quot; values=&quot;&quot; two=&quot;&quot; distinct,=&quot;&quot; randomly=&quot;&quot; chosen=&quot;&quot; cards=&quot;&quot; &#39;a&#39;.=&quot;&quot; make=&quot;&quot; sure=&quot;&quot; are=&quot;&quot; not=&quot;&quot; same=&quot;&quot; card!=&quot;&quot; declare=&quot;&quot; any=&quot;&quot; variables=&quot;&quot; you=&quot;&quot; use.=&quot;&quot; 5.=&quot;&quot; reads=&quot;&quot; an=&quot;&quot; integer=&quot;&quot; and=&quot;&quot; prints=&quot;&quot; “odd”=&quot;&quot; or=&quot;&quot; “even”=&quot;&quot; show=&quot;&quot; number=&quot;&quot; is=&quot;&quot; odd=&quot;&quot; even.=&quot;&quot; 6.=&quot;&quot; read=&quot;&quot; string=&quot;&quot; from=&quot;&quot; keyboard=&quot;&quot; print=&quot;&quot; occurrences=&quot;&quot; letter=&quot;&quot; e=&quot;&quot; (upper=&quot;&quot; case=&quot;&quot; lower=&quot;&quot; case.)=&quot;&quot; 7.=&quot;&quot; class=&quot;&quot; shirt=&quot;&quot; has=&quot;&quot; following=&quot;&quot; fields:=&quot;&quot; int=&quot;&quot; size;=&quot;&quot; color;=&quot;&quot; if=&quot;&quot; sh=&quot;&quot; i=&quot;&quot; want=&quot;&quot; system.out.print(sh)=&quot;&quot; size:=&quot;&quot; color:=&quot;&quot; blue=&quot;&quot; (if=&quot;&quot; size=&quot;&quot; shirt)=&quot;&quot; method=&quot;&quot; tostring.=&quot;&quot; 8.=&quot;&quot; given=&quot;&quot; class:=&quot;&quot; public=&quot;&quot; station=&quot;&quot; {=&quot;&quot; private=&quot;&quot; double=&quot;&quot; onthedial;=&quot;&quot; callletters;=&quot;&quot; station(double=&quot;&quot; otd,=&quot;&quot; cl)=&quot;&quot; onthedial=&quot;otd;&quot; callletters=&quot;cl;&quot; }=&quot;&quot; for=&quot;&quot; main=&quot;&quot; creates=&quot;&quot; array=&quot;&quot; stations=&quot;&quot; with=&quot;&quot; values:=&quot;&quot; call=&quot;&quot; letters=&quot;&quot; on=&quot;&quot; dial=&quot;&quot; wrvo=&quot;&quot; 89.9=&quot;&quot; wcny=&quot;&quot; 91.3=&quot;&quot; waer=&quot;&quot; 88.3=&quot;&quot; 9.=&quot;&quot; static=&quot;&quot; findlargest(double[]=&quot;&quot; d)=&quot;&quot; return=&quot;&quot; index=&quot;&quot; largest=&quot;&quot; in=&quot;&quot; d.=&quot;&quot; &lt;=&quot;&quot; font=&quot;&quot;&gt;&lt;/15;&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java的基础知识考试，考察了基本的java语法&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Exemption exam f
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#代写： Assignment 1 – Calculator</title>
    <link href="http://yoursite.com/2016/12/18/page67/"/>
    <id>http://yoursite.com/2016/12/18/page67/</id>
    <published>2016-12-18T01:04:51.000Z</published>
    <updated>2017-01-11T08:14:16.591Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用c# Web Form完成一个简单的计算器功能，要求有几个按钮和窗口，任务1是能实现简单的加减乘除计算，任务2是&lt;br&gt;二进制和十进制之间的转化，任务3是计算二进制位数&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;INFS3204/7204 Assignment 1 – Calculator&lt;br&gt;The goal of this assignment is to explore the basics of ASP.NET Web&lt;br&gt;Applications and C# programming language. All assignments will have to&lt;br&gt;be developed with Microsoft Visual Studio 2015 using C# as the&lt;br&gt;programming language. No other languages will be accepted. This&lt;br&gt;assignment contributes to 10% of your overall grade. You must&lt;br&gt;demonstrate this assignment to your lab tutors during your scheduled lab&lt;br&gt;session in week 5. Note that you also need to submit your code on&lt;br&gt;BlackBoard before 11:59pm Sunday 28/08/2016.&lt;br&gt;This assignment is divided into 3 tasks:&lt;br&gt;• Creating an ASP.Net Web Application using Web Form (2 Marks)&lt;br&gt;• Performing basic calculator operations and converting the result from base-10&lt;br&gt;to base-2 (5 Marks)&lt;br&gt;• Counting the number of digits in base-2 number (3 Marks)&lt;br&gt;Please Note INFS7204 students will have to complete all three tasks,&lt;br&gt;while INFS3204 students only need to complete the first two with 3&lt;br&gt;Marks for Task 1 and 7 Marks for Task 2.&lt;br&gt;• Preparation&lt;br&gt;• Before attempting to do this assignment, you should have a basic&lt;br&gt;knowledge of how to use Microsoft Visual Studio 2015 to create&lt;br&gt;ASP.NET Web Forms, as well as a basic knowledge of&lt;br&gt;programming with C#. Please note that you need to choose .NET&lt;br&gt;Framework 4.6 for your assignments. You also need to have&lt;br&gt;Windows 7 (or later versions) installed on your computer.&lt;br&gt;• Hints: Please be advised that the design and implementation of this&lt;br&gt;assignment is totally up to you. However, you may need to ensure&lt;br&gt;that you are familiar with the concept of ‘Recursive Functions’ and&lt;br&gt;defining ‘Global Variables’ to implement some parts of this&lt;br&gt;assignment.&lt;br&gt;• Microsoft Visual Studio 2015 Free Download: If you would like&lt;br&gt;to install the Microsoft Visual Studio 2015 on your own computer,&lt;br&gt;as a student, you can download it for free from the following links:&lt;br&gt;&lt;a href=&quot;https://www.dreamspark.com/Student/Default.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.dreamspark.com/Student/Default.aspx&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://beta.visualstudio.com/download-visual-studio-vs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://beta.visualstudio.com/download-visual-studio-vs/&lt;/a&gt;&lt;br&gt;Task 1: Creating an ASP.NET Web Application (2 Marks)&lt;br&gt;Create a Calculator Web Application with Web Form, which consists of&lt;br&gt;the following elements:&lt;br&gt;• Two TextBoxes for the user’s inputs&lt;br&gt;• A DropDownList for the user’s choice of operation&lt;br&gt;• Two Labels that indicate the result’s base system (i.e. base-10 or&lt;br&gt;base-2)&lt;br&gt;• Four TextBoxes for displaying the calculating results and counting&lt;br&gt;results.&lt;br&gt;• Two Buttons to submit the form and get the result&lt;br&gt;Your final application should look like the example below. However, you&lt;br&gt;may decide to design and implement this application more interestingly.&lt;br&gt;Please note that you are not required to validate the user’s input for this&lt;br&gt;assignment.&lt;br&gt;Task 2: Performing basic calculator operations and&lt;br&gt;converting the result from base-10 to base-2 (5 Marks)&lt;br&gt;In order to complete this task, you need to implement the basic calculator&lt;br&gt;operations (i.e. +, -, *, /). When user enters two numbers and clicks on the&lt;br&gt;Calculate button, the result of the operation should be displayed in the&lt;br&gt;base-10 output TextBox. Additionally, the result needs to be converted&lt;br&gt;from base-10 to base-2 system and be displayed in the base-2 output&lt;br&gt;TextBox.&lt;br&gt;For example, if user inputs 34+56, it calculates 34+56=90, the base-2&lt;br&gt;conversion number of 90 is 1011010. Please see the following picture:&lt;br&gt;Task 3: Counting the number of digits in base-2 number (3&lt;br&gt;Marks)&lt;br&gt;In this task, you need to count the number of “0”s and “1”s in the base-2&lt;br&gt;calculation result. When the calculation of Task 2 is done and user clicks&lt;br&gt;on the Count button, the number of “0”s and “1”s need to be displayed in&lt;br&gt;two output TextBoxs.&lt;br&gt;For example, as you can see in the following picture, the number of “0”s&lt;br&gt;in 1011010 is 3, and the number of “1”s in 1011010 is 4.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用c# Web Form完成一个简单的计算器功能，要求有几个按钮和窗口，任务1是能实现简单的加减乘除计算，任务2是&lt;br&gt;二进制和十进制之间的转化，任务3是计算二进制位
    
    </summary>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java代写： AP Assignment 1 s2 2016</title>
    <link href="http://yoursite.com/2016/12/16/page66/"/>
    <id>http://yoursite.com/2016/12/16/page66/</id>
    <published>2016-12-15T23:06:55.000Z</published>
    <updated>2017-01-11T07:55:16.124Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java实现一个旅行售票管理系统，这个题主要考察学生的java基础知识，编程逻辑能力，类的设计和OOP知识，&lt;br&gt;功能点比较多，细节点也比较多。&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;COSC1290/1295 Advanced Programming / Java for C Programmers&lt;br&gt;School of CS and IT, RMIT University&lt;br&gt;Assignment 1 – Semester 2 2016 – UPDATED&lt;br&gt;Due date: 5.00pm, September 12, 2016&lt;br&gt;Introduction&lt;br&gt;You are required to implement a basic Java program using Java SE 7.0 or above.&lt;br&gt;This assignment is designed to help you:&lt;br&gt;1. Test your knowledge of basic Java concepts;&lt;br&gt;2.  Evaluate your ability to design programming logic;&lt;br&gt;3. Practise your knowledge of class design and OO constructs in Java;&lt;br&gt;4. Practise error handling in Java;&lt;br&gt;5. Develop a reasonable sized application in Java.&lt;br&gt;This is an individual assignment and worth 15% towards your final grade..&lt;br&gt;Academic Integrity (more)&lt;br&gt;The submitted assignment must be your own work. No marks will be awarded for any parts&lt;br&gt;which are not created by you.&lt;br&gt;Plagiarism is treated very seriously at RMIT. Plagiarism includes copying code directly from&lt;br&gt;other students, internet or other resources without proper reference. Sometimes, students&lt;br&gt;study and work on assignments together and submit similar files: this may be regarded as&lt;br&gt;plagiarism.&lt;br&gt;Please note that you should always create your own assignment even if you have very similar&lt;br&gt;ideas. Plagiarism-detection tools will be used for all submissions. Severe penalties may be&lt;br&gt;applied in cases of plagiarism, including loss of all marks or, in repeat cases, expulsion from&lt;br&gt;the course.&lt;br&gt;At any point, but especially during the scheduled lab-demonstrations, you may be required to&lt;br&gt;show and explain your design and code to any of the teaching staff.&lt;br&gt;General Implementation Details&lt;br&gt; All input data should be read from the standard input and all output data should be&lt;br&gt;printed to the standard output. There is no need to use files all.&lt;br&gt; If the input is formatted incorrectly the execution should stop immediately and an&lt;br&gt;appropriate error message should be displayed.&lt;br&gt; Marks will be allocated to your class design. You are required to modularise classes&lt;br&gt;properly—i.e., to use multiple methods as appropriate. No method should be longer&lt;br&gt;than 50 lines.&lt;br&gt; Marks will be allocated to proper documentation and coding layout and style. Your&lt;br&gt;coding style should be consistent with standard Java coding conventions&lt;br&gt;(&lt;a href=&quot;https://google.github.io/styleguide/javaguide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://google.github.io/styleguide/javaguide.html&lt;/a&gt;)&lt;br&gt; Your programs will be marked on RMIT UNIX machines using Java SE 7.0. Make&lt;br&gt;sure you test your program on these machines before you submit.&lt;br&gt; Further hints, tips and details, including submission instructions, will be made via&lt;br&gt;Blackboard and in lectures.&lt;br&gt;Overall Specification&lt;br&gt;You will implement an electronic ticket for public transport, called MyTi (My Ticket).&lt;br&gt; A MyTi can be “charged” by adding credit to it: initially, a MyTi has zero credit; a MyTi&lt;br&gt;can hold up to $100 of credit.&lt;br&gt; Any attempt to add credit that goes above the limit causes an error message and for the&lt;br&gt;charge to fail.&lt;br&gt; Amounts to be credited to a MyTi must be integer dollar amounts in precise multiples of&lt;br&gt;$5.00.&lt;br&gt; Travel Passes can be bought using a MyTi ticket: a pass can be for either “2 Hours” or&lt;br&gt;“All Day”, and can be for either “Zone 1” or “Zone 1 and 2”.&lt;br&gt; Prices are as follows:&lt;br&gt;o 2 Hour Zone 1 pass: $3.50&lt;br&gt;o 2 Hour Zone 1+2 pass: $5.00&lt;br&gt;o All Day Zone 1 pass: $6.90&lt;br&gt;o All Day Zone 1+2 pass: $9.80&lt;br&gt; If you attempt to purchase a travel pass without sufficient credit on your MyTi ticket then&lt;br&gt;the attempt fails: no ticket is issued and there is no charge to your ticket.&lt;br&gt;Your system must handle multiple MyTi tickets, each with its own unique id—the id will be&lt;br&gt;used to identify which MyTi ticket is being used / charged / etc.&lt;br&gt;Journeys and Travel Passes&lt;br&gt;The MyTi system is designed to automatically combine multiple Journeys in a day by one&lt;br&gt;User into the cheapest Travel Pass that covers those Journeys. For example, if a User travels&lt;br&gt;twice inside 2 hours, then a 2 Hour pass is purchased. However, if the user travels again later&lt;br&gt;in the day, the 2 Hour pass may be turned into an All Day pass if that is cheaper than 2 2-&lt;br&gt;Hour passes.&lt;br&gt;Each time the user asks for a new Journey, the previously purchased Travel Pass should be&lt;br&gt;checked:&lt;br&gt;1. If the current Travel Pass is an All Day and we are in the day and the pass covers the&lt;br&gt;journey zones, then a new Travel Pass does not need to be purchased;&lt;br&gt;2. If the new Journey fits inside the 2 Hours of the current Travel Pass, then a new&lt;br&gt;Travel Pass does not need to be purchased;&lt;br&gt;3. If the current Travel Pass is a 2 Hour and the new Journey is outside that time, then a&lt;br&gt;new 2 Hour Pass needs to be purchased.&lt;br&gt;TravelPass objects should store the information needed for all decisions described above&lt;br&gt;(e.g. whether to add a new Journey into an existing TravelPass).&lt;br&gt;To purchase a Travel Pass take a Journey, the system user must be prompted for:&lt;br&gt;-  The id of the MyTi card is to be charged to be used;&lt;br&gt;-  the day of travel, the start time and the end time;&lt;br&gt;-  the starting Station and end Station of the journey.&lt;br&gt;BONUS: The above means that users may spend more on Travel Passes than they needed to:&lt;br&gt;e.g., they may end up buying multiple 2-hour travel passes instead of one All Day pass. A&lt;br&gt;bonus task is implement logic that always results in the cheapest Travel Pass options:&lt;br&gt;1. IF the new Travel Pass means that all that day’s Passes would add up to cost more&lt;br&gt;than a All Day Pass—then all the Passes for that day are replaced by a single All Day&lt;br&gt;Pass; in this case the MyTi card is charged the difference between what has already&lt;br&gt;been paid that day, and what an All Day Pass would cost.&lt;br&gt;2. You have to do similar thinking about when different Journeys are in different Zones!&lt;br&gt;I’ll leave that to you to think about &lt;br&gt;If you try to purchase a Journey that requires a new Travel Pass, or an upgrade from 2 Hour&lt;br&gt;to All Day, and there is not enough credit left on their MyTi card, then the purchase of that&lt;br&gt;Journey must fail (with an Exception), and the user told they need to recharge their card.&lt;br&gt;Users&lt;br&gt;A MyTi ticket can be associated with one unique User. The MyTi ticket needs to store details&lt;br&gt;of its user, such as name and email address. A User needs to have access to their MyTi card.&lt;br&gt;Day and Times&lt;br&gt;To make things easier (and to run demos in less than real time!) you will type in the day and&lt;br&gt;times of Journeys (rather than using a System call to get them automatically). Using a “24&lt;br&gt;hour” time representation should make it easy to determine the length of Journeys. Note that&lt;br&gt;a Journey fits inside a 2 Hour pass if it ends before the end of the 2 Hour period. An All Day&lt;br&gt;pass covers all journeys that start inside that day and runs from midnight to 23:59pm.&lt;br&gt;Stations&lt;br&gt;Stations have a unique name and each Station can tell which Zone it is in.&lt;br&gt;Admin Functions&lt;br&gt;You also need to implement the following system administration functions:&lt;br&gt;-  On request, print all TravelPasses purchased on all MyTi cards. This list should&lt;br&gt;ordered by card id. For each TravelPass, list the Journeys that were in it;&lt;br&gt;-  Print usage statistics for all Stations: i.e., how many journeys started at each Station,&lt;br&gt;how many finished at each Station;&lt;br&gt;-  Create a new User: this requires input of a new id (the operation fails if it is already in&lt;br&gt;use), name, type (Adult, Junior, Senior), and email address.&lt;br&gt;Program Development&lt;br&gt;When implementing large programs, especially using object-oriented style, it is highly&lt;br&gt;recommended that you build your program incrementally.&lt;br&gt;This assignment proposes a specific incremental implementation process: this is designed to&lt;br&gt;both help you think about building large programs, and to help ensure good progress! You are&lt;br&gt;not strictly required to follow the structure below, but it will help you manage complexity.&lt;br&gt;Part A (1 mark): Extend existing code&lt;br&gt;Sample code implementing the outline of menu-based main program will be made available.&lt;br&gt;1. Design the TravelPass class to contain all data and operations it needs (e.g. the Zone&lt;br&gt;and Duration; Day and Start/End times);&lt;br&gt;2. Define Exceptions to handle problems/errors. These may include: trying to&lt;br&gt;purchase a pass without having enough funds; recharging by an invalid amount;&lt;br&gt;invalid menu options or inputs, etc.&lt;br&gt;Part B (1 mark): Class Design&lt;br&gt;Define all the classes and interfaces needed for the described system. In particular, you&lt;br&gt;should try to encapsulate all the appropriate data and operations that a class needs. This may&lt;br&gt;mean some classes refer to each other (e.g., the way Account refers to Customer).&lt;br&gt;At this point, you may just want to think about the data and operations and just write the&lt;br&gt;definitions, not all the code.&lt;br&gt;You will be submitting or demonstrating your class design in tutes or labs before the&lt;br&gt;due date. Details will be announced in lectures and on Blackboard.&lt;br&gt;Part C (3 marks): Main Program&lt;br&gt;Your main program should be in a class called MyTiSystem. (Of course, any class can&lt;br&gt;contain a main(); this is useful for testing that class.) The main program contains a menu that&lt;br&gt;offers the following options in a loop:&lt;br&gt;1. Buy a Travel Pass using a MyTi card&lt;br&gt;2. Recharge a MyTi card&lt;br&gt;3. Show remaining credit for a MyTi card&lt;br&gt;4. Purchase a Journey using a MyTi card&lt;br&gt;5. Print all Journeys made using all MyTi cards&lt;br&gt;6. Show Station statistics&lt;br&gt;7. Add a new User&lt;br&gt;8. Quit&lt;br&gt;Since we managing multiple MyTi cards, we have to enter a card’s id to know which MyTi&lt;br&gt;ticket to charge for a travel pass.&lt;br&gt;Part D (4 marks): Implement Core Functionality&lt;br&gt;Implement the core functionality of the MyTi system described above, except for the&lt;br&gt;complex decision-making around deciding whether a journey fits inside an existing&lt;br&gt;Travel Pass—i.e. in this version, just have the system buy a 2 Hour Travel Pass for each&lt;br&gt;Journey. You should be able to implement the rest of the MyTi functionality described above,&lt;br&gt;and run and test your system&lt;br&gt;Part E (1 marks): Include Multiple Journeys in Travel Passes&lt;br&gt;Implement the logic that decides whether a new Journey fits inside an existing Travel Pass or&lt;br&gt;whether the user needs to buy a new Travel Pass for that Journey.&lt;br&gt;Demos (1 mark each – 2 marks total)&lt;br&gt;You are required to demonstrate your progress and final solution to the teaching staff twice.&lt;br&gt;Details will be made available during lectures and on Blackboard.&lt;br&gt;Other (3 marks)&lt;br&gt;Marks will be awarded for coding style, documentation/comments, code layout and clarity,&lt;br&gt;meaningful error and other messages, proper error handling, choice of data structures and&lt;br&gt;other design decisions. You are encouraged to discuss such issues with your tutors and lab&lt;br&gt;assistants, or with the coding mentors.&lt;br&gt;Bonus (1.5 marks each)&lt;br&gt; Implement logic, or “business rules”, for combining Travel Passes so that the user is&lt;br&gt;charged the cheapest Travel Pass that fits their day of travel. You are welcome to discuss&lt;br&gt;the logic and different conditions via Blackboard Discussion boards; however, every&lt;br&gt;student must implement the final Java solution by themselves.&lt;br&gt; There will be another bonus task announced later on for students that would like to&lt;br&gt;challenge themselves further.&lt;br&gt;Test Data&lt;br&gt;Your program MUST include the following test items: just create them in your main program&lt;br&gt;and use them to populate your data structures that keep track of all such items. These will be&lt;br&gt;used to test/mark your program so it’s crucial that you enter them. You may add further Users&lt;br&gt;and Stations if you wish, but you must add at least the ones below.&lt;br&gt; Users (id, type, name, email)&lt;br&gt;o lc, Lawrence Cavedon, lawrence.cavedon@rmit.edu.au&lt;br&gt; Stations (name, zone)&lt;br&gt;o Central, 1&lt;br&gt;o Flagstaff, 1&lt;br&gt;o Richmond, 1&lt;br&gt;o Lilydale, 2&lt;br&gt;o Epping, 2&lt;br&gt;Sample Test Runs&lt;br&gt;Sample runs demonstrating behaviour of the system will be provided on Blackboard.&lt;br&gt;Submission&lt;br&gt;Assignment submission will be via Blackboard, by 5.00pm, Monday September 12 2016.&lt;br&gt;You can submit your assignment as many times as you want before the due date. Each&lt;br&gt;submission will overwrite any previous submissions.&lt;br&gt;1. You need to submit a class diagram (in pdf, gif or jpeg format).&lt;br&gt;2. You are required to submit your .java files weekly via Blackboard. Your progress will&lt;br&gt;be taken into consideration in marking. Further details will follow.&lt;br&gt;3. You must include a README file. This should describe how to run your program,&lt;br&gt;what extra functionality you implemented, any standard functionality you know does&lt;br&gt;not work, and any problems or assumptions. If the tutors have any problem running&lt;br&gt;your program and the README does not help then you will lose marks.&lt;br&gt;4. There will also be demos for this assignment. You will be asked to demonstrate your&lt;br&gt;progress and/or explain your design. Details of the demo will be announced on&lt;br&gt;Blackboard and in lectures.&lt;br&gt;5. For the code submission, you must include only the source files in your submission&lt;br&gt;(do not submit any *.class files!). Your code must on under RMIT UNIX machines.&lt;br&gt;6. Late final submissions will incur a penalty of 10% per day. Submissions made 5 days&lt;br&gt;after the due date will receive no marks.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;java实现一个旅行售票管理系统，这个题主要考察学生的java基础知识，编程逻辑能力，类的设计和OOP知识，&lt;br&gt;功能点比较多，细节点也比较多。&lt;br&gt;&lt;br&gt;&lt;st
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Python代写： ass4</title>
    <link href="http://yoursite.com/2016/12/15/page65/"/>
    <id>http://yoursite.com/2016/12/15/page65/</id>
    <published>2016-12-15T03:56:57.000Z</published>
    <updated>2017-01-11T07:51:13.084Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用python实现二叉搜索数的功能，在原来的模板基础上，增加题目要求写的方法，实现功能并且最后完成测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;You may begin this assignment with the sample BST code.&lt;br&gt;Add the following functionality to the code:&lt;br&gt;1.  Modify the code so that each node stores not only a number (which is used as the sort value (or “key”) of the node), but also a string containing the name of a person.  So, the root node of a BST may contain for its data:  [40, “Wendy”], the left child of the root may be [18, “Carol”].   Modify all functions that this change affects.&lt;br&gt;2.  Add a function called “changeLeaves” which changes the person’s name contained in the leaf nodes to “Leif”.    Recall that a leaf node is one that has no children.  Your function should take one parameter, the root of a BST, and it should return the root of the (changed) tree.&lt;br&gt;3. Add a function called “countNodes” that counts the number of nodes that contain names starting with “w” or “W”.  Your function should take one parameter, the head of a BST and it should return the number of nodes matching the given condition.&lt;br&gt;4. Add a function called “printReverse” that prints all the nodes in reverse order.  That is, the node with the largest numerical value is printed first and the node with the smallest numerical value is printed last.  Your function should take as a parameter the root of a BST and it should return nothing.&lt;br&gt;5. Write a function that will convince the TA that your code works.  Be sure to explain what you are showing.  You should cover special cases such as empty trees.&lt;br&gt;What to Submit&lt;br&gt;Submit a single file containing your entire program.  DO NOT ZIP THE FILE. You do not need to include the data file.  We will test your program on a different grid.&lt;br&gt;Be sure you document your program appropriately.  Each function should include a header comment explaining what the function does, what the parameters are and what it returns.&lt;br&gt;Marking&lt;br&gt;The assignment will be marked using a rubric.  Rubrics provide a guide to the TAs however they are not all inclusive.  We may deduct marks for unanticipated errors.&lt;br&gt;I do not give extensions on assignments.   A 24 hour extension is available to everyone but comes with a 2 mark penalty.  Please do not ask for another extension unless you have a very, very good reason.&lt;br&gt;Academic Integrity&lt;br&gt;Please refer to the notes on Academic Integrity.  It is ok (and encouraged) to talk about solutions with your friends but please do your own work.  It is also ok to take snippits of code from the internet as long as the code does not solve the entire problem.  If you use snippits of code, please document it in your comments by adding a URL indicating where the code came from.&lt;br&gt;&lt;br&gt;“””&lt;br&gt;This module implements binary search trees.&lt;br&gt;The tree elements may be of any type.  Duplicates are not allowed.&lt;br&gt;&lt;br&gt;Example for CISC 121&lt;br&gt;&lt;br&gt;“””&lt;br&gt;&lt;br&gt;# A BST node is a dict with three elements:&lt;br&gt;# 1. data: the value in the node&lt;br&gt;# 2. left: a reference to the left subtree&lt;br&gt;# 3. right: a reference to the right subtree&lt;br&gt;&lt;br&gt;# Prints an indented display of the tree – useful for debugging.&lt;br&gt;# The output will look kind of like a sideways version of a drawing&lt;br&gt;# of the tree.&lt;br&gt;def display(tree, indent=0):&lt;br&gt;    if tree == None: # empty&lt;br&gt;        pass&lt;br&gt;    else:&lt;br&gt;        # right tree first (so it’s on the right when you tilt your&lt;br&gt;        # head to the left to look at the display)&lt;br&gt;        display(tree[‘right’],indent+1)&lt;br&gt;        print(“    “ * indent + str(tree[‘data’]))&lt;br&gt;        # now the left tree&lt;br&gt;        display(tree[‘left’],indent+1)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;# adds a value to a BST and returns a pointer to the modified BST&lt;br&gt;def add(tree, value):&lt;br&gt;    if tree == None:&lt;br&gt;        return {‘data’:value, ‘left’:None, ‘right’:None}&lt;br&gt;    elif value &amp;lt; tree[‘data’]:&lt;br&gt;        tree[‘left’] = add(tree[‘left’],value)&lt;br&gt;        return tree&lt;br&gt;    elif value &amp;gt; tree[‘data’]:&lt;br&gt;        tree[‘right’] = add(tree[‘right’],value)&lt;br&gt;        return tree&lt;br&gt;    else: # value == tree[‘data’]&lt;br&gt;        return tree # ignore duplicate&lt;br&gt;&lt;br&gt;def printValues(tree):&lt;br&gt;    if tree == None:&lt;br&gt;        return&lt;br&gt;    printValues(tree[‘left’])&lt;br&gt;    print(tree[‘data’])&lt;br&gt;    printValues(tree[‘right’])&lt;br&gt;&lt;br&gt;def main():&lt;br&gt;    myTree = None  #create an empty tree&lt;br&gt;    #Create a tree with the nodes [20, 2, 25, 14, 1, 23, 75, 93, 74]&lt;br&gt;    #Note that the add function always returns the root of the BST!&lt;br&gt;    myTree = add(myTree, 20)&lt;br&gt;    myTree = add(myTree, 2)&lt;br&gt;    myTree = add(myTree, 25)&lt;br&gt;    myTree = add(myTree, 14)&lt;br&gt;    myTree = add(myTree, 1)&lt;br&gt;    myTree = add(myTree, 23)&lt;br&gt;    myTree = add(myTree, 75)&lt;br&gt;    myTree = add(myTree, 93)&lt;br&gt;    myTree = add(myTree, 74)&lt;br&gt;&lt;br&gt;    display(myTree, 0)&lt;br&gt;    printValues(myTree)&lt;br&gt;&lt;br&gt;&lt;br&gt;main()&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;用python实现二叉搜索数的功能，在原来的模板基础上，增加题目要求写的方法，实现功能并且最后完成测试&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/stro
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： CS  162 Intro  to  Programming  III</title>
    <link href="http://yoursite.com/2016/12/14/page64/"/>
    <id>http://yoursite.com/2016/12/14/page64/</id>
    <published>2016-12-14T03:26:52.000Z</published>
    <updated>2017-01-11T07:48:03.917Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;根据给的类图，实现一个优先级队列，完成类接口和重写hashCode函数，实现displayTodoList ，displayOrdered ，addTask ，removeTask ，&lt;br&gt;alterTaskPriority 等等方法的实现&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;1.0 System Analysis&lt;br&gt;The class diagrams for this project is as following:&lt;br&gt;&lt;br&gt;&lt;br&gt;2.0 System Design&lt;br&gt;Task class used to store a task information. It’s implements the Comparable Interface and rewrite the equals and hashCode function.&lt;br&gt;&lt;br&gt;This program give each task an id. We access the task by id and do the operation.&lt;br&gt;&lt;br&gt;Todo class provide the following operations:&lt;br&gt;Function displayTodoList display a list of all tasks on screen.&lt;br&gt;Function displayOrdered display a list of all tasks orderd by priority and due today on screen.&lt;br&gt;Function addTask add a task to the list.&lt;br&gt;Function removeTask remove an item from the list.&lt;br&gt;Function alterTaskPriority alter the priority of a task.&lt;br&gt;Function alterTaskDue alter the due of a task.&lt;br&gt;Function readFromFile read a list of tasks from a text file and load the data into field taskList.&lt;br&gt;Function writeIntoFile storage all the tasks into a file.&lt;br&gt;3.0 Test Plan&lt;br&gt;Case1: display all the tasks&lt;br&gt;    1| read the chapter1 of algorithm| 0| todo&lt;br&gt;    2| clean the table| 2| done&lt;br&gt;    3| make lunch| 1| todo&lt;br&gt;&lt;br&gt;Case2: display all the tasks ordered by priority&lt;br&gt;    2| clean the table| 2| done&lt;br&gt;    3| make lunch| 1| todo&lt;br&gt;    1| read the chapter1 of algorithm| 0| todo&lt;br&gt;&lt;br&gt;Case3: add a task : clean the floor&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| make lunch| 1| todo&lt;br&gt;    3| read the chapter1 of algorithm| 0| todo&lt;br&gt;    4| clean the floor| 0| todo&lt;br&gt;&lt;br&gt;Case4: remove a task, id: 2&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| read the chapter1 of algorithm| 0| todo&lt;br&gt;    3| clean the floor| 0| todo&lt;br&gt;&lt;br&gt;Case5: alter a task’s priority, id: 3 priority: 4&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| read the chapter1 of algorithm| 0| todo&lt;br&gt;    3| clean the floor| 4| todo&lt;br&gt;&lt;br&gt;Case6: alter a task’s due, id: 3 due done&lt;br&gt;    1| clean the table| 2| done&lt;br&gt;    2| read the chapter1 of algorithm| 0| todo&lt;br&gt;    3| clean the floor| 4| done&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;根据给的类图，实现一个优先级队列，完成类接口和重写hashCode函数，实现displayTodoList ，displayOrdered ，addTask ，remo
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： CS  162 Intro  to  Programming  II</title>
    <link href="http://yoursite.com/2016/12/11/page63/"/>
    <id>http://yoursite.com/2016/12/11/page63/</id>
    <published>2016-12-11T13:20:53.000Z</published>
    <updated>2017-01-11T07:43:40.755Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;c++的入门题，练习vector的使用方法，push_back(),pop_back(), []. clear()等等方法的联系使用,最后在描述和vector和array的区别&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;CS  162&lt;br&gt;Intro  to  Programming  II&lt;br&gt;Vectors&lt;br&gt;1&lt;br&gt;Vectors&lt;br&gt;– A container from the Standard Template Library&lt;br&gt;– Holds a set of elements, like an array&lt;br&gt;– Flexible number of elements - can grow and&lt;br&gt;shrink&lt;br&gt;•  Similar  to  a  dynamic  array&lt;br&gt;• Must include vector header file to use vectors&lt;br&gt;#include &lt;vector&gt;&lt;br&gt;Vectors&lt;br&gt;• Can hold values of any type&lt;br&gt;– Type is specified when a vector is defined&lt;br&gt;vector&lt;int&gt; scores;&lt;br&gt;vector&lt;double&gt; volumes;&lt;br&gt;• Can use [] to access elements&lt;br&gt;• scores[3]&lt;br&gt;• volumes[0]&lt;br&gt;Defining  Vectors&lt;br&gt;• Define a vector of integers (starts with 0&lt;br&gt;elements)&lt;br&gt;vector&lt;int&gt; scores;&lt;br&gt;• Define int vector with initial size 30 elements&lt;br&gt;vector&lt;int&gt; scores(30);&lt;br&gt;• Define 20-element int vector and initialize all&lt;br&gt;elements to 0&lt;br&gt;vector&lt;int&gt; scores(20, 0);&lt;br&gt;• Define int vector initialized to size and contents&lt;br&gt;of vector finals&lt;br&gt;vector&lt;int&gt; scores(finals);&lt;br&gt;Growing a Vector’s Size&lt;br&gt;• Use push_back member function to add&lt;br&gt;an element to a full array or to an array&lt;br&gt;that had no defined size&lt;br&gt;// Add a new element holding a 75&lt;br&gt;scores.push_back(75);&lt;br&gt;• Use size member function to determine&lt;br&gt;number of elements currently in a vector&lt;br&gt;howbig = scores.size();&lt;br&gt;Removing Vector Elements&lt;br&gt;• Use pop_back member function to&lt;br&gt;remove last element from vector&lt;br&gt;scores.pop_back();&lt;br&gt;• To remove all contents of vector, use&lt;br&gt;clear member function&lt;br&gt;scores.clear();&lt;br&gt;• To determine if vector is empty, use empty&lt;br&gt;member function&lt;br&gt;while (!scores.empty()) …&lt;br&gt;Vector  Func&lt;ons 1=&quot;&quot; 2=&quot;&quot; 5=&quot;&quot; 7=&quot;&quot; 8=&quot;&quot; 9=&quot;&quot; 567=&quot;&quot; • useful=&quot;&quot; vector=&quot;&quot; func&lt;ons:=&quot;&quot; • capacity()=&quot;&quot; :=&quot;&quot; returns=&quot;&quot; the=&quot;&quot; capacity=&quot;&quot; of=&quot;&quot; • reserve=&quot;&quot; (n)=&quot;&quot; reallocates=&quot;&quot; storage=&quot;&quot; to=&quot;&quot; increase=&quot;&quot; be=&quot;&quot; n.=&quot;&quot; if=&quot;&quot; n=&quot;&quot; is=&quot;&quot; &lt;=&quot;&quot; than=&quot;&quot; current=&quot;&quot; capacity,=&quot;&quot; it=&quot;&quot; does=&quot;&quot; nothing.=&quot;&quot; • push_back(val)=&quot;&quot; adds=&quot;&quot; val=&quot;&quot; end=&quot;&quot; • pop_back()=&quot;&quot; last=&quot;&quot; element=&quot;&quot; more=&quot;&quot; on=&quot;&quot; page=&quot;&quot; expensive=&quot;&quot; opera&lt;ons=&quot;&quot; • add=&quot;&quot; an=&quot;&quot; into=&quot;&quot; middle=&quot;&quot; a=&quot;&quot; (not=&quot;&quot; at=&quot;&quot; end)=&quot;&quot; • eg.=&quot;&quot; add=&quot;&quot; posi&lt;on=&quot;&quot; i=&quot;&quot; • all=&quot;&quot; elements=&quot;&quot; index=&quot;&quot; and=&quot;&quot; higher=&quot;&quot; are=&quot;&quot; moved=&quot;&quot; down=&quot;&quot; by=&quot;&quot; one=&quot;&quot; insert=&quot;&quot; • remove=&quot;&quot; from=&quot;&quot; ater=&quot;&quot; removed=&quot;&quot; up=&quot;&quot; remove=&quot;&quot; arrays=&quot;&quot; or=&quot;&quot; vectors=&quot;&quot; • vectors=&quot;&quot; great=&quot;&quot; you=&quot;&quot; need=&quot;&quot; flexibility=&quot;&quot; dynamically=&quot;&quot; resize=&quot;&quot; array=&quot;&quot; • arrays=&quot;&quot; efficient=&quot;&quot; vectors.=&quot;&quot; • use=&quot;&quot; really=&quot;&quot; care=&quot;&quot; about=&quot;&quot; speed=&quot;&quot; • do=&quot;&quot; not=&quot;&quot; use=&quot;&quot; just=&quot;&quot; because=&quot;&quot; container=&quot;&quot; with=&quot;&quot; built=&quot;&quot; in=&quot;&quot; func&lt;ons=&quot;&quot; “easier”=&quot;&quot; code.=&quot;&quot; font=&quot;&quot;&gt;&lt;/ons&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/int&gt;&lt;/double&gt;&lt;/int&gt;&lt;/vector&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;c++的入门题，练习vector的使用方法，push_back(),pop_back(), []. clear()等等方法的联系使用,最后在描述和vector和arra
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++代写： Final  Project,  Part  1</title>
    <link href="http://yoursite.com/2016/12/10/page62/"/>
    <id>http://yoursite.com/2016/12/10/page62/</id>
    <published>2016-12-10T14:24:23.000Z</published>
    <updated>2017-01-11T07:41:22.324Z</updated>
    
    <content type="html">&lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C++完成一个互动的小游戏，需要按要求设计抽象类Game，Actor，Swan，Player等等类。对面向对象设计思想要求比较高，&lt;br&gt;游戏规则简单介绍一下，玩家上下左右逃生到出口，然后有苹果可以吃，也会碰到魔鬼被吃掉，赢的条件是安全逃到门口&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Requirement&lt;/strong&gt;&lt;br&gt;&lt;br&gt;Final  Project,  Part  1&lt;br&gt;Read the last page first!&lt;br&gt;Grading: You will NOT be demonstrating your final project! This means you must spend&lt;br&gt;more time on the reflections, design and test documents. The grader will not be able to ask&lt;br&gt;you questions. If the grader has a question that is not answered in your supplied&lt;br&gt;documentation then you will likely lose points.&lt;br&gt;You will create a program that will enable the user to move through a maze. The maze&lt;br&gt;will contain locked doors that require keys to be opened. Guarding the maze are roving&lt;br&gt;killer swans. The player isn’t completely defenseless as swans aren’t able to harm a&lt;br&gt;player who has recently consumed an apple. To escape the maze, the player must&lt;br&gt;navigate through the maze, swans, and doors until they reach a ladder. Each maze level&lt;br&gt;contains one ladder that takes the player to the next level of the maze until the final level&lt;br&gt;is reached. On the final level there is an exit instead of a ladder.&lt;br&gt;Baba Yaga is back! She has captured the player. Her soulless minion didn’t lock the&lt;br&gt;door correctly so the player can try to escape. She uses killer swans as the guards. Each&lt;br&gt;level starts with one swan. Baba Yaga knows the player has left the cell but can only&lt;br&gt;summon one new swan at a time. For every 30 steps the player takes, a new swan will&lt;br&gt;randomly appear on the current level.&lt;br&gt;The player will also encounter apples lying around the maze. The player can pick up and&lt;br&gt;carry up to two apples at a time. As long as the player has an apple in their inventory,&lt;br&gt;they may stop and eat it in order to render them invulnerable to swans for the next 15&lt;br&gt;steps.&lt;br&gt;Your code will implement this game as follows:&lt;br&gt;You will start your game with a single command line argument. This will be an integer&lt;br&gt;value that indicates the number of levels. The floor files will be named floor_# where #&lt;br&gt;indicates which floor it holds. Your program will always start reading with the first floor.&lt;br&gt;An example of running the game with a maze that has 3 floors:&lt;br&gt;./maze 3 (assumes name of first floor is: floor_1)&lt;br&gt;The maze is defined by a set of text files, each of which contains a single level.&lt;br&gt;Whenever the game starts or the player reaches a new level, that data must be read from&lt;br&gt;the appropriate text file. The first line of each file will have two integer values which&lt;br&gt;describe the number of rows and columns for that level. You must use this to create a&lt;br&gt;dynamic array of that size and then read in the data for the level. Perform input&lt;br&gt;validation on all characters in the file as you read them. Do not load the file and inform&lt;br&gt;the user there is a problem.&lt;br&gt;The following characters or symbols describe objects in the levels:&lt;br&gt;‘#’- walls&lt;br&gt;‘D’- door&lt;br&gt;‘L’- Ladder&lt;br&gt;‘P’- Player&lt;br&gt;‘S’- Swan (the starting location of the first swan)&lt;br&gt;‘K’ Key&lt;br&gt;‘A’- Apple&lt;br&gt;‘E’- Starting location for each level&lt;br&gt;‘X’- Exit(one way out)&lt;br&gt;‘ ‘- empty space (blank character)&lt;br&gt;You must concatenate the file name with the new floor number. You will not use an&lt;br&gt;array of filenames? HINT: This will require string streams.&lt;br&gt;You must display that level to the user. Then you will accept the following commands&lt;br&gt;from the user:&lt;br&gt;‘w’ move up&lt;br&gt;‘a’ move left&lt;br&gt;‘s’ move down&lt;br&gt;‘d’ move right&lt;br&gt;‘e’ eat apple&lt;br&gt;‘u’ use ladder&lt;br&gt;‘q’ quit&lt;br&gt;Each input from the user must be validated before any action takes place. After each&lt;br&gt;command, you will update the array, then print the current status of the game to the&lt;br&gt;screen. Each command is one “step” which you will use to coordinate movement and&lt;br&gt;summoning of the swans.&lt;br&gt;You will update the position of the player and all swans after every move entered by the&lt;br&gt;player. The K (key) and A (apple) symbols will be removed from the maze after the&lt;br&gt;player picks them up. The D (door) is removed once the player enters that space with a&lt;br&gt;key. To move between floors, the player must get to the space with the ladder. On the&lt;br&gt;final level the player must reach the X to exit the maze and make their escape.&lt;br&gt;The position of each Actor (Swan or Player) will not be stored in the array. It will be&lt;br&gt;stored in the Player or Swan object. When you read in the initial floor array the ‘S’&lt;br&gt;should be changed to a blank character. When you display the floor after each move you&lt;br&gt;will print the array, adding a ‘P’ or ‘S’ as appropriate for each Actor.&lt;br&gt;Movement- To move around a level the players must use the ‘W’, ‘A’. ‘S, and ‘D’ keys.&lt;br&gt;Your move function should prevent them from moving through walls, or a door if they&lt;br&gt;don’t have a key. If the player has a key then they can move through a door. Simply&lt;br&gt;remove a key from the player and convert the D space to an empty space assuming the&lt;br&gt;user has at least one.&lt;br&gt;When the player gets to a ladder space they climb it with a ‘U’ command. The E&lt;br&gt;character designates where the player starts on the new level. Time (i.e. the number of&lt;br&gt;steps) is reset on each new level. When the player moves from the starting space, the E&lt;br&gt;must remain. If a swan catches a player, their location must be changed to the E square.&lt;br&gt;After each move, the updated maze must be displayed for the user.&lt;br&gt;When the player moves into a space that contains a key (‘K’) they pick up the key to add&lt;br&gt;it to their inventory. When a player moves into a space with an apple (‘A’) they pick it&lt;br&gt;up. A player can hold no more than 3 keys and they can carry only 2 apples. If they enter&lt;br&gt;a space and cannot hold the key or apple it remains in that space. The player can use an&lt;br&gt;apple by eating it (‘E’). This makes the swans ignore the player for the next 15 turns,&lt;br&gt;decreases the apples the player has by 1, and takes an entire step/turn (i.e. they don’t&lt;br&gt;move that step).&lt;br&gt;Swans (10 points): The Swans will be similar to the Player, except they move randomly.&lt;br&gt;They cannot move through walls or doors. They will ignore apples on the ground. If a&lt;br&gt;swan is in a square adjacent to the player, the player will be moved back to the starting&lt;br&gt;space for that level. The swans cannot move between levels. For every 30 steps the player&lt;br&gt;takes, place a new swan at a random valid location in the current level.&lt;br&gt;Classes. You will need the following classes:&lt;br&gt;Game class- dynamic array for current floor, array of pointers to actors, int total#_floors,&lt;br&gt;int current_floor, function to read in floors from a file&lt;br&gt;Floor class- char [][] tiles, void print to screen, constructor&lt;br&gt;Actor class: ABSTRACT- int row, int column, char symbol, virtual move&lt;br&gt;Swan class (inherits Actor)- move (automated),&lt;br&gt;Player class (inherits Actor)- move (prompt for WASD), keys(s), hold up to 3 keys,  hold&lt;br&gt;up  to  2  apples&lt;br&gt;(You  will  need  a  function  to  send  the  player  back  to  the  start  if  a  swan  moves&lt;br&gt;adjacent  to  their  position.   Where  do  you  put  that  function?)&lt;br&gt;You must include a makefile and put all files for your assignment in a zip file. Each&lt;br&gt;class must have separate source and header files. If you do not do this assignment will&lt;br&gt;NOT be graded.&lt;br&gt;Grading:&lt;br&gt;•  programming style and documentation (10%)&lt;br&gt;•  read and create each maze level properly (5%)&lt;br&gt;•  the player and swans move through the maze correctly (10%)&lt;br&gt;o the apples are picked up and used correctly (5%)&lt;br&gt;o the keys are picked up and used correctly with the doors (5%)&lt;br&gt;o the swans send the player back correctly (5%)&lt;br&gt;•  create the Game class and object (5%)&lt;br&gt;•  create the Actor class (5%)&lt;br&gt;•  create the Swan class and object (10%)&lt;br&gt;•  create the Player class and object (5%)&lt;br&gt;•  input validation for commands and reading the files (10%)&lt;br&gt;•  reflections document to include the design description, test plan, test results, and&lt;br&gt;comments about how you resolved problems while designing and implementing your&lt;br&gt;program (20%)&lt;br&gt;You must include a makefile put all files for your assignment in a zip file. If you do not&lt;br&gt;do this assignment will NOT be graded.&lt;br&gt;Each class must have separate source and header files. If you do not do this assignment&lt;br&gt;will NOT be graded.&lt;br&gt;If your program segfaults at anytime, you will lose 20 points.&lt;br&gt;Design your Program&lt;br&gt;As always you should sit down with pencil and paper and sketch out the design. Develop&lt;br&gt;the necessary algorithms. Do a desk test, i.e. walk through your algorithms and code to&lt;br&gt;look for logic errors.&lt;br&gt;Nope! No keyboard yet! Now design your incremental development. Your program&lt;br&gt;should be decomposed into functional units. If not, go back to the previous paragraph.&lt;br&gt;Look at the pieces and decide on the order you should use to implement and test each&lt;br&gt;part. Reading the floor into your program and then moving an actor are probably good&lt;br&gt;places to start. Then add a level to test using the ladder. Once you have the development&lt;br&gt;you are ready!&lt;br&gt;Nope! No keyboard yet. ? Design and organize the directories for your project. You&lt;br&gt;should have a working directory. Maybe you need a subdirectory to hold the your floor&lt;br&gt;plans. Have you designed your floor plans? What is there to design? Maybe you can&lt;br&gt;have a floor that allows you to test only one function or command at a time? Be careful&lt;br&gt;with file names. The default first file always has the same name. If you overwrite one&lt;br&gt;then you’ll need to create it again. Always have one directory to save a copy of your&lt;br&gt;code as you get each increment to compile. If you’re paranoid (I know I am) maybe you&lt;br&gt;have more than one stash and on different devices?&lt;br&gt;Now, you’re ready to code!&lt;br&gt;The moral is: Always plan ahead and make it as complete as you can!&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;</content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;&lt;br&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;br&gt;&lt;br&gt;C++完成一个互动的小游戏，需要按要求设计抽象类Game，Actor，Swan，Player等等类。对面向对象设计思想要求比较高，&lt;br&gt;游戏规则简单介绍一下，玩家上下
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
</feed>
